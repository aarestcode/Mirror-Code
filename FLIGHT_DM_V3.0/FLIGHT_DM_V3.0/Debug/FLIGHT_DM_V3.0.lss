
FLIGHT_DM_V3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00003cea  00003d7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003cea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  00800190  00800190  00003e0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005100  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f2  00000000  00000000  000091b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002307  00000000  00000000  000097aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000afc  00000000  00000000  0000bab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000161e  00000000  00000000  0000c5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000054dd  00000000  00000000  0000dbce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  000130ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c 94 23 1a 	jmp	0x3446	; 0x3446 <__vector_8>
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	08 00       	.word	0x0008	; ????
      8e:	00 00       	nop
      90:	be 92       	st	-X, r11
      92:	24 49       	sbci	r18, 0x94	; 148
      94:	12 3e       	cpi	r17, 0xE2	; 226
      96:	ab aa       	std	Y+51, r10	; 0x33
      98:	aa 2a       	or	r10, r26
      9a:	be cd       	rjmp	.-1156   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
      9c:	cc cc       	rjmp	.-1640   	; 0xfffffa36 <__eeprom_end+0xff7efa36>
      9e:	4c 3e       	cpi	r20, 0xEC	; 236
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	be ab       	std	Y+54, r27	; 0x36
      a6:	aa aa       	std	Y+50, r10	; 0x32
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	00 00       	nop
      b6:	00 00       	nop
      b8:	00 08       	sbc	r0, r0
      ba:	41 78       	andi	r20, 0x81	; 129
      bc:	d3 bb       	out	0x13, r29	; 19
      be:	43 87       	std	Z+11, r20	; 0x0b
      c0:	d1 13       	cpse	r29, r17
      c2:	3d 19       	sub	r19, r13
      c4:	0e 3c       	cpi	r16, 0xCE	; 206
      c6:	c3 bd       	out	0x23, r28	; 35
      c8:	42 82       	std	Z+2, r4	; 0x02
      ca:	ad 2b       	or	r26, r29
      cc:	3e 68       	ori	r19, 0x8E	; 142
      ce:	ec 82       	std	Y+4, r14	; 0x04
      d0:	76 be       	out	0x36, r7	; 54
      d2:	d9 8f       	std	Y+25, r29	; 0x19
      d4:	e1 a9       	ldd	r30, Z+49	; 0x31
      d6:	3e 4c       	sbci	r19, 0xCE	; 206
      d8:	80 ef       	ldi	r24, 0xF0	; 240
      da:	ff be       	out	0x3f, r15	; 63
      dc:	01 c4       	rjmp	.+2050   	; 0x8e0 <I2C_WRITE+0x1bc>
      de:	ff 7f       	andi	r31, 0xFF	; 255
      e0:	3f 00       	.word	0x003f	; ????
      e2:	00 00       	nop
	...

000000e6 <__ctors_end>:
      e6:	11 24       	eor	r1, r1
      e8:	1f be       	out	0x3f, r1	; 63
      ea:	cf ef       	ldi	r28, 0xFF	; 255
      ec:	d0 e4       	ldi	r29, 0x40	; 64
      ee:	de bf       	out	0x3e, r29	; 62
      f0:	cd bf       	out	0x3d, r28	; 61

000000f2 <__do_copy_data>:
      f2:	11 e0       	ldi	r17, 0x01	; 1
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b1 e0       	ldi	r27, 0x01	; 1
      f8:	ea ee       	ldi	r30, 0xEA	; 234
      fa:	fc e3       	ldi	r31, 0x3C	; 60
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 39       	cpi	r26, 0x90	; 144
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	23 e0       	ldi	r18, 0x03	; 3
     10e:	a0 e9       	ldi	r26, 0x90	; 144
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a4 34       	cpi	r26, 0x44	; 68
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 4d 1a 	call	0x349a	; 0x349a <main>
     120:	0c 94 73 1e 	jmp	0x3ce6	; 0x3ce6 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <USART0_PRINTF>:
	}
	
	
	
	return OK;
}
     126:	e0 ec       	ldi	r30, 0xC0	; 192
     128:	f0 e0       	ldi	r31, 0x00	; 0
     12a:	90 81       	ld	r25, Z
     12c:	95 ff       	sbrs	r25, 5
     12e:	fd cf       	rjmp	.-6      	; 0x12a <USART0_PRINTF+0x4>
     130:	80 93 c6 00 	sts	0x00C6, r24
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	08 95       	ret

0000013a <SaveRegister>:
     13a:	01 96       	adiw	r24, 0x01	; 1
     13c:	24 ea       	ldi	r18, 0xA4	; 164
     13e:	31 e0       	ldi	r19, 0x01	; 1
     140:	82 9f       	mul	r24, r18
     142:	b0 01       	movw	r22, r0
     144:	83 9f       	mul	r24, r19
     146:	70 0d       	add	r23, r0
     148:	92 9f       	mul	r25, r18
     14a:	70 0d       	add	r23, r0
     14c:	11 24       	eor	r1, r1
     14e:	cb 01       	movw	r24, r22
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	90 41       	sbci	r25, 0x10	; 16
     156:	58 f4       	brcc	.+22     	; 0x16e <SaveRegister+0x34>
     158:	64 5a       	subi	r22, 0xA4	; 164
     15a:	71 40       	sbci	r23, 0x01	; 1
     15c:	44 ea       	ldi	r20, 0xA4	; 164
     15e:	51 e0       	ldi	r21, 0x01	; 1
     160:	85 e9       	ldi	r24, 0x95	; 149
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <eeprom_update_block>
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	08 95       	ret
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	08 95       	ret

00000174 <LoadRegister>:
     174:	01 96       	adiw	r24, 0x01	; 1
     176:	24 ea       	ldi	r18, 0xA4	; 164
     178:	31 e0       	ldi	r19, 0x01	; 1
     17a:	82 9f       	mul	r24, r18
     17c:	b0 01       	movw	r22, r0
     17e:	83 9f       	mul	r24, r19
     180:	70 0d       	add	r23, r0
     182:	92 9f       	mul	r25, r18
     184:	70 0d       	add	r23, r0
     186:	11 24       	eor	r1, r1
     188:	cb 01       	movw	r24, r22
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	90 41       	sbci	r25, 0x10	; 16
     190:	58 f4       	brcc	.+22     	; 0x1a8 <LoadRegister+0x34>
     192:	64 5a       	subi	r22, 0xA4	; 164
     194:	71 40       	sbci	r23, 0x01	; 1
     196:	44 ea       	ldi	r20, 0xA4	; 164
     198:	51 e0       	ldi	r21, 0x01	; 1
     19a:	85 e9       	ldi	r24, 0x95	; 149
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <eeprom_read_block>
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	08 95       	ret
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	08 95       	ret

000001ae <USART0_WRITE>:
     1ae:	e0 ec       	ldi	r30, 0xC0	; 192
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	90 81       	ld	r25, Z
     1b4:	95 ff       	sbrs	r25, 5
     1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <USART0_WRITE+0x4>
     1b8:	e5 e9       	ldi	r30, 0x95	; 149
     1ba:	f1 e0       	ldi	r31, 0x01	; 1
     1bc:	44 85       	ldd	r20, Z+12	; 0x0c
     1be:	55 85       	ldd	r21, Z+13	; 0x0d
     1c0:	66 85       	ldd	r22, Z+14	; 0x0e
     1c2:	77 85       	ldd	r23, Z+15	; 0x0f
     1c4:	76 2f       	mov	r23, r22
     1c6:	65 2f       	mov	r22, r21
     1c8:	54 2f       	mov	r21, r20
     1ca:	44 27       	eor	r20, r20
     1cc:	48 2b       	or	r20, r24
     1ce:	44 87       	std	Z+12, r20	; 0x0c
     1d0:	55 87       	std	Z+13, r21	; 0x0d
     1d2:	66 87       	std	Z+14, r22	; 0x0e
     1d4:	77 87       	std	Z+15, r23	; 0x0f
     1d6:	80 93 c6 00 	sts	0x00C6, r24
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	08 95       	ret

000001e0 <USART0_FLAG>:
     1e0:	80 91 c0 00 	lds	r24, 0x00C0
     1e4:	88 1f       	adc	r24, r24
     1e6:	88 27       	eor	r24, r24
     1e8:	88 1f       	adc	r24, r24
     1ea:	08 95       	ret

000001ec <USART0_READ>:
     1ec:	8f 92       	push	r8
     1ee:	9f 92       	push	r9
     1f0:	af 92       	push	r10
     1f2:	bf 92       	push	r11
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	ec 01       	movw	r28, r24
     202:	4a 01       	movw	r8, r20
     204:	5b 01       	movw	r10, r22
     206:	80 91 c0 00 	lds	r24, 0x00C0
     20a:	88 23       	and	r24, r24
     20c:	3c f1       	brlt	.+78     	; 0x25c <USART0_READ+0x70>
     20e:	a8 ee       	ldi	r26, 0xE8	; 232
     210:	b3 e0       	ldi	r27, 0x03	; 3
     212:	9a 01       	movw	r18, r20
     214:	ab 01       	movw	r20, r22
     216:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__muluhisi3>
     21a:	ab 01       	movw	r20, r22
     21c:	bc 01       	movw	r22, r24
     21e:	41 15       	cp	r20, r1
     220:	51 05       	cpc	r21, r1
     222:	61 05       	cpc	r22, r1
     224:	71 05       	cpc	r23, r1
     226:	09 f4       	brne	.+2      	; 0x22a <USART0_READ+0x3e>
     228:	48 c0       	rjmp	.+144    	; 0x2ba <USART0_READ+0xce>
     22a:	c1 2c       	mov	r12, r1
     22c:	d1 2c       	mov	r13, r1
     22e:	76 01       	movw	r14, r12
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	e0 ec       	ldi	r30, 0xC0	; 192
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	98 2f       	mov	r25, r24
     238:	9a 95       	dec	r25
     23a:	f1 f7       	brne	.-4      	; 0x238 <USART0_READ+0x4c>
     23c:	9f ef       	ldi	r25, 0xFF	; 255
     23e:	c9 1a       	sub	r12, r25
     240:	d9 0a       	sbc	r13, r25
     242:	e9 0a       	sbc	r14, r25
     244:	f9 0a       	sbc	r15, r25
     246:	90 81       	ld	r25, Z
     248:	99 23       	and	r25, r25
     24a:	5c f0       	brlt	.+22     	; 0x262 <USART0_READ+0x76>
     24c:	c4 16       	cp	r12, r20
     24e:	d5 06       	cpc	r13, r21
     250:	e6 06       	cpc	r14, r22
     252:	f7 06       	cpc	r15, r23
     254:	81 f7       	brne	.-32     	; 0x236 <USART0_READ+0x4a>
     256:	85 e1       	ldi	r24, 0x15	; 21
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	3d c0       	rjmp	.+122    	; 0x2d6 <USART0_READ+0xea>
     25c:	c1 2c       	mov	r12, r1
     25e:	d1 2c       	mov	r13, r1
     260:	76 01       	movw	r14, r12
     262:	a8 ee       	ldi	r26, 0xE8	; 232
     264:	b3 e0       	ldi	r27, 0x03	; 3
     266:	a5 01       	movw	r20, r10
     268:	94 01       	movw	r18, r8
     26a:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__muluhisi3>
     26e:	6c 15       	cp	r22, r12
     270:	7d 05       	cpc	r23, r13
     272:	8e 05       	cpc	r24, r14
     274:	9f 05       	cpc	r25, r15
     276:	21 f1       	breq	.+72     	; 0x2c0 <USART0_READ+0xd4>
     278:	80 91 c0 00 	lds	r24, 0x00C0
     27c:	84 fd       	sbrc	r24, 4
     27e:	23 c0       	rjmp	.+70     	; 0x2c6 <USART0_READ+0xda>
     280:	80 91 c0 00 	lds	r24, 0x00C0
     284:	83 fd       	sbrc	r24, 3
     286:	22 c0       	rjmp	.+68     	; 0x2cc <USART0_READ+0xe0>
     288:	80 91 c0 00 	lds	r24, 0x00C0
     28c:	82 fd       	sbrc	r24, 2
     28e:	21 c0       	rjmp	.+66     	; 0x2d2 <USART0_READ+0xe6>
     290:	20 91 c6 00 	lds	r18, 0x00C6
     294:	28 83       	st	Y, r18
     296:	e5 e9       	ldi	r30, 0x95	; 149
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	80 89       	ldd	r24, Z+16	; 0x10
     29c:	91 89       	ldd	r25, Z+17	; 0x11
     29e:	a2 89       	ldd	r26, Z+18	; 0x12
     2a0:	b3 89       	ldd	r27, Z+19	; 0x13
     2a2:	ba 2f       	mov	r27, r26
     2a4:	a9 2f       	mov	r26, r25
     2a6:	98 2f       	mov	r25, r24
     2a8:	88 27       	eor	r24, r24
     2aa:	82 2b       	or	r24, r18
     2ac:	80 8b       	std	Z+16, r24	; 0x10
     2ae:	91 8b       	std	Z+17, r25	; 0x11
     2b0:	a2 8b       	std	Z+18, r26	; 0x12
     2b2:	b3 8b       	std	Z+19, r27	; 0x13
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e c0       	rjmp	.+28     	; 0x2d6 <USART0_READ+0xea>
     2ba:	85 e1       	ldi	r24, 0x15	; 21
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0b c0       	rjmp	.+22     	; 0x2d6 <USART0_READ+0xea>
     2c0:	85 e1       	ldi	r24, 0x15	; 21
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <USART0_READ+0xea>
     2c6:	86 e1       	ldi	r24, 0x16	; 22
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <USART0_READ+0xea>
     2cc:	87 e1       	ldi	r24, 0x17	; 23
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <USART0_READ+0xea>
     2d2:	88 e1       	ldi	r24, 0x18	; 24
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	df 90       	pop	r13
     2e0:	cf 90       	pop	r12
     2e2:	bf 90       	pop	r11
     2e4:	af 90       	pop	r10
     2e6:	9f 90       	pop	r9
     2e8:	8f 90       	pop	r8
     2ea:	08 95       	ret

000002ec <USART0_FLUSH>:
     2ec:	80 91 c0 00 	lds	r24, 0x00C0
     2f0:	88 23       	and	r24, r24
     2f2:	44 f4       	brge	.+16     	; 0x304 <USART0_FLUSH+0x18>
     2f4:	a6 ec       	ldi	r26, 0xC6	; 198
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e0 ec       	ldi	r30, 0xC0	; 192
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	8c 91       	ld	r24, X
     2fe:	80 81       	ld	r24, Z
     300:	88 23       	and	r24, r24
     302:	e4 f3       	brlt	.-8      	; 0x2fc <USART0_FLUSH+0x10>
     304:	08 95       	ret

00000306 <USART0_INIT>:
     306:	2e e0       	ldi	r18, 0x0E	; 14
     308:	31 e0       	ldi	r19, 0x01	; 1
     30a:	30 93 41 03 	sts	0x0341, r19
     30e:	20 93 40 03 	sts	0x0340, r18
     312:	60 93 9d 01 	sts	0x019D, r22
     316:	70 93 9e 01 	sts	0x019E, r23
     31a:	80 93 9f 01 	sts	0x019F, r24
     31e:	90 93 a0 01 	sts	0x01A0, r25
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	aa 1f       	adc	r26, r26
     32c:	bb 1f       	adc	r27, r27
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	aa 1f       	adc	r26, r26
     334:	bb 1f       	adc	r27, r27
     336:	9c 01       	movw	r18, r24
     338:	ad 01       	movw	r20, r26
     33a:	22 0f       	add	r18, r18
     33c:	33 1f       	adc	r19, r19
     33e:	44 1f       	adc	r20, r20
     340:	55 1f       	adc	r21, r21
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	44 1f       	adc	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	72 e1       	ldi	r23, 0x12	; 18
     34e:	8a e7       	ldi	r24, 0x7A	; 122
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     356:	21 50       	subi	r18, 0x01	; 1
     358:	31 09       	sbc	r19, r1
     35a:	30 93 c5 00 	sts	0x00C5, r19
     35e:	20 93 c4 00 	sts	0x00C4, r18
     362:	88 e1       	ldi	r24, 0x18	; 24
     364:	80 93 c1 00 	sts	0x00C1, r24
     368:	8e e0       	ldi	r24, 0x0E	; 14
     36a:	80 93 c2 00 	sts	0x00C2, r24
     36e:	be df       	rcall	.-132    	; 0x2ec <USART0_FLUSH>
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	08 95       	ret

00000376 <USART1_WRITE>:
     376:	e8 ec       	ldi	r30, 0xC8	; 200
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	90 81       	ld	r25, Z
     37c:	95 ff       	sbrs	r25, 5
     37e:	fd cf       	rjmp	.-6      	; 0x37a <USART1_WRITE+0x4>
     380:	e5 e9       	ldi	r30, 0x95	; 149
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	40 8d       	ldd	r20, Z+24	; 0x18
     386:	51 8d       	ldd	r21, Z+25	; 0x19
     388:	62 8d       	ldd	r22, Z+26	; 0x1a
     38a:	73 8d       	ldd	r23, Z+27	; 0x1b
     38c:	76 2f       	mov	r23, r22
     38e:	65 2f       	mov	r22, r21
     390:	54 2f       	mov	r21, r20
     392:	44 27       	eor	r20, r20
     394:	48 2b       	or	r20, r24
     396:	40 8f       	std	Z+24, r20	; 0x18
     398:	51 8f       	std	Z+25, r21	; 0x19
     39a:	62 8f       	std	Z+26, r22	; 0x1a
     39c:	73 8f       	std	Z+27, r23	; 0x1b
     39e:	80 93 ce 00 	sts	0x00CE, r24
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	08 95       	ret

000003a8 <USART1_FLAG>:
     3a8:	80 91 c8 00 	lds	r24, 0x00C8
     3ac:	88 1f       	adc	r24, r24
     3ae:	88 27       	eor	r24, r24
     3b0:	88 1f       	adc	r24, r24
     3b2:	08 95       	ret

000003b4 <USART1_READ>:
     3b4:	8f 92       	push	r8
     3b6:	9f 92       	push	r9
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	ec 01       	movw	r28, r24
     3ca:	4a 01       	movw	r8, r20
     3cc:	5b 01       	movw	r10, r22
     3ce:	80 91 c8 00 	lds	r24, 0x00C8
     3d2:	88 23       	and	r24, r24
     3d4:	3c f1       	brlt	.+78     	; 0x424 <USART1_READ+0x70>
     3d6:	a8 ee       	ldi	r26, 0xE8	; 232
     3d8:	b3 e0       	ldi	r27, 0x03	; 3
     3da:	9a 01       	movw	r18, r20
     3dc:	ab 01       	movw	r20, r22
     3de:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__muluhisi3>
     3e2:	ab 01       	movw	r20, r22
     3e4:	bc 01       	movw	r22, r24
     3e6:	41 15       	cp	r20, r1
     3e8:	51 05       	cpc	r21, r1
     3ea:	61 05       	cpc	r22, r1
     3ec:	71 05       	cpc	r23, r1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <USART1_READ+0x3e>
     3f0:	48 c0       	rjmp	.+144    	; 0x482 <USART1_READ+0xce>
     3f2:	c1 2c       	mov	r12, r1
     3f4:	d1 2c       	mov	r13, r1
     3f6:	76 01       	movw	r14, r12
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	e8 ec       	ldi	r30, 0xC8	; 200
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	98 2f       	mov	r25, r24
     400:	9a 95       	dec	r25
     402:	f1 f7       	brne	.-4      	; 0x400 <USART1_READ+0x4c>
     404:	9f ef       	ldi	r25, 0xFF	; 255
     406:	c9 1a       	sub	r12, r25
     408:	d9 0a       	sbc	r13, r25
     40a:	e9 0a       	sbc	r14, r25
     40c:	f9 0a       	sbc	r15, r25
     40e:	90 81       	ld	r25, Z
     410:	99 23       	and	r25, r25
     412:	5c f0       	brlt	.+22     	; 0x42a <USART1_READ+0x76>
     414:	c4 16       	cp	r12, r20
     416:	d5 06       	cpc	r13, r21
     418:	e6 06       	cpc	r14, r22
     41a:	f7 06       	cpc	r15, r23
     41c:	81 f7       	brne	.-32     	; 0x3fe <USART1_READ+0x4a>
     41e:	8f e1       	ldi	r24, 0x1F	; 31
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	3d c0       	rjmp	.+122    	; 0x49e <USART1_READ+0xea>
     424:	c1 2c       	mov	r12, r1
     426:	d1 2c       	mov	r13, r1
     428:	76 01       	movw	r14, r12
     42a:	a8 ee       	ldi	r26, 0xE8	; 232
     42c:	b3 e0       	ldi	r27, 0x03	; 3
     42e:	a5 01       	movw	r20, r10
     430:	94 01       	movw	r18, r8
     432:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__muluhisi3>
     436:	6c 15       	cp	r22, r12
     438:	7d 05       	cpc	r23, r13
     43a:	8e 05       	cpc	r24, r14
     43c:	9f 05       	cpc	r25, r15
     43e:	21 f1       	breq	.+72     	; 0x488 <USART1_READ+0xd4>
     440:	80 91 c8 00 	lds	r24, 0x00C8
     444:	84 fd       	sbrc	r24, 4
     446:	23 c0       	rjmp	.+70     	; 0x48e <USART1_READ+0xda>
     448:	80 91 c8 00 	lds	r24, 0x00C8
     44c:	83 fd       	sbrc	r24, 3
     44e:	22 c0       	rjmp	.+68     	; 0x494 <USART1_READ+0xe0>
     450:	80 91 c8 00 	lds	r24, 0x00C8
     454:	82 fd       	sbrc	r24, 2
     456:	21 c0       	rjmp	.+66     	; 0x49a <USART1_READ+0xe6>
     458:	20 91 ce 00 	lds	r18, 0x00CE
     45c:	28 83       	st	Y, r18
     45e:	e5 e9       	ldi	r30, 0x95	; 149
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	84 8d       	ldd	r24, Z+28	; 0x1c
     464:	95 8d       	ldd	r25, Z+29	; 0x1d
     466:	a6 8d       	ldd	r26, Z+30	; 0x1e
     468:	b7 8d       	ldd	r27, Z+31	; 0x1f
     46a:	ba 2f       	mov	r27, r26
     46c:	a9 2f       	mov	r26, r25
     46e:	98 2f       	mov	r25, r24
     470:	88 27       	eor	r24, r24
     472:	82 2b       	or	r24, r18
     474:	84 8f       	std	Z+28, r24	; 0x1c
     476:	95 8f       	std	Z+29, r25	; 0x1d
     478:	a6 8f       	std	Z+30, r26	; 0x1e
     47a:	b7 8f       	std	Z+31, r27	; 0x1f
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e c0       	rjmp	.+28     	; 0x49e <USART1_READ+0xea>
     482:	8f e1       	ldi	r24, 0x1F	; 31
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0b c0       	rjmp	.+22     	; 0x49e <USART1_READ+0xea>
     488:	8f e1       	ldi	r24, 0x1F	; 31
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	08 c0       	rjmp	.+16     	; 0x49e <USART1_READ+0xea>
     48e:	80 e2       	ldi	r24, 0x20	; 32
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	05 c0       	rjmp	.+10     	; 0x49e <USART1_READ+0xea>
     494:	81 e2       	ldi	r24, 0x21	; 33
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	02 c0       	rjmp	.+4      	; 0x49e <USART1_READ+0xea>
     49a:	82 e2       	ldi	r24, 0x22	; 34
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	ff 90       	pop	r15
     4a4:	ef 90       	pop	r14
     4a6:	df 90       	pop	r13
     4a8:	cf 90       	pop	r12
     4aa:	bf 90       	pop	r11
     4ac:	af 90       	pop	r10
     4ae:	9f 90       	pop	r9
     4b0:	8f 90       	pop	r8
     4b2:	08 95       	ret

000004b4 <USART1_FLUSH>:
     4b4:	80 91 c8 00 	lds	r24, 0x00C8
     4b8:	88 23       	and	r24, r24
     4ba:	44 f4       	brge	.+16     	; 0x4cc <USART1_FLUSH+0x18>
     4bc:	ae ec       	ldi	r26, 0xCE	; 206
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	e8 ec       	ldi	r30, 0xC8	; 200
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	8c 91       	ld	r24, X
     4c6:	80 81       	ld	r24, Z
     4c8:	88 23       	and	r24, r24
     4ca:	e4 f3       	brlt	.-8      	; 0x4c4 <USART1_FLUSH+0x10>
     4cc:	08 95       	ret

000004ce <USART1_INIT>:
     4ce:	60 93 a9 01 	sts	0x01A9, r22
     4d2:	70 93 aa 01 	sts	0x01AA, r23
     4d6:	80 93 ab 01 	sts	0x01AB, r24
     4da:	90 93 ac 01 	sts	0x01AC, r25
     4de:	dc 01       	movw	r26, r24
     4e0:	cb 01       	movw	r24, r22
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	aa 1f       	adc	r26, r26
     4e8:	bb 1f       	adc	r27, r27
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	aa 1f       	adc	r26, r26
     4f0:	bb 1f       	adc	r27, r27
     4f2:	9c 01       	movw	r18, r24
     4f4:	ad 01       	movw	r20, r26
     4f6:	22 0f       	add	r18, r18
     4f8:	33 1f       	adc	r19, r19
     4fa:	44 1f       	adc	r20, r20
     4fc:	55 1f       	adc	r21, r21
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	44 1f       	adc	r20, r20
     504:	55 1f       	adc	r21, r21
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	72 e1       	ldi	r23, 0x12	; 18
     50a:	8a e7       	ldi	r24, 0x7A	; 122
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     512:	21 50       	subi	r18, 0x01	; 1
     514:	31 09       	sbc	r19, r1
     516:	30 93 cd 00 	sts	0x00CD, r19
     51a:	20 93 cc 00 	sts	0x00CC, r18
     51e:	88 e1       	ldi	r24, 0x18	; 24
     520:	80 93 c9 00 	sts	0x00C9, r24
     524:	8e e0       	ldi	r24, 0x0E	; 14
     526:	80 93 ca 00 	sts	0x00CA, r24
     52a:	c4 df       	rcall	.-120    	; 0x4b4 <USART1_FLUSH>
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	08 95       	ret

00000532 <SPI_INIT>:
     532:	9b 01       	movw	r18, r22
     534:	ac 01       	movw	r20, r24
     536:	84 b1       	in	r24, 0x04	; 4
     538:	80 6a       	ori	r24, 0xA0	; 160
     53a:	84 b9       	out	0x04, r24	; 4
     53c:	24 9a       	sbi	0x04, 4	; 4
     53e:	55 9a       	sbi	0x0a, 5	; 10
     540:	54 9a       	sbi	0x0a, 4	; 10
     542:	20 93 b5 01 	sts	0x01B5, r18
     546:	30 93 b6 01 	sts	0x01B6, r19
     54a:	40 93 b7 01 	sts	0x01B7, r20
     54e:	50 93 b8 01 	sts	0x01B8, r21
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	72 e1       	ldi	r23, 0x12	; 18
     556:	8a e7       	ldi	r24, 0x7A	; 122
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     55e:	ca 01       	movw	r24, r20
     560:	b9 01       	movw	r22, r18
     562:	0e 94 96 1b 	call	0x372c	; 0x372c <__floatunsisf>
     566:	0e 94 a4 1c 	call	0x3948	; 0x3948 <log>
     56a:	28 e1       	ldi	r18, 0x18	; 24
     56c:	32 e7       	ldi	r19, 0x72	; 114
     56e:	41 e3       	ldi	r20, 0x31	; 49
     570:	5f e3       	ldi	r21, 0x3F	; 63
     572:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__divsf3>
     576:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <ceil>
     57a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fixsfsi>
     57e:	61 30       	cpi	r22, 0x01	; 1
     580:	71 05       	cpc	r23, r1
     582:	51 f4       	brne	.+20     	; 0x598 <SPI_INIT+0x66>
     584:	8d b5       	in	r24, 0x2d	; 45
     586:	81 60       	ori	r24, 0x01	; 1
     588:	8d bd       	out	0x2d, r24	; 45
     58a:	8c b5       	in	r24, 0x2c	; 44
     58c:	8d 7f       	andi	r24, 0xFD	; 253
     58e:	8c bd       	out	0x2c, r24	; 44
     590:	8c b5       	in	r24, 0x2c	; 44
     592:	8e 7f       	andi	r24, 0xFE	; 254
     594:	8c bd       	out	0x2c, r24	; 44
     596:	4d c0       	rjmp	.+154    	; 0x632 <SPI_INIT+0x100>
     598:	62 30       	cpi	r22, 0x02	; 2
     59a:	71 05       	cpc	r23, r1
     59c:	51 f4       	brne	.+20     	; 0x5b2 <SPI_INIT+0x80>
     59e:	8d b5       	in	r24, 0x2d	; 45
     5a0:	8e 7f       	andi	r24, 0xFE	; 254
     5a2:	8d bd       	out	0x2d, r24	; 45
     5a4:	8c b5       	in	r24, 0x2c	; 44
     5a6:	8d 7f       	andi	r24, 0xFD	; 253
     5a8:	8c bd       	out	0x2c, r24	; 44
     5aa:	8c b5       	in	r24, 0x2c	; 44
     5ac:	8e 7f       	andi	r24, 0xFE	; 254
     5ae:	8c bd       	out	0x2c, r24	; 44
     5b0:	40 c0       	rjmp	.+128    	; 0x632 <SPI_INIT+0x100>
     5b2:	63 30       	cpi	r22, 0x03	; 3
     5b4:	71 05       	cpc	r23, r1
     5b6:	51 f4       	brne	.+20     	; 0x5cc <SPI_INIT+0x9a>
     5b8:	8d b5       	in	r24, 0x2d	; 45
     5ba:	81 60       	ori	r24, 0x01	; 1
     5bc:	8d bd       	out	0x2d, r24	; 45
     5be:	8c b5       	in	r24, 0x2c	; 44
     5c0:	8d 7f       	andi	r24, 0xFD	; 253
     5c2:	8c bd       	out	0x2c, r24	; 44
     5c4:	8c b5       	in	r24, 0x2c	; 44
     5c6:	81 60       	ori	r24, 0x01	; 1
     5c8:	8c bd       	out	0x2c, r24	; 44
     5ca:	33 c0       	rjmp	.+102    	; 0x632 <SPI_INIT+0x100>
     5cc:	64 30       	cpi	r22, 0x04	; 4
     5ce:	71 05       	cpc	r23, r1
     5d0:	51 f4       	brne	.+20     	; 0x5e6 <SPI_INIT+0xb4>
     5d2:	8d b5       	in	r24, 0x2d	; 45
     5d4:	8e 7f       	andi	r24, 0xFE	; 254
     5d6:	8d bd       	out	0x2d, r24	; 45
     5d8:	8c b5       	in	r24, 0x2c	; 44
     5da:	8d 7f       	andi	r24, 0xFD	; 253
     5dc:	8c bd       	out	0x2c, r24	; 44
     5de:	8c b5       	in	r24, 0x2c	; 44
     5e0:	81 60       	ori	r24, 0x01	; 1
     5e2:	8c bd       	out	0x2c, r24	; 44
     5e4:	26 c0       	rjmp	.+76     	; 0x632 <SPI_INIT+0x100>
     5e6:	65 30       	cpi	r22, 0x05	; 5
     5e8:	71 05       	cpc	r23, r1
     5ea:	51 f4       	brne	.+20     	; 0x600 <SPI_INIT+0xce>
     5ec:	8d b5       	in	r24, 0x2d	; 45
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	8d bd       	out	0x2d, r24	; 45
     5f2:	8c b5       	in	r24, 0x2c	; 44
     5f4:	82 60       	ori	r24, 0x02	; 2
     5f6:	8c bd       	out	0x2c, r24	; 44
     5f8:	8c b5       	in	r24, 0x2c	; 44
     5fa:	8e 7f       	andi	r24, 0xFE	; 254
     5fc:	8c bd       	out	0x2c, r24	; 44
     5fe:	19 c0       	rjmp	.+50     	; 0x632 <SPI_INIT+0x100>
     600:	66 30       	cpi	r22, 0x06	; 6
     602:	71 05       	cpc	r23, r1
     604:	51 f4       	brne	.+20     	; 0x61a <SPI_INIT+0xe8>
     606:	8d b5       	in	r24, 0x2d	; 45
     608:	8e 7f       	andi	r24, 0xFE	; 254
     60a:	8d bd       	out	0x2d, r24	; 45
     60c:	8c b5       	in	r24, 0x2c	; 44
     60e:	82 60       	ori	r24, 0x02	; 2
     610:	8c bd       	out	0x2c, r24	; 44
     612:	8c b5       	in	r24, 0x2c	; 44
     614:	8e 7f       	andi	r24, 0xFE	; 254
     616:	8c bd       	out	0x2c, r24	; 44
     618:	0c c0       	rjmp	.+24     	; 0x632 <SPI_INIT+0x100>
     61a:	67 30       	cpi	r22, 0x07	; 7
     61c:	71 05       	cpc	r23, r1
     61e:	89 f4       	brne	.+34     	; 0x642 <SPI_INIT+0x110>
     620:	8d b5       	in	r24, 0x2d	; 45
     622:	8e 7f       	andi	r24, 0xFE	; 254
     624:	8d bd       	out	0x2d, r24	; 45
     626:	8c b5       	in	r24, 0x2c	; 44
     628:	82 60       	ori	r24, 0x02	; 2
     62a:	8c bd       	out	0x2c, r24	; 44
     62c:	8c b5       	in	r24, 0x2c	; 44
     62e:	81 60       	ori	r24, 0x01	; 1
     630:	8c bd       	out	0x2c, r24	; 44
     632:	80 e5       	ldi	r24, 0x50	; 80
     634:	8c bd       	out	0x2c, r24	; 44
     636:	2c 9a       	sbi	0x05, 4	; 5
     638:	5d 9a       	sbi	0x0b, 5	; 11
     63a:	5c 9a       	sbi	0x0b, 4	; 11
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 95       	ret
     642:	89 e2       	ldi	r24, 0x29	; 41
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	08 95       	ret

00000648 <SPI_WRITE>:
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	29 f4       	brne	.+10     	; 0x65a <SPI_WRITE+0x12>
     650:	8c b5       	in	r24, 0x2c	; 44
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	8c bd       	out	0x2c, r24	; 44
     656:	2c 98       	cbi	0x05, 4	; 5
     658:	0e c0       	rjmp	.+28     	; 0x676 <SPI_WRITE+0x2e>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	91 05       	cpc	r25, r1
     65e:	29 f4       	brne	.+10     	; 0x66a <SPI_WRITE+0x22>
     660:	8c b5       	in	r24, 0x2c	; 44
     662:	84 60       	ori	r24, 0x04	; 4
     664:	8c bd       	out	0x2c, r24	; 44
     666:	5d 98       	cbi	0x0b, 5	; 11
     668:	06 c0       	rjmp	.+12     	; 0x676 <SPI_WRITE+0x2e>
     66a:	02 97       	sbiw	r24, 0x02	; 2
     66c:	21 f4       	brne	.+8      	; 0x676 <SPI_WRITE+0x2e>
     66e:	8c b5       	in	r24, 0x2c	; 44
     670:	84 60       	ori	r24, 0x04	; 4
     672:	8c bd       	out	0x2c, r24	; 44
     674:	5c 98       	cbi	0x0b, 4	; 11
     676:	14 16       	cp	r1, r20
     678:	15 06       	cpc	r1, r21
     67a:	dc f4       	brge	.+54     	; 0x6b2 <SPI_WRITE+0x6a>
     67c:	fb 01       	movw	r30, r22
     67e:	46 0f       	add	r20, r22
     680:	57 1f       	adc	r21, r23
     682:	c5 e9       	ldi	r28, 0x95	; 149
     684:	d1 e0       	ldi	r29, 0x01	; 1
     686:	20 81       	ld	r18, Z
     688:	8c a1       	ldd	r24, Y+36	; 0x24
     68a:	9d a1       	ldd	r25, Y+37	; 0x25
     68c:	ae a1       	ldd	r26, Y+38	; 0x26
     68e:	bf a1       	ldd	r27, Y+39	; 0x27
     690:	ba 2f       	mov	r27, r26
     692:	a9 2f       	mov	r26, r25
     694:	98 2f       	mov	r25, r24
     696:	88 27       	eor	r24, r24
     698:	82 2b       	or	r24, r18
     69a:	8c a3       	std	Y+36, r24	; 0x24
     69c:	9d a3       	std	Y+37, r25	; 0x25
     69e:	ae a3       	std	Y+38, r26	; 0x26
     6a0:	bf a3       	std	Y+39, r27	; 0x27
     6a2:	81 91       	ld	r24, Z+
     6a4:	8e bd       	out	0x2e, r24	; 46
     6a6:	0d b4       	in	r0, 0x2d	; 45
     6a8:	07 fe       	sbrs	r0, 7
     6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <SPI_WRITE+0x5e>
     6ac:	e4 17       	cp	r30, r20
     6ae:	f5 07       	cpc	r31, r21
     6b0:	51 f7       	brne	.-44     	; 0x686 <SPI_WRITE+0x3e>
     6b2:	2c 9a       	sbi	0x05, 4	; 5
     6b4:	5d 9a       	sbi	0x0b, 5	; 11
     6b6:	5c 9a       	sbi	0x0b, 4	; 11
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <I2C_INIT>:
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	60 93 bd 01 	sts	0x01BD, r22
     6ca:	70 93 be 01 	sts	0x01BE, r23
     6ce:	80 93 bf 01 	sts	0x01BF, r24
     6d2:	90 93 c0 01 	sts	0x01C0, r25
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	72 e1       	ldi	r23, 0x12	; 18
     6da:	8a e7       	ldi	r24, 0x7A	; 122
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     6e2:	da 01       	movw	r26, r20
     6e4:	c9 01       	movw	r24, r18
     6e6:	40 97       	sbiw	r24, 0x10	; 16
     6e8:	a1 09       	sbc	r26, r1
     6ea:	b1 09       	sbc	r27, r1
     6ec:	b6 95       	lsr	r27
     6ee:	a7 95       	ror	r26
     6f0:	97 95       	ror	r25
     6f2:	87 95       	ror	r24
     6f4:	8f 3f       	cpi	r24, 0xFF	; 255
     6f6:	91 05       	cpc	r25, r1
     6f8:	09 f0       	breq	.+2      	; 0x6fc <I2C_INIT+0x3a>
     6fa:	88 f4       	brcc	.+34     	; 0x71e <I2C_INIT+0x5c>
     6fc:	80 93 b8 00 	sts	0x00B8, r24
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e0       	ldi	r27, 0x00	; 0
     708:	80 93 c1 01 	sts	0x01C1, r24
     70c:	90 93 c2 01 	sts	0x01C2, r25
     710:	a0 93 c3 01 	sts	0x01C3, r26
     714:	b0 93 c4 01 	sts	0x01C4, r27
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	08 95       	ret
     71e:	83 e3       	ldi	r24, 0x33	; 51
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	08 95       	ret

00000724 <I2C_WRITE>:
     724:	2f 92       	push	r2
     726:	3f 92       	push	r3
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	00 d0       	rcall	.+0      	; 0x74a <I2C_WRITE+0x26>
     74a:	00 d0       	rcall	.+0      	; 0x74c <I2C_WRITE+0x28>
     74c:	1f 92       	push	r1
     74e:	cd b7       	in	r28, 0x3d	; 61
     750:	de b7       	in	r29, 0x3e	; 62
     752:	41 15       	cp	r20, r1
     754:	51 05       	cpc	r21, r1
     756:	09 f4       	brne	.+2      	; 0x75a <I2C_WRITE+0x36>
     758:	c3 c0       	rjmp	.+390    	; 0x8e0 <I2C_WRITE+0x1bc>
     75a:	8e 7f       	andi	r24, 0xFE	; 254
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	19 82       	std	Y+1, r1	; 0x01
     764:	ec eb       	ldi	r30, 0xBC	; 188
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	0f 2e       	mov	r0, r31
     76a:	f4 ea       	ldi	r31, 0xA4	; 164
     76c:	df 2e       	mov	r13, r31
     76e:	f0 2d       	mov	r31, r0
     770:	0f 2e       	mov	r0, r31
     772:	f9 eb       	ldi	r31, 0xB9	; 185
     774:	ef 2e       	mov	r14, r31
     776:	f1 2c       	mov	r15, r1
     778:	f0 2d       	mov	r31, r0
     77a:	48 2e       	mov	r4, r24
     77c:	51 2c       	mov	r5, r1
     77e:	61 2c       	mov	r6, r1
     780:	71 2c       	mov	r7, r1
     782:	0f 2e       	mov	r0, r31
     784:	f4 e8       	ldi	r31, 0x84	; 132
     786:	cf 2e       	mov	r12, r31
     788:	f0 2d       	mov	r31, r0
     78a:	6a 83       	std	Y+2, r22	; 0x02
     78c:	7b 83       	std	Y+3, r23	; 0x03
     78e:	1b 01       	movw	r2, r22
     790:	24 0e       	add	r2, r20
     792:	35 1e       	adc	r3, r21
     794:	3d 83       	std	Y+5, r19	; 0x05
     796:	2c 83       	std	Y+4, r18	; 0x04
     798:	10 c0       	rjmp	.+32     	; 0x7ba <I2C_WRITE+0x96>
     79a:	94 e3       	ldi	r25, 0x34	; 52
     79c:	19 82       	std	Y+1, r1	; 0x01
     79e:	07 c0       	rjmp	.+14     	; 0x7ae <I2C_WRITE+0x8a>
     7a0:	98 e3       	ldi	r25, 0x38	; 56
     7a2:	19 82       	std	Y+1, r1	; 0x01
     7a4:	04 c0       	rjmp	.+8      	; 0x7ae <I2C_WRITE+0x8a>
     7a6:	7d 83       	std	Y+5, r23	; 0x05
     7a8:	6c 83       	std	Y+4, r22	; 0x04
     7aa:	9b e3       	ldi	r25, 0x3B	; 59
     7ac:	19 82       	std	Y+1, r1	; 0x01
     7ae:	2c 81       	ldd	r18, Y+4	; 0x04
     7b0:	3d 81       	ldd	r19, Y+5	; 0x05
     7b2:	2f 5f       	subi	r18, 0xFF	; 255
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
     7b6:	3d 83       	std	Y+5, r19	; 0x05
     7b8:	2c 83       	std	Y+4, r18	; 0x04
     7ba:	80 90 c1 01 	lds	r8, 0x01C1
     7be:	90 90 c2 01 	lds	r9, 0x01C2
     7c2:	a0 90 c3 01 	lds	r10, 0x01C3
     7c6:	b0 90 c4 01 	lds	r11, 0x01C4
     7ca:	6c 81       	ldd	r22, Y+4	; 0x04
     7cc:	7d 81       	ldd	r23, Y+5	; 0x05
     7ce:	8b 01       	movw	r16, r22
     7d0:	77 0f       	add	r23, r23
     7d2:	22 0b       	sbc	r18, r18
     7d4:	33 0b       	sbc	r19, r19
     7d6:	80 16       	cp	r8, r16
     7d8:	91 06       	cpc	r9, r17
     7da:	a2 06       	cpc	r10, r18
     7dc:	b3 06       	cpc	r11, r19
     7de:	0c f4       	brge	.+2      	; 0x7e2 <I2C_WRITE+0xbe>
     7e0:	79 c0       	rjmp	.+242    	; 0x8d4 <I2C_WRITE+0x1b0>
     7e2:	d0 82       	st	Z, r13
     7e4:	ac 81       	ldd	r26, Y+4	; 0x04
     7e6:	bd 81       	ldd	r27, Y+5	; 0x05
     7e8:	20 81       	ld	r18, Z
     7ea:	22 23       	and	r18, r18
     7ec:	ec f7       	brge	.-6      	; 0x7e8 <I2C_WRITE+0xc4>
     7ee:	bd 83       	std	Y+5, r27	; 0x05
     7f0:	ac 83       	std	Y+4, r26	; 0x04
     7f2:	d7 01       	movw	r26, r14
     7f4:	2c 91       	ld	r18, X
     7f6:	28 7f       	andi	r18, 0xF8	; 248
     7f8:	20 31       	cpi	r18, 0x10	; 16
     7fa:	29 f0       	breq	.+10     	; 0x806 <I2C_WRITE+0xe2>
     7fc:	28 33       	cpi	r18, 0x38	; 56
     7fe:	69 f2       	breq	.-102    	; 0x79a <I2C_WRITE+0x76>
     800:	28 30       	cpi	r18, 0x08	; 8
     802:	09 f0       	breq	.+2      	; 0x806 <I2C_WRITE+0xe2>
     804:	70 c0       	rjmp	.+224    	; 0x8e6 <I2C_WRITE+0x1c2>
     806:	40 92 c9 01 	sts	0x01C9, r4
     80a:	50 92 ca 01 	sts	0x01CA, r5
     80e:	60 92 cb 01 	sts	0x01CB, r6
     812:	70 92 cc 01 	sts	0x01CC, r7
     816:	ab eb       	ldi	r26, 0xBB	; 187
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	8c 93       	st	X, r24
     81c:	c0 82       	st	Z, r12
     81e:	ac 81       	ldd	r26, Y+4	; 0x04
     820:	bd 81       	ldd	r27, Y+5	; 0x05
     822:	20 81       	ld	r18, Z
     824:	22 23       	and	r18, r18
     826:	ec f7       	brge	.-6      	; 0x822 <I2C_WRITE+0xfe>
     828:	bd 83       	std	Y+5, r27	; 0x05
     82a:	ac 83       	std	Y+4, r26	; 0x04
     82c:	d7 01       	movw	r26, r14
     82e:	2c 91       	ld	r18, X
     830:	28 7f       	andi	r18, 0xF8	; 248
     832:	20 32       	cpi	r18, 0x20	; 32
     834:	09 f4       	brne	.+2      	; 0x838 <I2C_WRITE+0x114>
     836:	b4 cf       	rjmp	.-152    	; 0x7a0 <I2C_WRITE+0x7c>
     838:	28 33       	cpi	r18, 0x38	; 56
     83a:	21 f0       	breq	.+8      	; 0x844 <I2C_WRITE+0x120>
     83c:	28 31       	cpi	r18, 0x18	; 24
     83e:	09 f0       	breq	.+2      	; 0x842 <I2C_WRITE+0x11e>
     840:	44 c0       	rjmp	.+136    	; 0x8ca <I2C_WRITE+0x1a6>
     842:	03 c0       	rjmp	.+6      	; 0x84a <I2C_WRITE+0x126>
     844:	99 e3       	ldi	r25, 0x39	; 57
     846:	19 82       	std	Y+1, r1	; 0x01
     848:	b2 cf       	rjmp	.-156    	; 0x7ae <I2C_WRITE+0x8a>
     84a:	14 16       	cp	r1, r20
     84c:	15 06       	cpc	r1, r21
     84e:	0c f0       	brlt	.+2      	; 0x852 <I2C_WRITE+0x12e>
     850:	41 c0       	rjmp	.+130    	; 0x8d4 <I2C_WRITE+0x1b0>
     852:	6a 81       	ldd	r22, Y+2	; 0x02
     854:	7b 81       	ldd	r23, Y+3	; 0x03
     856:	9b 01       	movw	r18, r22
     858:	6c 81       	ldd	r22, Y+4	; 0x04
     85a:	7d 81       	ldd	r23, Y+5	; 0x05
     85c:	49 01       	movw	r8, r18
     85e:	d4 01       	movw	r26, r8
     860:	bc 90       	ld	r11, X
     862:	00 91 cd 01 	lds	r16, 0x01CD
     866:	10 91 ce 01 	lds	r17, 0x01CE
     86a:	20 91 cf 01 	lds	r18, 0x01CF
     86e:	30 91 d0 01 	lds	r19, 0x01D0
     872:	32 2f       	mov	r19, r18
     874:	21 2f       	mov	r18, r17
     876:	10 2f       	mov	r17, r16
     878:	00 27       	eor	r16, r16
     87a:	0b 29       	or	r16, r11
     87c:	00 93 cd 01 	sts	0x01CD, r16
     880:	10 93 ce 01 	sts	0x01CE, r17
     884:	20 93 cf 01 	sts	0x01CF, r18
     888:	30 93 d0 01 	sts	0x01D0, r19
     88c:	2d 91       	ld	r18, X+
     88e:	4d 01       	movw	r8, r26
     890:	ab eb       	ldi	r26, 0xBB	; 187
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	2c 93       	st	X, r18
     896:	c0 82       	st	Z, r12
     898:	d4 01       	movw	r26, r8
     89a:	20 81       	ld	r18, Z
     89c:	22 23       	and	r18, r18
     89e:	ec f7       	brge	.-6      	; 0x89a <I2C_WRITE+0x176>
     8a0:	4d 01       	movw	r8, r26
     8a2:	d7 01       	movw	r26, r14
     8a4:	2c 91       	ld	r18, X
     8a6:	28 7f       	andi	r18, 0xF8	; 248
     8a8:	20 33       	cpi	r18, 0x30	; 48
     8aa:	09 f4       	brne	.+2      	; 0x8ae <I2C_WRITE+0x18a>
     8ac:	7c cf       	rjmp	.-264    	; 0x7a6 <I2C_WRITE+0x82>
     8ae:	28 33       	cpi	r18, 0x38	; 56
     8b0:	19 f0       	breq	.+6      	; 0x8b8 <I2C_WRITE+0x194>
     8b2:	28 32       	cpi	r18, 0x28	; 40
     8b4:	69 f4       	brne	.+26     	; 0x8d0 <I2C_WRITE+0x1ac>
     8b6:	05 c0       	rjmp	.+10     	; 0x8c2 <I2C_WRITE+0x19e>
     8b8:	7d 83       	std	Y+5, r23	; 0x05
     8ba:	6c 83       	std	Y+4, r22	; 0x04
     8bc:	9c e3       	ldi	r25, 0x3C	; 60
     8be:	19 82       	std	Y+1, r1	; 0x01
     8c0:	76 cf       	rjmp	.-276    	; 0x7ae <I2C_WRITE+0x8a>
     8c2:	82 14       	cp	r8, r2
     8c4:	93 04       	cpc	r9, r3
     8c6:	59 f6       	brne	.-106    	; 0x85e <I2C_WRITE+0x13a>
     8c8:	05 c0       	rjmp	.+10     	; 0x8d4 <I2C_WRITE+0x1b0>
     8ca:	9a e3       	ldi	r25, 0x3A	; 58
     8cc:	19 82       	std	Y+1, r1	; 0x01
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <I2C_WRITE+0x1b0>
     8d0:	9d e3       	ldi	r25, 0x3D	; 61
     8d2:	19 82       	std	Y+1, r1	; 0x01
     8d4:	84 e9       	ldi	r24, 0x94	; 148
     8d6:	80 93 bc 00 	sts	0x00BC, r24
     8da:	89 2f       	mov	r24, r25
     8dc:	99 81       	ldd	r25, Y+1	; 0x01
     8de:	05 c0       	rjmp	.+10     	; 0x8ea <I2C_WRITE+0x1c6>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <I2C_WRITE+0x1c6>
     8e6:	85 e3       	ldi	r24, 0x35	; 53
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	9f 90       	pop	r9
     90a:	8f 90       	pop	r8
     90c:	7f 90       	pop	r7
     90e:	6f 90       	pop	r6
     910:	5f 90       	pop	r5
     912:	4f 90       	pop	r4
     914:	3f 90       	pop	r3
     916:	2f 90       	pop	r2
     918:	08 95       	ret

0000091a <I2C_READ>:
     91a:	2f 92       	push	r2
     91c:	3f 92       	push	r3
     91e:	4f 92       	push	r4
     920:	5f 92       	push	r5
     922:	6f 92       	push	r6
     924:	7f 92       	push	r7
     926:	8f 92       	push	r8
     928:	9f 92       	push	r9
     92a:	af 92       	push	r10
     92c:	bf 92       	push	r11
     92e:	cf 92       	push	r12
     930:	df 92       	push	r13
     932:	ef 92       	push	r14
     934:	ff 92       	push	r15
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	27 97       	sbiw	r28, 0x07	; 7
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	58 2e       	mov	r5, r24
     950:	7a 83       	std	Y+2, r23	; 0x02
     952:	69 83       	std	Y+1, r22	; 0x01
     954:	3a 01       	movw	r6, r20
     956:	3f 83       	std	Y+7, r19	; 0x07
     958:	2e 83       	std	Y+6, r18	; 0x06
     95a:	1d 83       	std	Y+5, r17	; 0x05
     95c:	0c 83       	std	Y+4, r16	; 0x04
     95e:	01 e0       	ldi	r16, 0x01	; 1
     960:	10 e0       	ldi	r17, 0x00	; 0
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	0f 2e       	mov	r0, r31
     968:	f5 e9       	ldi	r31, 0x95	; 149
     96a:	ef 2e       	mov	r14, r31
     96c:	f1 e0       	ldi	r31, 0x01	; 1
     96e:	ff 2e       	mov	r15, r31
     970:	f0 2d       	mov	r31, r0
     972:	0f 2e       	mov	r0, r31
     974:	f4 ea       	ldi	r31, 0xA4	; 164
     976:	4f 2e       	mov	r4, r31
     978:	f0 2d       	mov	r31, r0
     97a:	0f 2e       	mov	r0, r31
     97c:	f9 eb       	ldi	r31, 0xB9	; 185
     97e:	cf 2e       	mov	r12, r31
     980:	d1 2c       	mov	r13, r1
     982:	f0 2d       	mov	r31, r0
     984:	88 2e       	mov	r8, r24
     986:	91 2c       	mov	r9, r1
     988:	a1 2c       	mov	r10, r1
     98a:	b1 2c       	mov	r11, r1
     98c:	81 60       	ori	r24, 0x01	; 1
     98e:	8b 83       	std	Y+3, r24	; 0x03
     990:	0f 2e       	mov	r0, r31
     992:	fb eb       	ldi	r31, 0xBB	; 187
     994:	2f 2e       	mov	r2, r31
     996:	31 2c       	mov	r3, r1
     998:	f0 2d       	mov	r31, r0
     99a:	07 c0       	rjmp	.+14     	; 0x9aa <I2C_READ+0x90>
     99c:	26 e3       	ldi	r18, 0x36	; 54
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <I2C_READ+0x8c>
     9a2:	28 e3       	ldi	r18, 0x38	; 56
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	d7 01       	movw	r26, r14
     9ac:	9c 96       	adiw	r26, 0x2c	; 44
     9ae:	4d 91       	ld	r20, X+
     9b0:	5d 91       	ld	r21, X+
     9b2:	6d 91       	ld	r22, X+
     9b4:	7c 91       	ld	r23, X
     9b6:	9f 97       	sbiw	r26, 0x2f	; 47
     9b8:	c8 01       	movw	r24, r16
     9ba:	01 2e       	mov	r0, r17
     9bc:	00 0c       	add	r0, r0
     9be:	aa 0b       	sbc	r26, r26
     9c0:	bb 0b       	sbc	r27, r27
     9c2:	48 17       	cp	r20, r24
     9c4:	59 07       	cpc	r21, r25
     9c6:	6a 07       	cpc	r22, r26
     9c8:	7b 07       	cpc	r23, r27
     9ca:	0c f4       	brge	.+2      	; 0x9ce <I2C_READ+0xb4>
     9cc:	a7 c0       	rjmp	.+334    	; 0xb1c <I2C_READ+0x202>
     9ce:	a3 01       	movw	r20, r6
     9d0:	69 81       	ldd	r22, Y+1	; 0x01
     9d2:	7a 81       	ldd	r23, Y+2	; 0x02
     9d4:	85 2d       	mov	r24, r5
     9d6:	a6 de       	rcall	.-692    	; 0x724 <I2C_WRITE>
     9d8:	9c 01       	movw	r18, r24
     9da:	00 97       	sbiw	r24, 0x00	; 0
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <I2C_READ+0xc6>
     9de:	a4 c0       	rjmp	.+328    	; 0xb28 <I2C_READ+0x20e>
     9e0:	ec eb       	ldi	r30, 0xBC	; 188
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	40 82       	st	Z, r4
     9e6:	ac eb       	ldi	r26, 0xBC	; 188
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	8c 91       	ld	r24, X
     9ec:	88 23       	and	r24, r24
     9ee:	dc f7       	brge	.-10     	; 0x9e6 <I2C_READ+0xcc>
     9f0:	f6 01       	movw	r30, r12
     9f2:	80 81       	ld	r24, Z
     9f4:	88 7f       	andi	r24, 0xF8	; 248
     9f6:	80 31       	cpi	r24, 0x10	; 16
     9f8:	29 f0       	breq	.+10     	; 0xa04 <I2C_READ+0xea>
     9fa:	88 33       	cpi	r24, 0x38	; 56
     9fc:	79 f2       	breq	.-98     	; 0x99c <I2C_READ+0x82>
     9fe:	88 30       	cpi	r24, 0x08	; 8
     a00:	09 f0       	breq	.+2      	; 0xa04 <I2C_READ+0xea>
     a02:	94 c0       	rjmp	.+296    	; 0xb2c <I2C_READ+0x212>
     a04:	d7 01       	movw	r26, r14
     a06:	d4 96       	adiw	r26, 0x34	; 52
     a08:	8d 92       	st	X+, r8
     a0a:	9d 92       	st	X+, r9
     a0c:	ad 92       	st	X+, r10
     a0e:	bc 92       	st	X, r11
     a10:	d7 97       	sbiw	r26, 0x37	; 55
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	f1 01       	movw	r30, r2
     a16:	80 83       	st	Z, r24
     a18:	e4 e8       	ldi	r30, 0x84	; 132
     a1a:	ac eb       	ldi	r26, 0xBC	; 188
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	ec 93       	st	X, r30
     a20:	ac eb       	ldi	r26, 0xBC	; 188
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	8c 91       	ld	r24, X
     a26:	88 23       	and	r24, r24
     a28:	dc f7       	brge	.-10     	; 0xa20 <I2C_READ+0x106>
     a2a:	f6 01       	movw	r30, r12
     a2c:	80 81       	ld	r24, Z
     a2e:	88 7f       	andi	r24, 0xF8	; 248
     a30:	80 34       	cpi	r24, 0x40	; 64
     a32:	49 f0       	breq	.+18     	; 0xa46 <I2C_READ+0x12c>
     a34:	88 34       	cpi	r24, 0x48	; 72
     a36:	09 f4       	brne	.+2      	; 0xa3a <I2C_READ+0x120>
     a38:	b4 cf       	rjmp	.-152    	; 0x9a2 <I2C_READ+0x88>
     a3a:	88 33       	cpi	r24, 0x38	; 56
     a3c:	09 f4       	brne	.+2      	; 0xa40 <I2C_READ+0x126>
     a3e:	69 c0       	rjmp	.+210    	; 0xb12 <I2C_READ+0x1f8>
     a40:	2a e3       	ldi	r18, 0x3A	; 58
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	6b c0       	rjmp	.+214    	; 0xb1c <I2C_READ+0x202>
     a46:	8c 81       	ldd	r24, Y+4	; 0x04
     a48:	9d 81       	ldd	r25, Y+5	; 0x05
     a4a:	18 16       	cp	r1, r24
     a4c:	19 06       	cpc	r1, r25
     a4e:	0c f0       	brlt	.+2      	; 0xa52 <I2C_READ+0x138>
     a50:	65 c0       	rjmp	.+202    	; 0xb1c <I2C_READ+0x202>
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	bc 01       	movw	r22, r24
     a58:	61 50       	subi	r22, 0x01	; 1
     a5a:	71 09       	sbc	r23, r1
     a5c:	ec eb       	ldi	r30, 0xBC	; 188
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	94 ec       	ldi	r25, 0xC4	; 196
     a62:	0f 2e       	mov	r0, r31
     a64:	f4 e8       	ldi	r31, 0x84	; 132
     a66:	bf 2e       	mov	r11, r31
     a68:	f0 2d       	mov	r31, r0
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f9 eb       	ldi	r31, 0xB9	; 185
     a6e:	8f 2e       	mov	r8, r31
     a70:	91 2c       	mov	r9, r1
     a72:	f0 2d       	mov	r31, r0
     a74:	0b eb       	ldi	r16, 0xBB	; 187
     a76:	10 e0       	ldi	r17, 0x00	; 0
     a78:	0f 2e       	mov	r0, r31
     a7a:	f5 e9       	ldi	r31, 0x95	; 149
     a7c:	6f 2e       	mov	r6, r31
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	7f 2e       	mov	r7, r31
     a82:	f0 2d       	mov	r31, r0
     a84:	64 17       	cp	r22, r20
     a86:	75 07       	cpc	r23, r21
     a88:	11 f4       	brne	.+4      	; 0xa8e <I2C_READ+0x174>
     a8a:	b0 82       	st	Z, r11
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <I2C_READ+0x176>
     a8e:	90 83       	st	Z, r25
     a90:	80 81       	ld	r24, Z
     a92:	88 23       	and	r24, r24
     a94:	ec f7       	brge	.-6      	; 0xa90 <I2C_READ+0x176>
     a96:	d4 01       	movw	r26, r8
     a98:	8c 91       	ld	r24, X
     a9a:	88 7f       	andi	r24, 0xF8	; 248
     a9c:	80 35       	cpi	r24, 0x50	; 80
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <I2C_READ+0x18c>
     aa0:	88 35       	cpi	r24, 0x58	; 88
     aa2:	11 f1       	breq	.+68     	; 0xae8 <I2C_READ+0x1ce>
     aa4:	39 c0       	rjmp	.+114    	; 0xb18 <I2C_READ+0x1fe>
     aa6:	d8 01       	movw	r26, r16
     aa8:	8c 91       	ld	r24, X
     aaa:	ae 81       	ldd	r26, Y+6	; 0x06
     aac:	bf 81       	ldd	r27, Y+7	; 0x07
     aae:	8d 93       	st	X+, r24
     ab0:	bf 83       	std	Y+7, r27	; 0x07
     ab2:	ae 83       	std	Y+6, r26	; 0x06
     ab4:	d3 01       	movw	r26, r6
     ab6:	dc 96       	adiw	r26, 0x3c	; 60
     ab8:	cd 90       	ld	r12, X+
     aba:	dd 90       	ld	r13, X+
     abc:	ed 90       	ld	r14, X+
     abe:	fc 90       	ld	r15, X
     ac0:	df 97       	sbiw	r26, 0x3f	; 63
     ac2:	fe 2c       	mov	r15, r14
     ac4:	ed 2c       	mov	r14, r13
     ac6:	dc 2c       	mov	r13, r12
     ac8:	cc 24       	eor	r12, r12
     aca:	c8 2a       	or	r12, r24
     acc:	dc 96       	adiw	r26, 0x3c	; 60
     ace:	cd 92       	st	X+, r12
     ad0:	dd 92       	st	X+, r13
     ad2:	ed 92       	st	X+, r14
     ad4:	fc 92       	st	X, r15
     ad6:	df 97       	sbiw	r26, 0x3f	; 63
     ad8:	4f 5f       	subi	r20, 0xFF	; 255
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	ac 81       	ldd	r26, Y+4	; 0x04
     ade:	bd 81       	ldd	r27, Y+5	; 0x05
     ae0:	4a 17       	cp	r20, r26
     ae2:	5b 07       	cpc	r21, r27
     ae4:	79 f6       	brne	.-98     	; 0xa84 <I2C_READ+0x16a>
     ae6:	1a c0       	rjmp	.+52     	; 0xb1c <I2C_READ+0x202>
     ae8:	40 91 bb 00 	lds	r20, 0x00BB
     aec:	ee 81       	ldd	r30, Y+6	; 0x06
     aee:	ff 81       	ldd	r31, Y+7	; 0x07
     af0:	40 83       	st	Z, r20
     af2:	e5 e9       	ldi	r30, 0x95	; 149
     af4:	f1 e0       	ldi	r31, 0x01	; 1
     af6:	84 ad       	ldd	r24, Z+60	; 0x3c
     af8:	95 ad       	ldd	r25, Z+61	; 0x3d
     afa:	a6 ad       	ldd	r26, Z+62	; 0x3e
     afc:	b7 ad       	ldd	r27, Z+63	; 0x3f
     afe:	ba 2f       	mov	r27, r26
     b00:	a9 2f       	mov	r26, r25
     b02:	98 2f       	mov	r25, r24
     b04:	88 27       	eor	r24, r24
     b06:	84 2b       	or	r24, r20
     b08:	84 af       	std	Z+60, r24	; 0x3c
     b0a:	95 af       	std	Z+61, r25	; 0x3d
     b0c:	a6 af       	std	Z+62, r26	; 0x3e
     b0e:	b7 af       	std	Z+63, r27	; 0x3f
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <I2C_READ+0x202>
     b12:	29 e3       	ldi	r18, 0x39	; 57
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <I2C_READ+0x202>
     b18:	2e e3       	ldi	r18, 0x3E	; 62
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	84 e9       	ldi	r24, 0x94	; 148
     b1e:	80 93 bc 00 	sts	0x00BC, r24
     b22:	82 2f       	mov	r24, r18
     b24:	93 2f       	mov	r25, r19
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <I2C_READ+0x216>
     b28:	93 2f       	mov	r25, r19
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <I2C_READ+0x216>
     b2c:	87 e3       	ldi	r24, 0x37	; 55
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	27 96       	adiw	r28, 0x07	; 7
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	bf 90       	pop	r11
     b4e:	af 90       	pop	r10
     b50:	9f 90       	pop	r9
     b52:	8f 90       	pop	r8
     b54:	7f 90       	pop	r7
     b56:	6f 90       	pop	r6
     b58:	5f 90       	pop	r5
     b5a:	4f 90       	pop	r4
     b5c:	3f 90       	pop	r3
     b5e:	2f 90       	pop	r2
     b60:	08 95       	ret

00000b62 <ADC_INIT>:
     b62:	60 93 d5 01 	sts	0x01D5, r22
     b66:	70 93 d6 01 	sts	0x01D6, r23
     b6a:	80 93 d7 01 	sts	0x01D7, r24
     b6e:	90 93 d8 01 	sts	0x01D8, r25
     b72:	68 38       	cpi	r22, 0x88	; 136
     b74:	23 e1       	ldi	r18, 0x13	; 19
     b76:	72 07       	cpc	r23, r18
     b78:	81 05       	cpc	r24, r1
     b7a:	91 05       	cpc	r25, r1
     b7c:	68 f1       	brcs	.+90     	; 0xbd8 <ADC_INIT+0x76>
     b7e:	61 34       	cpi	r22, 0x41	; 65
     b80:	2d e0       	ldi	r18, 0x0D	; 13
     b82:	72 07       	cpc	r23, r18
     b84:	23 e0       	ldi	r18, 0x03	; 3
     b86:	82 07       	cpc	r24, r18
     b88:	91 05       	cpc	r25, r1
     b8a:	48 f5       	brcc	.+82     	; 0xbde <ADC_INIT+0x7c>
     b8c:	9b 01       	movw	r18, r22
     b8e:	ac 01       	movw	r20, r24
     b90:	10 92 7c 00 	sts	0x007C, r1
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	72 e1       	ldi	r23, 0x12	; 18
     b98:	8a e7       	ldi	r24, 0x7A	; 122
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__udivmodsi4>
     ba0:	ca 01       	movw	r24, r20
     ba2:	b9 01       	movw	r22, r18
     ba4:	0e 94 96 1b 	call	0x372c	; 0x372c <__floatunsisf>
     ba8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <log>
     bac:	28 e1       	ldi	r18, 0x18	; 24
     bae:	32 e7       	ldi	r19, 0x72	; 114
     bb0:	41 e3       	ldi	r20, 0x31	; 49
     bb2:	5f e3       	ldi	r21, 0x3F	; 63
     bb4:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__divsf3>
     bb8:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <ceil>
     bbc:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fixsfsi>
     bc0:	68 30       	cpi	r22, 0x08	; 8
     bc2:	71 05       	cpc	r23, r1
     bc4:	78 f4       	brcc	.+30     	; 0xbe4 <ADC_INIT+0x82>
     bc6:	60 68       	ori	r22, 0x80	; 128
     bc8:	60 93 7a 00 	sts	0x007A, r22
     bcc:	8f e3       	ldi	r24, 0x3F	; 63
     bce:	80 93 7e 00 	sts	0x007E, r24
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	08 95       	ret
     bd8:	87 e4       	ldi	r24, 0x47	; 71
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	08 95       	ret
     bde:	88 e4       	ldi	r24, 0x48	; 72
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	08 95       	ret
     be4:	89 e4       	ldi	r24, 0x49	; 73
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	08 95       	ret

00000bea <ADC_READ>:
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	ec e7       	ldi	r30, 0x7C	; 124
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	98 2b       	or	r25, r24
     bf6:	90 83       	st	Z, r25
     bf8:	ea e7       	ldi	r30, 0x7A	; 122
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	90 81       	ld	r25, Z
     bfe:	90 64       	ori	r25, 0x40	; 64
     c00:	90 83       	st	Z, r25
     c02:	90 81       	ld	r25, Z
     c04:	94 fd       	sbrc	r25, 4
     c06:	fd cf       	rjmp	.-6      	; 0xc02 <ADC_READ+0x18>
     c08:	40 91 78 00 	lds	r20, 0x0078
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	fb 01       	movw	r30, r22
     c10:	51 83       	std	Z+1, r21	; 0x01
     c12:	40 83       	st	Z, r20
     c14:	90 91 79 00 	lds	r25, 0x0079
     c18:	59 2b       	or	r21, r25
     c1a:	51 83       	std	Z+1, r21	; 0x01
     c1c:	40 83       	st	Z, r20
     c1e:	e9 ed       	ldi	r30, 0xD9	; 217
     c20:	f1 e0       	ldi	r31, 0x01	; 1
     c22:	05 2e       	mov	r0, r21
     c24:	00 0c       	add	r0, r0
     c26:	66 0b       	sbc	r22, r22
     c28:	77 0b       	sbc	r23, r23
     c2a:	00 81       	ld	r16, Z
     c2c:	11 81       	ldd	r17, Z+1	; 0x01
     c2e:	22 81       	ldd	r18, Z+2	; 0x02
     c30:	33 81       	ldd	r19, Z+3	; 0x03
     c32:	98 01       	movw	r18, r16
     c34:	11 27       	eor	r17, r17
     c36:	00 27       	eor	r16, r16
     c38:	40 2b       	or	r20, r16
     c3a:	51 2b       	or	r21, r17
     c3c:	62 2b       	or	r22, r18
     c3e:	73 2b       	or	r23, r19
     c40:	40 83       	st	Z, r20
     c42:	51 83       	std	Z+1, r21	; 0x01
     c44:	62 83       	std	Z+2, r22	; 0x02
     c46:	73 83       	std	Z+3, r23	; 0x03
     c48:	ec e7       	ldi	r30, 0x7C	; 124
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	90 81       	ld	r25, Z
     c4e:	80 95       	com	r24
     c50:	89 23       	and	r24, r25
     c52:	80 83       	st	Z, r24
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	1f 91       	pop	r17
     c5a:	0f 91       	pop	r16
     c5c:	08 95       	ret

00000c5e <COMMUNICATION_INIT>:
     c5e:	10 92 dd 01 	sts	0x01DD, r1
     c62:	10 92 de 01 	sts	0x01DE, r1
     c66:	10 92 df 01 	sts	0x01DF, r1
     c6a:	10 92 e0 01 	sts	0x01E0, r1
     c6e:	10 92 e5 01 	sts	0x01E5, r1
     c72:	10 92 e6 01 	sts	0x01E6, r1
     c76:	10 92 e7 01 	sts	0x01E7, r1
     c7a:	10 92 e8 01 	sts	0x01E8, r1
     c7e:	10 92 e1 01 	sts	0x01E1, r1
     c82:	10 92 e2 01 	sts	0x01E2, r1
     c86:	10 92 e3 01 	sts	0x01E3, r1
     c8a:	10 92 e4 01 	sts	0x01E4, r1
     c8e:	10 92 e9 01 	sts	0x01E9, r1
     c92:	10 92 ea 01 	sts	0x01EA, r1
     c96:	10 92 eb 01 	sts	0x01EB, r1
     c9a:	10 92 ec 01 	sts	0x01EC, r1
     c9e:	60 93 ed 01 	sts	0x01ED, r22
     ca2:	70 93 ee 01 	sts	0x01EE, r23
     ca6:	80 93 ef 01 	sts	0x01EF, r24
     caa:	90 93 f0 01 	sts	0x01F0, r25
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	08 95       	ret

00000cb4 <IsCommandWaiting>:
     cb4:	95 da       	rcall	.-2774   	; 0x1e0 <USART0_FLAG>
     cb6:	81 11       	cpse	r24, r1
     cb8:	06 c0       	rjmp	.+12     	; 0xcc6 <IsCommandWaiting+0x12>
     cba:	76 db       	rcall	.-2324   	; 0x3a8 <USART1_FLAG>
     cbc:	81 11       	cpse	r24, r1
     cbe:	06 c0       	rjmp	.+12     	; 0xccc <IsCommandWaiting+0x18>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	08 95       	ret
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	08 95       	ret
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	08 95       	ret

00000cd2 <LoadMessage>:
     cd2:	4f 92       	push	r4
     cd4:	5f 92       	push	r5
     cd6:	6f 92       	push	r6
     cd8:	7f 92       	push	r7
     cda:	8f 92       	push	r8
     cdc:	9f 92       	push	r9
     cde:	af 92       	push	r10
     ce0:	bf 92       	push	r11
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	1f 92       	push	r1
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
     cf8:	4c 01       	movw	r8, r24
     cfa:	28 01       	movw	r4, r16
     cfc:	39 01       	movw	r6, r18
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	88 16       	cp	r8, r24
     d02:	91 04       	cpc	r9, r1
     d04:	e1 f4       	brne	.+56     	; 0xd3e <LoadMessage+0x6c>
     d06:	14 16       	cp	r1, r20
     d08:	15 06       	cpc	r1, r21
     d0a:	bc f4       	brge	.+46     	; 0xd3a <LoadMessage+0x68>
     d0c:	7b 01       	movw	r14, r22
     d0e:	5b 01       	movw	r10, r22
     d10:	a4 0e       	add	r10, r20
     d12:	b5 1e       	adc	r11, r21
     d14:	b3 01       	movw	r22, r6
     d16:	a2 01       	movw	r20, r4
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	67 da       	rcall	.-2866   	; 0x1ec <USART0_READ>
     d1e:	6c 01       	movw	r12, r24
     d20:	89 2b       	or	r24, r25
     d22:	21 f0       	breq	.+8      	; 0xd2c <LoadMessage+0x5a>
     d24:	e3 da       	rcall	.-2618   	; 0x2ec <USART0_FLUSH>
     d26:	8c 2d       	mov	r24, r12
     d28:	9d 2d       	mov	r25, r13
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <LoadMessage+0xd8>
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	f7 01       	movw	r30, r14
     d30:	81 93       	st	Z+, r24
     d32:	7f 01       	movw	r14, r30
     d34:	ea 15       	cp	r30, r10
     d36:	fb 05       	cpc	r31, r11
     d38:	69 f7       	brne	.-38     	; 0xd14 <LoadMessage+0x42>
     d3a:	d8 da       	rcall	.-2640   	; 0x2ec <USART0_FLUSH>
     d3c:	1f c0       	rjmp	.+62     	; 0xd7c <LoadMessage+0xaa>
     d3e:	f2 e0       	ldi	r31, 0x02	; 2
     d40:	8f 16       	cp	r8, r31
     d42:	91 04       	cpc	r9, r1
     d44:	81 f5       	brne	.+96     	; 0xda6 <LoadMessage+0xd4>
     d46:	14 16       	cp	r1, r20
     d48:	15 06       	cpc	r1, r21
     d4a:	bc f4       	brge	.+46     	; 0xd7a <LoadMessage+0xa8>
     d4c:	7b 01       	movw	r14, r22
     d4e:	5b 01       	movw	r10, r22
     d50:	a4 0e       	add	r10, r20
     d52:	b5 1e       	adc	r11, r21
     d54:	b3 01       	movw	r22, r6
     d56:	a2 01       	movw	r20, r4
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	2b db       	rcall	.-2474   	; 0x3b4 <USART1_READ>
     d5e:	6c 01       	movw	r12, r24
     d60:	89 2b       	or	r24, r25
     d62:	21 f0       	breq	.+8      	; 0xd6c <LoadMessage+0x9a>
     d64:	a7 db       	rcall	.-2226   	; 0x4b4 <USART1_FLUSH>
     d66:	8c 2d       	mov	r24, r12
     d68:	9d 2d       	mov	r25, r13
     d6a:	1f c0       	rjmp	.+62     	; 0xdaa <LoadMessage+0xd8>
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	f7 01       	movw	r30, r14
     d70:	81 93       	st	Z+, r24
     d72:	7f 01       	movw	r14, r30
     d74:	ea 15       	cp	r30, r10
     d76:	fb 05       	cpc	r31, r11
     d78:	69 f7       	brne	.-38     	; 0xd54 <LoadMessage+0x82>
     d7a:	9c db       	rcall	.-2248   	; 0x4b4 <USART1_FLUSH>
     d7c:	f4 01       	movw	r30, r8
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 0f       	add	r30, r30
     d84:	ff 1f       	adc	r31, r31
     d86:	e7 52       	subi	r30, 0x27	; 39
     d88:	fe 4f       	sbci	r31, 0xFE	; 254
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	a2 81       	ldd	r26, Z+2	; 0x02
     d90:	b3 81       	ldd	r27, Z+3	; 0x03
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	a1 1d       	adc	r26, r1
     d96:	b1 1d       	adc	r27, r1
     d98:	80 83       	st	Z, r24
     d9a:	91 83       	std	Z+1, r25	; 0x01
     d9c:	a2 83       	std	Z+2, r26	; 0x02
     d9e:	b3 83       	std	Z+3, r27	; 0x03
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <LoadMessage+0xd8>
     da6:	85 e6       	ldi	r24, 0x65	; 101
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0f 90       	pop	r0
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	9f 90       	pop	r9
     dc2:	8f 90       	pop	r8
     dc4:	7f 90       	pop	r7
     dc6:	6f 90       	pop	r6
     dc8:	5f 90       	pop	r5
     dca:	4f 90       	pop	r4
     dcc:	08 95       	ret

00000dce <SaveCommand>:
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	00 91 ed 01 	lds	r16, 0x01ED
     dd6:	10 91 ee 01 	lds	r17, 0x01EE
     dda:	20 91 ef 01 	lds	r18, 0x01EF
     dde:	30 91 f0 01 	lds	r19, 0x01F0
     de2:	45 e0       	ldi	r20, 0x05	; 5
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	60 e9       	ldi	r22, 0x90	; 144
     de8:	71 e0       	ldi	r23, 0x01	; 1
     dea:	73 df       	rcall	.-282    	; 0xcd2 <LoadMessage>
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <SendFeedback>:
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	ec 01       	movw	r28, r24
     e00:	e9 e3       	ldi	r30, 0x39	; 57
     e02:	f3 e0       	ldi	r31, 0x03	; 3
     e04:	60 83       	st	Z, r22
     e06:	51 83       	std	Z+1, r21	; 0x01
     e08:	42 83       	std	Z+2, r20	; 0x02
     e0a:	33 83       	std	Z+3, r19	; 0x03
     e0c:	24 83       	std	Z+4, r18	; 0x04
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	91 05       	cpc	r25, r1
     e12:	59 f4       	brne	.+22     	; 0xe2a <SendFeedback+0x38>
     e14:	34 c0       	rjmp	.+104    	; 0xe7e <SendFeedback+0x8c>
     e16:	f8 01       	movw	r30, r16
     e18:	81 91       	ld	r24, Z+
     e1a:	8f 01       	movw	r16, r30
     e1c:	c8 d9       	rcall	.-3184   	; 0x1ae <USART0_WRITE>
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	b9 f5       	brne	.+110    	; 0xe90 <SendFeedback+0x9e>
     e22:	0e 15       	cp	r16, r14
     e24:	1f 05       	cpc	r17, r15
     e26:	b9 f7       	brne	.-18     	; 0xe16 <SendFeedback+0x24>
     e28:	13 c0       	rjmp	.+38     	; 0xe50 <SendFeedback+0x5e>
     e2a:	02 97       	sbiw	r24, 0x02	; 2
     e2c:	29 f5       	brne	.+74     	; 0xe78 <SendFeedback+0x86>
     e2e:	09 e3       	ldi	r16, 0x39	; 57
     e30:	13 e0       	ldi	r17, 0x03	; 3
     e32:	0f 2e       	mov	r0, r31
     e34:	fe e3       	ldi	r31, 0x3E	; 62
     e36:	ef 2e       	mov	r14, r31
     e38:	f3 e0       	ldi	r31, 0x03	; 3
     e3a:	ff 2e       	mov	r15, r31
     e3c:	f0 2d       	mov	r31, r0
     e3e:	f8 01       	movw	r30, r16
     e40:	81 91       	ld	r24, Z+
     e42:	8f 01       	movw	r16, r30
     e44:	98 da       	rcall	.-2768   	; 0x376 <USART1_WRITE>
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	19 f5       	brne	.+70     	; 0xe90 <SendFeedback+0x9e>
     e4a:	0e 15       	cp	r16, r14
     e4c:	1f 05       	cpc	r17, r15
     e4e:	b9 f7       	brne	.-18     	; 0xe3e <SendFeedback+0x4c>
     e50:	cc 0f       	add	r28, r28
     e52:	dd 1f       	adc	r29, r29
     e54:	cc 0f       	add	r28, r28
     e56:	dd 1f       	adc	r29, r29
     e58:	c7 52       	subi	r28, 0x27	; 39
     e5a:	de 4f       	sbci	r29, 0xFE	; 254
     e5c:	88 81       	ld	r24, Y
     e5e:	99 81       	ldd	r25, Y+1	; 0x01
     e60:	aa 81       	ldd	r26, Y+2	; 0x02
     e62:	bb 81       	ldd	r27, Y+3	; 0x03
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	a1 1d       	adc	r26, r1
     e68:	b1 1d       	adc	r27, r1
     e6a:	88 83       	st	Y, r24
     e6c:	99 83       	std	Y+1, r25	; 0x01
     e6e:	aa 83       	std	Y+2, r26	; 0x02
     e70:	bb 83       	std	Y+3, r27	; 0x03
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0c c0       	rjmp	.+24     	; 0xe90 <SendFeedback+0x9e>
     e78:	86 e6       	ldi	r24, 0x66	; 102
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <SendFeedback+0x9e>
     e7e:	09 e3       	ldi	r16, 0x39	; 57
     e80:	13 e0       	ldi	r17, 0x03	; 3
     e82:	0f 2e       	mov	r0, r31
     e84:	fe e3       	ldi	r31, 0x3E	; 62
     e86:	ef 2e       	mov	r14, r31
     e88:	f3 e0       	ldi	r31, 0x03	; 3
     e8a:	ff 2e       	mov	r15, r31
     e8c:	f0 2d       	mov	r31, r0
     e8e:	c3 cf       	rjmp	.-122    	; 0xe16 <SendFeedback+0x24>
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	08 95       	ret

00000e9e <POWER_INIT>:
     e9e:	8f e1       	ldi	r24, 0x1F	; 31
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	a0 e0       	ldi	r26, 0x00	; 0
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	80 93 f9 01 	sts	0x01F9, r24
     eaa:	90 93 fa 01 	sts	0x01FA, r25
     eae:	a0 93 fb 01 	sts	0x01FB, r26
     eb2:	b0 93 fc 01 	sts	0x01FC, r27
     eb6:	81 e5       	ldi	r24, 0x51	; 81
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	80 93 fd 01 	sts	0x01FD, r24
     ec2:	90 93 fe 01 	sts	0x01FE, r25
     ec6:	a0 93 ff 01 	sts	0x01FF, r26
     eca:	b0 93 00 02 	sts	0x0200, r27
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	9f e1       	ldi	r25, 0x1F	; 31
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	80 93 01 02 	sts	0x0201, r24
     eda:	90 93 02 02 	sts	0x0202, r25
     ede:	a0 93 03 02 	sts	0x0203, r26
     ee2:	b0 93 04 02 	sts	0x0204, r27
     ee6:	84 b1       	in	r24, 0x04	; 4
     ee8:	87 60       	ori	r24, 0x07	; 7
     eea:	84 b9       	out	0x04, r24	; 4
     eec:	85 b1       	in	r24, 0x05	; 5
     eee:	88 7f       	andi	r24, 0xF8	; 248
     ef0:	85 b9       	out	0x05, r24	; 5
     ef2:	28 98       	cbi	0x05, 0	; 5
     ef4:	29 98       	cbi	0x05, 1	; 5
     ef6:	2a 98       	cbi	0x05, 2	; 5
     ef8:	44 9a       	sbi	0x08, 4	; 8
     efa:	45 9a       	sbi	0x08, 5	; 8
     efc:	46 9a       	sbi	0x08, 6	; 8
     efe:	87 b1       	in	r24, 0x07	; 7
     f00:	80 67       	ori	r24, 0x70	; 112
     f02:	87 b9       	out	0x07, r24	; 7
     f04:	88 b1       	in	r24, 0x08	; 8
     f06:	8f 78       	andi	r24, 0x8F	; 143
     f08:	88 b9       	out	0x08, r24	; 8
     f0a:	81 b1       	in	r24, 0x01	; 1
     f0c:	8f 73       	andi	r24, 0x3F	; 63
     f0e:	81 b9       	out	0x01, r24	; 1
     f10:	56 98       	cbi	0x0a, 6	; 10
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	08 95       	ret

00000f18 <ActivatePICOV>:
     f18:	28 9a       	sbi	0x05, 0	; 5
     f1a:	44 98       	cbi	0x08, 4	; 8
     f1c:	81 11       	cpse	r24, r1
     f1e:	2a 9a       	sbi	0x05, 2	; 5
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	08 95       	ret

00000f26 <DeactivatePICOV>:
     f26:	28 98       	cbi	0x05, 0	; 5
     f28:	44 9a       	sbi	0x08, 4	; 8
     f2a:	2a 98       	cbi	0x05, 2	; 5
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	08 95       	ret

00000f32 <SetVoltage>:
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <SetVoltage+0xa>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	8c 01       	movw	r16, r24
     f42:	19 83       	std	Y+1, r17	; 0x01
     f44:	8a 83       	std	Y+2, r24	; 0x02
     f46:	42 e0       	ldi	r20, 0x02	; 2
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	be 01       	movw	r22, r28
     f4c:	6f 5f       	subi	r22, 0xFF	; 255
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	79 db       	rcall	.-2318   	; 0x648 <SPI_WRITE>
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	59 f4       	brne	.+22     	; 0xf70 <SetVoltage+0x3e>
     f5a:	a8 01       	movw	r20, r16
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	40 93 f1 01 	sts	0x01F1, r20
     f64:	50 93 f2 01 	sts	0x01F2, r21
     f68:	60 93 f3 01 	sts	0x01F3, r22
     f6c:	70 93 f4 01 	sts	0x01F4, r23
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <DeactivateHV>:
     f7e:	8f 92       	push	r8
     f80:	9f 92       	push	r9
     f82:	af 92       	push	r10
     f84:	bf 92       	push	r11
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	80 91 01 02 	lds	r24, 0x0201
     f92:	90 91 02 02 	lds	r25, 0x0202
     f96:	cd df       	rcall	.-102    	; 0xf32 <SetVoltage>
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	09 f0       	breq	.+2      	; 0xf9e <DeactivateHV+0x20>
     f9c:	4c c0       	rjmp	.+152    	; 0x1036 <DeactivateHV+0xb8>
     f9e:	60 91 89 02 	lds	r22, 0x0289
     fa2:	70 91 8a 02 	lds	r23, 0x028A
     fa6:	80 91 8b 02 	lds	r24, 0x028B
     faa:	90 91 8c 02 	lds	r25, 0x028C
     fae:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
     fb2:	4b 01       	movw	r8, r22
     fb4:	5c 01       	movw	r10, r24
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4a ef       	ldi	r20, 0xFA	; 250
     fbc:	54 e4       	ldi	r21, 0x44	; 68
     fbe:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
     fc2:	6b 01       	movw	r12, r22
     fc4:	7c 01       	movw	r14, r24
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e8       	ldi	r20, 0x80	; 128
     fcc:	5f e3       	ldi	r21, 0x3F	; 63
     fce:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__cmpsf2>
     fd2:	88 23       	and	r24, r24
     fd4:	2c f1       	brlt	.+74     	; 0x1020 <DeactivateHV+0xa2>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	3f ef       	ldi	r19, 0xFF	; 255
     fda:	4f e7       	ldi	r20, 0x7F	; 127
     fdc:	57 e4       	ldi	r21, 0x47	; 71
     fde:	c7 01       	movw	r24, r14
     fe0:	b6 01       	movw	r22, r12
     fe2:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__gesf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	b4 f4       	brge	.+44     	; 0x1016 <DeactivateHV+0x98>
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	c5 01       	movw	r24, r10
     ff4:	b4 01       	movw	r22, r8
     ff6:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
     ffa:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__fixunssfsi>
     ffe:	61 15       	cp	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	99 f0       	breq	.+38     	; 0x102a <DeactivateHV+0xac>
    1004:	28 ec       	ldi	r18, 0xC8	; 200
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	c9 01       	movw	r24, r18
    100a:	01 97       	sbiw	r24, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <DeactivateHV+0x8c>
    100e:	61 50       	subi	r22, 0x01	; 1
    1010:	71 09       	sbc	r23, r1
    1012:	d1 f7       	brne	.-12     	; 0x1008 <DeactivateHV+0x8a>
    1014:	0a c0       	rjmp	.+20     	; 0x102a <DeactivateHV+0xac>
    1016:	c7 01       	movw	r24, r14
    1018:	b6 01       	movw	r22, r12
    101a:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__fixunssfsi>
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DeactivateHV+0xa6>
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	cb 01       	movw	r24, r22
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <DeactivateHV+0xa8>
    102a:	28 98       	cbi	0x05, 0	; 5
    102c:	46 9a       	sbi	0x08, 6	; 8
    102e:	45 9a       	sbi	0x08, 5	; 8
    1030:	29 98       	cbi	0x05, 1	; 5
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	08 95       	ret

00001048 <SetBias>:
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	00 d0       	rcall	.+0      	; 0x1052 <SetBias+0xa>
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	8c 01       	movw	r16, r24
    1058:	19 83       	std	Y+1, r17	; 0x01
    105a:	8a 83       	std	Y+2, r24	; 0x02
    105c:	42 e0       	ldi	r20, 0x02	; 2
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	be 01       	movw	r22, r28
    1062:	6f 5f       	subi	r22, 0xFF	; 255
    1064:	7f 4f       	sbci	r23, 0xFF	; 255
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	ee da       	rcall	.-2596   	; 0x648 <SPI_WRITE>
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	59 f4       	brne	.+22     	; 0x1086 <SetBias+0x3e>
    1070:	a8 01       	movw	r20, r16
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	40 93 f5 01 	sts	0x01F5, r20
    107a:	50 93 f6 01 	sts	0x01F6, r21
    107e:	60 93 f7 01 	sts	0x01F7, r22
    1082:	70 93 f8 01 	sts	0x01F8, r23
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	08 95       	ret

00001094 <ActivateHV>:
    1094:	29 9a       	sbi	0x05, 1	; 5
    1096:	80 e1       	ldi	r24, 0x10	; 16
    1098:	97 e2       	ldi	r25, 0x27	; 39
    109a:	4b df       	rcall	.-362    	; 0xf32 <SetVoltage>
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	41 f4       	brne	.+16     	; 0x10b0 <ActivateHV+0x1c>
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	9f e3       	ldi	r25, 0x3F	; 63
    10a4:	d1 df       	rcall	.-94     	; 0x1048 <SetBias>
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <ActivateHV+0x1c>
    10aa:	28 9a       	sbi	0x05, 0	; 5
    10ac:	46 98       	cbi	0x08, 6	; 8
    10ae:	45 98       	cbi	0x08, 5	; 8
    10b0:	08 95       	ret

000010b2 <MeasureV>:
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ec 01       	movw	r28, r24
    10bc:	8b 01       	movw	r16, r22
    10be:	95 dd       	rcall	.-1238   	; 0xbea <ADC_READ>
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	89 f4       	brne	.+34     	; 0x10e6 <MeasureV+0x34>
    10c4:	cc 0f       	add	r28, r28
    10c6:	dd 1f       	adc	r29, r29
    10c8:	cc 0f       	add	r28, r28
    10ca:	dd 1f       	adc	r29, r29
    10cc:	cb 5f       	subi	r28, 0xFB	; 251
    10ce:	dd 4f       	sbci	r29, 0xFD	; 253
    10d0:	f8 01       	movw	r30, r16
    10d2:	40 81       	ld	r20, Z
    10d4:	51 81       	ldd	r21, Z+1	; 0x01
    10d6:	05 2e       	mov	r0, r21
    10d8:	00 0c       	add	r0, r0
    10da:	66 0b       	sbc	r22, r22
    10dc:	77 0b       	sbc	r23, r23
    10de:	48 83       	st	Y, r20
    10e0:	59 83       	std	Y+1, r21	; 0x01
    10e2:	6a 83       	std	Y+2, r22	; 0x02
    10e4:	7b 83       	std	Y+3, r23	; 0x03
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <IsCLFault>:
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	91 05       	cpc	r25, r1
    10f4:	29 f4       	brne	.+10     	; 0x1100 <IsCLFault+0x10>
    10f6:	89 b1       	in	r24, 0x09	; 9
    10f8:	86 fb       	bst	r24, 6
    10fa:	88 27       	eor	r24, r24
    10fc:	80 f9       	bld	r24, 0
    10fe:	08 95       	ret
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	91 05       	cpc	r25, r1
    1104:	29 f4       	brne	.+10     	; 0x1110 <IsCLFault+0x20>
    1106:	80 b1       	in	r24, 0x00	; 0
    1108:	86 fb       	bst	r24, 6
    110a:	88 27       	eor	r24, r24
    110c:	80 f9       	bld	r24, 0
    110e:	08 95       	ret
    1110:	03 97       	sbiw	r24, 0x03	; 3
    1112:	29 f4       	brne	.+10     	; 0x111e <IsCLFault+0x2e>
    1114:	80 b1       	in	r24, 0x00	; 0
    1116:	88 1f       	adc	r24, r24
    1118:	88 27       	eor	r24, r24
    111a:	88 1f       	adc	r24, r24
    111c:	08 95       	ret
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	08 95       	ret

00001122 <SEP_DEV_INIT>:
    1122:	23 9a       	sbi	0x04, 3	; 4
    1124:	2b 98       	cbi	0x05, 3	; 5
    1126:	3f 98       	cbi	0x07, 7	; 7
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	08 95       	ret

0000112e <IsMirrorConstrained>:
    112e:	86 b1       	in	r24, 0x06	; 6
    1130:	88 1f       	adc	r24, r24
    1132:	88 27       	eor	r24, r24
    1134:	88 1f       	adc	r24, r24
    1136:	08 95       	ret

00001138 <ReleaseMirror>:
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	cf 93       	push	r28
    114a:	9b 01       	movw	r18, r22
    114c:	ac 01       	movw	r20, r24
    114e:	2b 9a       	sbi	0x05, 3	; 5
    1150:	a8 ee       	ldi	r26, 0xE8	; 232
    1152:	b3 e0       	ldi	r27, 0x03	; 3
    1154:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <__muluhisi3>
    1158:	4b 01       	movw	r8, r22
    115a:	5c 01       	movw	r10, r24
    115c:	c1 2c       	mov	r12, r1
    115e:	d1 2c       	mov	r13, r1
    1160:	76 01       	movw	r14, r12
    1162:	c2 e0       	ldi	r28, 0x02	; 2
    1164:	08 c0       	rjmp	.+16     	; 0x1176 <ReleaseMirror+0x3e>
    1166:	8c 2f       	mov	r24, r28
    1168:	8a 95       	dec	r24
    116a:	f1 f7       	brne	.-4      	; 0x1168 <ReleaseMirror+0x30>
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	c8 1a       	sub	r12, r24
    1170:	d8 0a       	sbc	r13, r24
    1172:	e8 0a       	sbc	r14, r24
    1174:	f8 0a       	sbc	r15, r24
    1176:	db df       	rcall	.-74     	; 0x112e <IsMirrorConstrained>
    1178:	88 23       	and	r24, r24
    117a:	41 f0       	breq	.+16     	; 0x118c <ReleaseMirror+0x54>
    117c:	c8 14       	cp	r12, r8
    117e:	d9 04       	cpc	r13, r9
    1180:	ea 04       	cpc	r14, r10
    1182:	fb 04       	cpc	r15, r11
    1184:	81 f7       	brne	.-32     	; 0x1166 <ReleaseMirror+0x2e>
    1186:	81 ea       	ldi	r24, 0xA1	; 161
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0a c0       	rjmp	.+20     	; 0x11a0 <ReleaseMirror+0x68>
    118c:	8c 14       	cp	r8, r12
    118e:	9d 04       	cpc	r9, r13
    1190:	ae 04       	cpc	r10, r14
    1192:	bf 04       	cpc	r11, r15
    1194:	19 f0       	breq	.+6      	; 0x119c <ReleaseMirror+0x64>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <ReleaseMirror+0x68>
    119c:	81 ea       	ldi	r24, 0xA1	; 161
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	cf 91       	pop	r28
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	bf 90       	pop	r11
    11ac:	af 90       	pop	r10
    11ae:	9f 90       	pop	r9
    11b0:	8f 90       	pop	r8
    11b2:	08 95       	ret

000011b4 <PICOMOTORS_INIT>:
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	65 97       	sbiw	r28, 0x15	; 21
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	80 e4       	ldi	r24, 0x40	; 64
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
    11cc:	8a e0       	ldi	r24, 0x0A	; 10
    11ce:	8c 8b       	std	Y+20, r24	; 0x14
    11d0:	1d 8a       	std	Y+21, r1	; 0x15
    11d2:	43 e0       	ldi	r20, 0x03	; 3
    11d4:	50 e0       	ldi	r21, 0x00	; 0
    11d6:	be 01       	movw	r22, r28
    11d8:	6d 5e       	subi	r22, 0xED	; 237
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	33 da       	rcall	.-2970   	; 0x648 <SPI_WRITE>
    11e2:	9c 01       	movw	r18, r24
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	09 f0       	breq	.+2      	; 0x11ea <PICOMOTORS_INIT+0x36>
    11e8:	5a c0       	rjmp	.+180    	; 0x129e <PICOMOTORS_INIT+0xea>
    11ea:	80 e4       	ldi	r24, 0x40	; 64
    11ec:	88 8b       	std	Y+16, r24	; 0x10
    11ee:	19 8a       	std	Y+17, r1	; 0x11
    11f0:	1a 8a       	std	Y+18, r1	; 0x12
    11f2:	43 e0       	ldi	r20, 0x03	; 3
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	be 01       	movw	r22, r28
    11f8:	60 5f       	subi	r22, 0xF0	; 240
    11fa:	7f 4f       	sbci	r23, 0xFF	; 255
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	23 da       	rcall	.-3002   	; 0x648 <SPI_WRITE>
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	09 f0       	breq	.+2      	; 0x1208 <PICOMOTORS_INIT+0x54>
    1206:	4c c0       	rjmp	.+152    	; 0x12a0 <PICOMOTORS_INIT+0xec>
    1208:	80 e4       	ldi	r24, 0x40	; 64
    120a:	8d 87       	std	Y+13, r24	; 0x0d
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	8e 87       	std	Y+14, r24	; 0x0e
    1210:	1f 86       	std	Y+15, r1	; 0x0f
    1212:	43 e0       	ldi	r20, 0x03	; 3
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	be 01       	movw	r22, r28
    1218:	63 5f       	subi	r22, 0xF3	; 243
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	13 da       	rcall	.-3034   	; 0x648 <SPI_WRITE>
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	09 f0       	breq	.+2      	; 0x1228 <PICOMOTORS_INIT+0x74>
    1226:	3c c0       	rjmp	.+120    	; 0x12a0 <PICOMOTORS_INIT+0xec>
    1228:	80 e4       	ldi	r24, 0x40	; 64
    122a:	8a 87       	std	Y+10, r24	; 0x0a
    122c:	8c e0       	ldi	r24, 0x0C	; 12
    122e:	8b 87       	std	Y+11, r24	; 0x0b
    1230:	1c 86       	std	Y+12, r1	; 0x0c
    1232:	43 e0       	ldi	r20, 0x03	; 3
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	be 01       	movw	r22, r28
    1238:	66 5f       	subi	r22, 0xF6	; 246
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	03 da       	rcall	.-3066   	; 0x648 <SPI_WRITE>
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	69 f5       	brne	.+90     	; 0x12a0 <PICOMOTORS_INIT+0xec>
    1246:	80 e4       	ldi	r24, 0x40	; 64
    1248:	8f 83       	std	Y+7, r24	; 0x07
    124a:	8d e0       	ldi	r24, 0x0D	; 13
    124c:	88 87       	std	Y+8, r24	; 0x08
    124e:	19 86       	std	Y+9, r1	; 0x09
    1250:	43 e0       	ldi	r20, 0x03	; 3
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	be 01       	movw	r22, r28
    1256:	69 5f       	subi	r22, 0xF9	; 249
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	f4 d9       	rcall	.-3096   	; 0x648 <SPI_WRITE>
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	f1 f4       	brne	.+60     	; 0x12a0 <PICOMOTORS_INIT+0xec>
    1264:	80 e4       	ldi	r24, 0x40	; 64
    1266:	8c 83       	std	Y+4, r24	; 0x04
    1268:	82 e1       	ldi	r24, 0x12	; 18
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	1e 82       	std	Y+6, r1	; 0x06
    126e:	43 e0       	ldi	r20, 0x03	; 3
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	be 01       	movw	r22, r28
    1274:	6c 5f       	subi	r22, 0xFC	; 252
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	e5 d9       	rcall	.-3126   	; 0x648 <SPI_WRITE>
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	79 f4       	brne	.+30     	; 0x12a0 <PICOMOTORS_INIT+0xec>
    1282:	80 e4       	ldi	r24, 0x40	; 64
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	83 e1       	ldi	r24, 0x13	; 19
    1288:	8a 83       	std	Y+2, r24	; 0x02
    128a:	1b 82       	std	Y+3, r1	; 0x03
    128c:	43 e0       	ldi	r20, 0x03	; 3
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	be 01       	movw	r22, r28
    1292:	6f 5f       	subi	r22, 0xFF	; 255
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	d6 d9       	rcall	.-3156   	; 0x648 <SPI_WRITE>
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <PICOMOTORS_INIT+0xec>
    129e:	93 2f       	mov	r25, r19
    12a0:	65 96       	adiw	r28, 0x15	; 21
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <MovePicomotor>:
    12b2:	2f 92       	push	r2
    12b4:	3f 92       	push	r3
    12b6:	4f 92       	push	r4
    12b8:	5f 92       	push	r5
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	68 97       	sbiw	r28, 0x18	; 24
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	3c 01       	movw	r6, r24
    12e8:	6b 01       	movw	r12, r22
    12ea:	16 16       	cp	r1, r22
    12ec:	17 06       	cpc	r1, r23
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <MovePicomotor+0x40>
    12f0:	81 c0       	rjmp	.+258    	; 0x13f4 <MovePicomotor+0x142>
    12f2:	00 e0       	ldi	r16, 0x00	; 0
    12f4:	10 e0       	ldi	r17, 0x00	; 0
    12f6:	68 94       	set
    12f8:	22 24       	eor	r2, r2
    12fa:	26 f8       	bld	r2, 6
    12fc:	fc 01       	movw	r30, r24
    12fe:	ee 0f       	add	r30, r30
    1300:	ff 1f       	adc	r31, r31
    1302:	e6 57       	subi	r30, 0x76	; 118
    1304:	fe 4f       	sbci	r31, 0xFE	; 254
    1306:	30 80       	ld	r3, Z
    1308:	7c 01       	movw	r14, r24
    130a:	ee 0c       	add	r14, r14
    130c:	ff 1c       	adc	r15, r15
    130e:	ee 0c       	add	r14, r14
    1310:	ff 1c       	adc	r15, r15
    1312:	f7 01       	movw	r30, r14
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	ee 58       	subi	r30, 0x8E	; 142
    131a:	fe 4f       	sbci	r31, 0xFE	; 254
    131c:	aa 24       	eor	r10, r10
    131e:	a3 94       	inc	r10
    1320:	b1 2c       	mov	r11, r1
    1322:	45 01       	movw	r8, r10
    1324:	00 80       	ld	r0, Z
    1326:	02 c0       	rjmp	.+4      	; 0x132c <MovePicomotor+0x7a>
    1328:	88 0c       	add	r8, r8
    132a:	99 1c       	adc	r9, r9
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <MovePicomotor+0x76>
    1330:	0f 2e       	mov	r0, r31
    1332:	fc e8       	ldi	r31, 0x8C	; 140
    1334:	4f 2e       	mov	r4, r31
    1336:	f2 e0       	ldi	r31, 0x02	; 2
    1338:	5f 2e       	mov	r5, r31
    133a:	f0 2d       	mov	r31, r0
    133c:	c7 01       	movw	r24, r14
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	9c 01       	movw	r18, r24
    1344:	2c 58       	subi	r18, 0x8C	; 140
    1346:	3e 4f       	sbci	r19, 0xFE	; 254
    1348:	79 01       	movw	r14, r18
    134a:	2e 8a       	std	Y+22, r2	; 0x16
    134c:	3f 8a       	std	Y+23, r3	; 0x17
    134e:	88 8e       	std	Y+24, r8	; 0x18
    1350:	43 e0       	ldi	r20, 0x03	; 3
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	be 01       	movw	r22, r28
    1356:	6a 5e       	subi	r22, 0xEA	; 234
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	74 d9       	rcall	.-3352   	; 0x648 <SPI_WRITE>
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	09 f0       	breq	.+2      	; 0x1366 <MovePicomotor+0xb4>
    1364:	cc c0       	rjmp	.+408    	; 0x14fe <MovePicomotor+0x24c>
    1366:	c2 01       	movw	r24, r4
    1368:	01 97       	sbiw	r24, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <MovePicomotor+0xb6>
    136c:	2b 8a       	std	Y+19, r2	; 0x13
    136e:	3c 8a       	std	Y+20, r3	; 0x14
    1370:	1d 8a       	std	Y+21, r1	; 0x15
    1372:	43 e0       	ldi	r20, 0x03	; 3
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	be 01       	movw	r22, r28
    1378:	6d 5e       	subi	r22, 0xED	; 237
    137a:	7f 4f       	sbci	r23, 0xFF	; 255
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	63 d9       	rcall	.-3386   	; 0x648 <SPI_WRITE>
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	09 f0       	breq	.+2      	; 0x1388 <MovePicomotor+0xd6>
    1386:	bb c0       	rjmp	.+374    	; 0x14fe <MovePicomotor+0x24c>
    1388:	8a e1       	ldi	r24, 0x1A	; 26
    138a:	8a 95       	dec	r24
    138c:	f1 f7       	brne	.-4      	; 0x138a <MovePicomotor+0xd8>
    138e:	28 8a       	std	Y+16, r2	; 0x10
    1390:	39 8a       	std	Y+17, r3	; 0x11
    1392:	c5 01       	movw	r24, r10
    1394:	f7 01       	movw	r30, r14
    1396:	00 80       	ld	r0, Z
    1398:	02 c0       	rjmp	.+4      	; 0x139e <MovePicomotor+0xec>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <MovePicomotor+0xe8>
    13a2:	8a 8b       	std	Y+18, r24	; 0x12
    13a4:	43 e0       	ldi	r20, 0x03	; 3
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	be 01       	movw	r22, r28
    13aa:	60 5f       	subi	r22, 0xF0	; 240
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	4a d9       	rcall	.-3436   	; 0x648 <SPI_WRITE>
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	09 f0       	breq	.+2      	; 0x13ba <MovePicomotor+0x108>
    13b8:	a2 c0       	rjmp	.+324    	; 0x14fe <MovePicomotor+0x24c>
    13ba:	88 ea       	ldi	r24, 0xA8	; 168
    13bc:	8a 95       	dec	r24
    13be:	f1 f7       	brne	.-4      	; 0x13bc <MovePicomotor+0x10a>
    13c0:	2d 86       	std	Y+13, r2	; 0x0d
    13c2:	3e 86       	std	Y+14, r3	; 0x0e
    13c4:	1f 86       	std	Y+15, r1	; 0x0f
    13c6:	43 e0       	ldi	r20, 0x03	; 3
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	be 01       	movw	r22, r28
    13cc:	63 5f       	subi	r22, 0xF3	; 243
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	39 d9       	rcall	.-3470   	; 0x648 <SPI_WRITE>
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	09 f0       	breq	.+2      	; 0x13dc <MovePicomotor+0x12a>
    13da:	91 c0       	rjmp	.+290    	; 0x14fe <MovePicomotor+0x24c>
    13dc:	ee e3       	ldi	r30, 0x3E	; 62
    13de:	f3 e1       	ldi	r31, 0x13	; 19
    13e0:	31 97       	sbiw	r30, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <MovePicomotor+0x12e>
    13e4:	0f 5f       	subi	r16, 0xFF	; 255
    13e6:	1f 4f       	sbci	r17, 0xFF	; 255
    13e8:	0c 15       	cp	r16, r12
    13ea:	1d 05       	cpc	r17, r13
    13ec:	09 f0       	breq	.+2      	; 0x13f0 <MovePicomotor+0x13e>
    13ee:	ad cf       	rjmp	.-166    	; 0x134a <MovePicomotor+0x98>
    13f0:	86 01       	movw	r16, r12
    13f2:	85 c0       	rjmp	.+266    	; 0x14fe <MovePicomotor+0x24c>
    13f4:	77 23       	and	r23, r23
    13f6:	0c f0       	brlt	.+2      	; 0x13fa <MovePicomotor+0x148>
    13f8:	7e c0       	rjmp	.+252    	; 0x14f6 <MovePicomotor+0x244>
    13fa:	00 e0       	ldi	r16, 0x00	; 0
    13fc:	10 e0       	ldi	r17, 0x00	; 0
    13fe:	68 94       	set
    1400:	44 24       	eor	r4, r4
    1402:	46 f8       	bld	r4, 6
    1404:	fc 01       	movw	r30, r24
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	e6 57       	subi	r30, 0x76	; 118
    140c:	fe 4f       	sbci	r31, 0xFE	; 254
    140e:	50 80       	ld	r5, Z
    1410:	4c 01       	movw	r8, r24
    1412:	88 0c       	add	r8, r8
    1414:	99 1c       	adc	r9, r9
    1416:	88 0c       	add	r8, r8
    1418:	99 1c       	adc	r9, r9
    141a:	f4 01       	movw	r30, r8
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	ea 58       	subi	r30, 0x8A	; 138
    1422:	fe 4f       	sbci	r31, 0xFE	; 254
    1424:	ee 24       	eor	r14, r14
    1426:	e3 94       	inc	r14
    1428:	f1 2c       	mov	r15, r1
    142a:	57 01       	movw	r10, r14
    142c:	00 80       	ld	r0, Z
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <MovePicomotor+0x182>
    1430:	aa 0c       	add	r10, r10
    1432:	bb 1c       	adc	r11, r11
    1434:	0a 94       	dec	r0
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <MovePicomotor+0x17e>
    1438:	0f 2e       	mov	r0, r31
    143a:	f8 ea       	ldi	r31, 0xA8	; 168
    143c:	3f 2e       	mov	r3, r31
    143e:	f0 2d       	mov	r31, r0
    1440:	c4 01       	movw	r24, r8
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	9c 01       	movw	r18, r24
    1448:	28 58       	subi	r18, 0x88	; 136
    144a:	3e 4f       	sbci	r19, 0xFE	; 254
    144c:	49 01       	movw	r8, r18
    144e:	4a 86       	std	Y+10, r4	; 0x0a
    1450:	5b 86       	std	Y+11, r5	; 0x0b
    1452:	ac 86       	std	Y+12, r10	; 0x0c
    1454:	43 e0       	ldi	r20, 0x03	; 3
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	be 01       	movw	r22, r28
    145a:	66 5f       	subi	r22, 0xF6	; 246
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	f2 d8       	rcall	.-3612   	; 0x648 <SPI_WRITE>
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	09 f0       	breq	.+2      	; 0x146a <MovePicomotor+0x1b8>
    1468:	4a c0       	rjmp	.+148    	; 0x14fe <MovePicomotor+0x24c>
    146a:	83 2d       	mov	r24, r3
    146c:	8a 95       	dec	r24
    146e:	f1 f7       	brne	.-4      	; 0x146c <MovePicomotor+0x1ba>
    1470:	4f 82       	std	Y+7, r4	; 0x07
    1472:	58 86       	std	Y+8, r5	; 0x08
    1474:	19 86       	std	Y+9, r1	; 0x09
    1476:	43 e0       	ldi	r20, 0x03	; 3
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	be 01       	movw	r22, r28
    147c:	69 5f       	subi	r22, 0xF9	; 249
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	e1 d8       	rcall	.-3646   	; 0x648 <SPI_WRITE>
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	09 f0       	breq	.+2      	; 0x148c <MovePicomotor+0x1da>
    148a:	39 c0       	rjmp	.+114    	; 0x14fe <MovePicomotor+0x24c>
    148c:	83 2d       	mov	r24, r3
    148e:	8a 95       	dec	r24
    1490:	f1 f7       	brne	.-4      	; 0x148e <MovePicomotor+0x1dc>
    1492:	4c 82       	std	Y+4, r4	; 0x04
    1494:	5d 82       	std	Y+5, r5	; 0x05
    1496:	c7 01       	movw	r24, r14
    1498:	f4 01       	movw	r30, r8
    149a:	00 80       	ld	r0, Z
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <MovePicomotor+0x1f0>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <MovePicomotor+0x1ec>
    14a6:	8e 83       	std	Y+6, r24	; 0x06
    14a8:	43 e0       	ldi	r20, 0x03	; 3
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	be 01       	movw	r22, r28
    14ae:	6c 5f       	subi	r22, 0xFC	; 252
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	c8 d8       	rcall	.-3696   	; 0x648 <SPI_WRITE>
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	09 f5       	brne	.+66     	; 0x14fe <MovePicomotor+0x24c>
    14bc:	86 ed       	ldi	r24, 0xD6	; 214
    14be:	92 e0       	ldi	r25, 0x02	; 2
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <MovePicomotor+0x20e>
    14c4:	49 82       	std	Y+1, r4	; 0x01
    14c6:	5a 82       	std	Y+2, r5	; 0x02
    14c8:	1b 82       	std	Y+3, r1	; 0x03
    14ca:	43 e0       	ldi	r20, 0x03	; 3
    14cc:	50 e0       	ldi	r21, 0x00	; 0
    14ce:	be 01       	movw	r22, r28
    14d0:	6f 5f       	subi	r22, 0xFF	; 255
    14d2:	7f 4f       	sbci	r23, 0xFF	; 255
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	b7 d8       	rcall	.-3730   	; 0x648 <SPI_WRITE>
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	81 f4       	brne	.+32     	; 0x14fe <MovePicomotor+0x24c>
    14de:	e6 e7       	ldi	r30, 0x76	; 118
    14e0:	f2 e1       	ldi	r31, 0x12	; 18
    14e2:	31 97       	sbiw	r30, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <MovePicomotor+0x230>
    14e6:	01 50       	subi	r16, 0x01	; 1
    14e8:	11 09       	sbc	r17, r1
    14ea:	0c 15       	cp	r16, r12
    14ec:	1d 05       	cpc	r17, r13
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <MovePicomotor+0x240>
    14f0:	ae cf       	rjmp	.-164    	; 0x144e <MovePicomotor+0x19c>
    14f2:	86 01       	movw	r16, r12
    14f4:	04 c0       	rjmp	.+8      	; 0x14fe <MovePicomotor+0x24c>
    14f6:	00 e0       	ldi	r16, 0x00	; 0
    14f8:	10 e0       	ldi	r17, 0x00	; 0
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	f3 01       	movw	r30, r6
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	ee 0f       	add	r30, r30
    1506:	ff 1f       	adc	r31, r31
    1508:	e7 5d       	subi	r30, 0xD7	; 215
    150a:	fd 4f       	sbci	r31, 0xFD	; 253
    150c:	a8 01       	movw	r20, r16
    150e:	11 0f       	add	r17, r17
    1510:	66 0b       	sbc	r22, r22
    1512:	77 0b       	sbc	r23, r23
    1514:	00 81       	ld	r16, Z
    1516:	11 81       	ldd	r17, Z+1	; 0x01
    1518:	22 81       	ldd	r18, Z+2	; 0x02
    151a:	33 81       	ldd	r19, Z+3	; 0x03
    151c:	04 0f       	add	r16, r20
    151e:	15 1f       	adc	r17, r21
    1520:	26 1f       	adc	r18, r22
    1522:	37 1f       	adc	r19, r23
    1524:	00 83       	st	Z, r16
    1526:	11 83       	std	Z+1, r17	; 0x01
    1528:	22 83       	std	Z+2, r18	; 0x02
    152a:	33 83       	std	Z+3, r19	; 0x03
    152c:	68 96       	adiw	r28, 0x18	; 24
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	7f 90       	pop	r7
    1552:	6f 90       	pop	r6
    1554:	5f 90       	pop	r5
    1556:	4f 90       	pop	r4
    1558:	3f 90       	pop	r3
    155a:	2f 90       	pop	r2
    155c:	08 95       	ret

0000155e <GetEncoderState>:
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	09 f0       	breq	.+2      	; 0x1564 <GetEncoderState+0x6>
    1562:	54 c0       	rjmp	.+168    	; 0x160c <GetEncoderState+0xae>
    1564:	86 b1       	in	r24, 0x06	; 6
    1566:	98 2f       	mov	r25, r24
    1568:	94 70       	andi	r25, 0x04	; 4
    156a:	28 2f       	mov	r18, r24
    156c:	28 70       	andi	r18, 0x08	; 8
    156e:	8c 70       	andi	r24, 0x0C	; 12
    1570:	8c 30       	cpi	r24, 0x0C	; 12
    1572:	91 f4       	brne	.+36     	; 0x1598 <GetEncoderState+0x3a>
    1574:	82 e0       	ldi	r24, 0x02	; 2
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	80 93 1d 02 	sts	0x021D, r24
    1580:	90 93 1e 02 	sts	0x021E, r25
    1584:	a0 93 1f 02 	sts	0x021F, r26
    1588:	b0 93 20 02 	sts	0x0220, r27
    158c:	fb 01       	movw	r30, r22
    158e:	91 83       	std	Z+1, r25	; 0x01
    1590:	80 83       	st	Z, r24
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	08 95       	ret
    1598:	99 23       	and	r25, r25
    159a:	a1 f0       	breq	.+40     	; 0x15c4 <GetEncoderState+0x66>
    159c:	21 11       	cpse	r18, r1
    159e:	26 c0       	rjmp	.+76     	; 0x15ec <GetEncoderState+0x8e>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	a0 e0       	ldi	r26, 0x00	; 0
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	80 93 1d 02 	sts	0x021D, r24
    15ac:	90 93 1e 02 	sts	0x021E, r25
    15b0:	a0 93 1f 02 	sts	0x021F, r26
    15b4:	b0 93 20 02 	sts	0x0220, r27
    15b8:	fb 01       	movw	r30, r22
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	08 95       	ret
    15c4:	22 23       	and	r18, r18
    15c6:	91 f0       	breq	.+36     	; 0x15ec <GetEncoderState+0x8e>
    15c8:	83 e0       	ldi	r24, 0x03	; 3
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a0 e0       	ldi	r26, 0x00	; 0
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	80 93 1d 02 	sts	0x021D, r24
    15d4:	90 93 1e 02 	sts	0x021E, r25
    15d8:	a0 93 1f 02 	sts	0x021F, r26
    15dc:	b0 93 20 02 	sts	0x0220, r27
    15e0:	fb 01       	movw	r30, r22
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	08 95       	ret
    15ec:	81 11       	cpse	r24, r1
    15ee:	b4 c0       	rjmp	.+360    	; 0x1758 <GetEncoderState+0x1fa>
    15f0:	10 92 1d 02 	sts	0x021D, r1
    15f4:	10 92 1e 02 	sts	0x021E, r1
    15f8:	10 92 1f 02 	sts	0x021F, r1
    15fc:	10 92 20 02 	sts	0x0220, r1
    1600:	fb 01       	movw	r30, r22
    1602:	11 82       	std	Z+1, r1	; 0x01
    1604:	10 82       	st	Z, r1
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	08 95       	ret
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	91 05       	cpc	r25, r1
    1610:	09 f0       	breq	.+2      	; 0x1614 <GetEncoderState+0xb6>
    1612:	4b c0       	rjmp	.+150    	; 0x16aa <GetEncoderState+0x14c>
    1614:	89 b1       	in	r24, 0x09	; 9
    1616:	86 ff       	sbrs	r24, 6
    1618:	26 c0       	rjmp	.+76     	; 0x1666 <GetEncoderState+0x108>
    161a:	88 23       	and	r24, r24
    161c:	94 f4       	brge	.+36     	; 0x1642 <GetEncoderState+0xe4>
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e0       	ldi	r26, 0x00	; 0
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	80 93 21 02 	sts	0x0221, r24
    162a:	90 93 22 02 	sts	0x0222, r25
    162e:	a0 93 23 02 	sts	0x0223, r26
    1632:	b0 93 24 02 	sts	0x0224, r27
    1636:	fb 01       	movw	r30, r22
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	08 95       	ret
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 e0       	ldi	r26, 0x00	; 0
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	80 93 21 02 	sts	0x0221, r24
    164e:	90 93 22 02 	sts	0x0222, r25
    1652:	a0 93 23 02 	sts	0x0223, r26
    1656:	b0 93 24 02 	sts	0x0224, r27
    165a:	fb 01       	movw	r30, r22
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	08 95       	ret
    1666:	88 23       	and	r24, r24
    1668:	94 f4       	brge	.+36     	; 0x168e <GetEncoderState+0x130>
    166a:	83 e0       	ldi	r24, 0x03	; 3
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 e0       	ldi	r26, 0x00	; 0
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	80 93 21 02 	sts	0x0221, r24
    1676:	90 93 22 02 	sts	0x0222, r25
    167a:	a0 93 23 02 	sts	0x0223, r26
    167e:	b0 93 24 02 	sts	0x0224, r27
    1682:	fb 01       	movw	r30, r22
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	08 95       	ret
    168e:	10 92 21 02 	sts	0x0221, r1
    1692:	10 92 22 02 	sts	0x0222, r1
    1696:	10 92 23 02 	sts	0x0223, r1
    169a:	10 92 24 02 	sts	0x0224, r1
    169e:	fb 01       	movw	r30, r22
    16a0:	11 82       	std	Z+1, r1	; 0x01
    16a2:	10 82       	st	Z, r1
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	08 95       	ret
    16aa:	02 97       	sbiw	r24, 0x02	; 2
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <GetEncoderState+0x152>
    16ae:	57 c0       	rjmp	.+174    	; 0x175e <GetEncoderState+0x200>
    16b0:	89 b1       	in	r24, 0x09	; 9
    16b2:	98 2f       	mov	r25, r24
    16b4:	90 71       	andi	r25, 0x10	; 16
    16b6:	28 2f       	mov	r18, r24
    16b8:	20 72       	andi	r18, 0x20	; 32
    16ba:	80 73       	andi	r24, 0x30	; 48
    16bc:	80 33       	cpi	r24, 0x30	; 48
    16be:	91 f4       	brne	.+36     	; 0x16e4 <GetEncoderState+0x186>
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	80 93 25 02 	sts	0x0225, r24
    16cc:	90 93 26 02 	sts	0x0226, r25
    16d0:	a0 93 27 02 	sts	0x0227, r26
    16d4:	b0 93 28 02 	sts	0x0228, r27
    16d8:	fb 01       	movw	r30, r22
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	08 95       	ret
    16e4:	99 23       	and	r25, r25
    16e6:	a1 f0       	breq	.+40     	; 0x1710 <GetEncoderState+0x1b2>
    16e8:	21 11       	cpse	r18, r1
    16ea:	26 c0       	rjmp	.+76     	; 0x1738 <GetEncoderState+0x1da>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	80 93 25 02 	sts	0x0225, r24
    16f8:	90 93 26 02 	sts	0x0226, r25
    16fc:	a0 93 27 02 	sts	0x0227, r26
    1700:	b0 93 28 02 	sts	0x0228, r27
    1704:	fb 01       	movw	r30, r22
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	08 95       	ret
    1710:	22 23       	and	r18, r18
    1712:	91 f0       	breq	.+36     	; 0x1738 <GetEncoderState+0x1da>
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	80 93 25 02 	sts	0x0225, r24
    1720:	90 93 26 02 	sts	0x0226, r25
    1724:	a0 93 27 02 	sts	0x0227, r26
    1728:	b0 93 28 02 	sts	0x0228, r27
    172c:	fb 01       	movw	r30, r22
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	80 83       	st	Z, r24
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	08 95       	ret
    1738:	81 11       	cpse	r24, r1
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <GetEncoderState+0x206>
    173c:	10 92 25 02 	sts	0x0225, r1
    1740:	10 92 26 02 	sts	0x0226, r1
    1744:	10 92 27 02 	sts	0x0227, r1
    1748:	10 92 28 02 	sts	0x0228, r1
    174c:	fb 01       	movw	r30, r22
    174e:	11 82       	std	Z+1, r1	; 0x01
    1750:	10 82       	st	Z, r1
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	08 95       	ret
    1758:	8d e8       	ldi	r24, 0x8D	; 141
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	08 95       	ret
    175e:	8d e8       	ldi	r24, 0x8D	; 141
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	08 95       	ret
    1764:	8d e8       	ldi	r24, 0x8D	; 141
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	08 95       	ret

0000176a <MULTIPLEXER_INIT>:
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	2c 97       	sbiw	r28, 0x0c	; 12
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	7c 01       	movw	r14, r24
    1788:	84 e0       	ldi	r24, 0x04	; 4
    178a:	8b 87       	std	Y+11, r24	; 0x0b
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	8c 87       	std	Y+12, r24	; 0x0c
    1790:	f7 01       	movw	r30, r14
    1792:	e0 59       	subi	r30, 0x90	; 144
    1794:	fe 4f       	sbci	r31, 0xFE	; 254
    1796:	00 81       	ld	r16, Z
    1798:	42 e0       	ldi	r20, 0x02	; 2
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	be 01       	movw	r22, r28
    179e:	65 5f       	subi	r22, 0xF5	; 245
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	80 2f       	mov	r24, r16
    17a4:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    17a8:	9c 01       	movw	r18, r24
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <MULTIPLEXER_INIT+0x46>
    17ae:	62 c0       	rjmp	.+196    	; 0x1874 <MULTIPLEXER_INIT+0x10a>
    17b0:	82 e0       	ldi	r24, 0x02	; 2
    17b2:	89 87       	std	Y+9, r24	; 0x09
    17b4:	86 e0       	ldi	r24, 0x06	; 6
    17b6:	8a 87       	std	Y+10, r24	; 0x0a
    17b8:	42 e0       	ldi	r20, 0x02	; 2
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	be 01       	movw	r22, r28
    17be:	67 5f       	subi	r22, 0xF7	; 247
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	80 2f       	mov	r24, r16
    17c4:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	09 f0       	breq	.+2      	; 0x17ce <MULTIPLEXER_INIT+0x64>
    17cc:	57 c0       	rjmp	.+174    	; 0x187c <MULTIPLEXER_INIT+0x112>
    17ce:	19 e0       	ldi	r17, 0x09	; 9
    17d0:	1f 83       	std	Y+7, r17	; 0x07
    17d2:	18 86       	std	Y+8, r1	; 0x08
    17d4:	42 e0       	ldi	r20, 0x02	; 2
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	be 01       	movw	r22, r28
    17da:	69 5f       	subi	r22, 0xF9	; 249
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	80 2f       	mov	r24, r16
    17e0:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	09 f0       	breq	.+2      	; 0x17ea <MULTIPLEXER_INIT+0x80>
    17e8:	49 c0       	rjmp	.+146    	; 0x187c <MULTIPLEXER_INIT+0x112>
    17ea:	1f 5f       	subi	r17, 0xFF	; 255
    17ec:	10 31       	cpi	r17, 0x10	; 16
    17ee:	81 f7       	brne	.-32     	; 0x17d0 <MULTIPLEXER_INIT+0x66>
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	e8 22       	and	r14, r24
    17f4:	80 e8       	ldi	r24, 0x80	; 128
    17f6:	f8 22       	and	r15, r24
    17f8:	ff 20       	and	r15, r15
    17fa:	54 f4       	brge	.+20     	; 0x1810 <MULTIPLEXER_INIT+0xa6>
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	e8 1a       	sub	r14, r24
    1800:	f1 08       	sbc	r15, r1
    1802:	8e ef       	ldi	r24, 0xFE	; 254
    1804:	e8 2a       	or	r14, r24
    1806:	ff 24       	eor	r15, r15
    1808:	fa 94       	dec	r15
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	e8 1a       	sub	r14, r24
    180e:	f8 0a       	sbc	r15, r24
    1810:	ea 94       	dec	r14
    1812:	ef 28       	or	r14, r15
    1814:	89 f5       	brne	.+98     	; 0x1878 <MULTIPLEXER_INIT+0x10e>
    1816:	89 e0       	ldi	r24, 0x09	; 9
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	85 e5       	ldi	r24, 0x55	; 85
    181c:	8e 83       	std	Y+6, r24	; 0x06
    181e:	42 e0       	ldi	r20, 0x02	; 2
    1820:	50 e0       	ldi	r21, 0x00	; 0
    1822:	be 01       	movw	r22, r28
    1824:	6b 5f       	subi	r22, 0xFB	; 251
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	80 2f       	mov	r24, r16
    182a:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	29 f5       	brne	.+74     	; 0x187c <MULTIPLEXER_INIT+0x112>
    1832:	8a e0       	ldi	r24, 0x0A	; 10
    1834:	8b 83       	std	Y+3, r24	; 0x03
    1836:	85 e5       	ldi	r24, 0x55	; 85
    1838:	8c 83       	std	Y+4, r24	; 0x04
    183a:	42 e0       	ldi	r20, 0x02	; 2
    183c:	50 e0       	ldi	r21, 0x00	; 0
    183e:	be 01       	movw	r22, r28
    1840:	6d 5f       	subi	r22, 0xFD	; 253
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	80 2f       	mov	r24, r16
    1846:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	a9 f0       	breq	.+42     	; 0x1878 <MULTIPLEXER_INIT+0x10e>
    184e:	16 c0       	rjmp	.+44     	; 0x187c <MULTIPLEXER_INIT+0x112>
    1850:	19 83       	std	Y+1, r17	; 0x01
    1852:	1a 82       	std	Y+2, r1	; 0x02
    1854:	42 e0       	ldi	r20, 0x02	; 2
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	be 01       	movw	r22, r28
    185a:	6f 5f       	subi	r22, 0xFF	; 255
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	80 2f       	mov	r24, r16
    1860:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	51 f4       	brne	.+20     	; 0x187c <MULTIPLEXER_INIT+0x112>
    1868:	18 5f       	subi	r17, 0xF8	; 248
    186a:	14 36       	cpi	r17, 0x64	; 100
    186c:	89 f7       	brne	.-30     	; 0x1850 <MULTIPLEXER_INIT+0xe6>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	04 c0       	rjmp	.+8      	; 0x187c <MULTIPLEXER_INIT+0x112>
    1874:	93 2f       	mov	r25, r19
    1876:	02 c0       	rjmp	.+4      	; 0x187c <MULTIPLEXER_INIT+0x112>
    1878:	14 e4       	ldi	r17, 0x44	; 68
    187a:	ea cf       	rjmp	.-44     	; 0x1850 <MULTIPLEXER_INIT+0xe6>
    187c:	2c 96       	adiw	r28, 0x0c	; 12
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	08 95       	ret

00001896 <ChannelOn>:
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <ChannelOn+0xa>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	8c 01       	movw	r16, r24
    18a6:	6a e2       	ldi	r22, 0x2A	; 42
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divmodhi4>
    18ae:	9c 01       	movw	r18, r24
    18b0:	fc 01       	movw	r30, r24
    18b2:	e4 5e       	subi	r30, 0xE4	; 228
    18b4:	fe 4f       	sbci	r31, 0xFE	; 254
    18b6:	80 81       	ld	r24, Z
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	f9 01       	movw	r30, r18
    18c0:	ea 5b       	subi	r30, 0xBA	; 186
    18c2:	fe 4f       	sbci	r31, 0xFE	; 254
    18c4:	80 81       	ld	r24, Z
    18c6:	60 59       	subi	r22, 0x90	; 144
    18c8:	7e 4f       	sbci	r23, 0xFE	; 254
    18ca:	fb 01       	movw	r30, r22
    18cc:	e8 0f       	add	r30, r24
    18ce:	f1 1d       	adc	r31, r1
    18d0:	42 e0       	ldi	r20, 0x02	; 2
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	be 01       	movw	r22, r28
    18d6:	6f 5f       	subi	r22, 0xFF	; 255
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	61 f4       	brne	.+24     	; 0x18fc <ChannelOn+0x66>
    18e4:	01 2e       	mov	r0, r17
    18e6:	00 0c       	add	r0, r0
    18e8:	22 0b       	sbc	r18, r18
    18ea:	33 0b       	sbc	r19, r19
    18ec:	00 93 35 02 	sts	0x0235, r16
    18f0:	10 93 36 02 	sts	0x0236, r17
    18f4:	20 93 37 02 	sts	0x0237, r18
    18f8:	30 93 38 02 	sts	0x0238, r19
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <ChannelOff>:
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	00 d0       	rcall	.+0      	; 0x1910 <ChannelOff+0x6>
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
    1914:	6a e2       	ldi	r22, 0x2A	; 42
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divmodhi4>
    191c:	fc 01       	movw	r30, r24
    191e:	e4 5e       	subi	r30, 0xE4	; 228
    1920:	fe 4f       	sbci	r31, 0xFE	; 254
    1922:	20 81       	ld	r18, Z
    1924:	29 83       	std	Y+1, r18	; 0x01
    1926:	1a 82       	std	Y+2, r1	; 0x02
    1928:	fc 01       	movw	r30, r24
    192a:	ea 5b       	subi	r30, 0xBA	; 186
    192c:	fe 4f       	sbci	r31, 0xFE	; 254
    192e:	80 81       	ld	r24, Z
    1930:	60 59       	subi	r22, 0x90	; 144
    1932:	7e 4f       	sbci	r23, 0xFE	; 254
    1934:	fb 01       	movw	r30, r22
    1936:	e8 0f       	add	r30, r24
    1938:	f1 1d       	adc	r31, r1
    193a:	42 e0       	ldi	r20, 0x02	; 2
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	be 01       	movw	r22, r28
    1940:	6f 5f       	subi	r22, 0xFF	; 255
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	59 f4       	brne	.+22     	; 0x1964 <ChannelOff+0x5a>
    194e:	4f ef       	ldi	r20, 0xFF	; 255
    1950:	5f ef       	ldi	r21, 0xFF	; 255
    1952:	ba 01       	movw	r22, r20
    1954:	40 93 35 02 	sts	0x0235, r20
    1958:	50 93 36 02 	sts	0x0236, r21
    195c:	60 93 37 02 	sts	0x0237, r22
    1960:	70 93 38 02 	sts	0x0238, r23
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	08 95       	ret

0000196e <TEMP_SENSORS_INIT>:
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	00 d0       	rcall	.+0      	; 0x1974 <TEMP_SENSORS_INIT+0x6>
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	1a 82       	std	Y+2, r1	; 0x02
    197e:	42 e0       	ldi	r20, 0x02	; 2
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	be 01       	movw	r22, r28
    1984:	6f 5f       	subi	r22, 0xFF	; 255
    1986:	7f 4f       	sbci	r23, 0xFF	; 255
    1988:	8e e9       	ldi	r24, 0x9E	; 158
    198a:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <GetTemperatureMCP9801>:
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <GetTemperatureMCP9801+0xe>
    19a6:	1f 92       	push	r1
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	89 2b       	or	r24, r25
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <GetTemperatureMCP9801+0x1a>
    19b0:	40 c0       	rjmp	.+128    	; 0x1a32 <GetTemperatureMCP9801+0x9a>
    19b2:	7b 01       	movw	r14, r22
    19b4:	19 82       	std	Y+1, r1	; 0x01
    19b6:	02 e0       	ldi	r16, 0x02	; 2
    19b8:	10 e0       	ldi	r17, 0x00	; 0
    19ba:	9e 01       	movw	r18, r28
    19bc:	2e 5f       	subi	r18, 0xFE	; 254
    19be:	3f 4f       	sbci	r19, 0xFF	; 255
    19c0:	41 e0       	ldi	r20, 0x01	; 1
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	be 01       	movw	r22, r28
    19c6:	6f 5f       	subi	r22, 0xFF	; 255
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8e e9       	ldi	r24, 0x9E	; 158
    19cc:	0e 94 8d 04 	call	0x91a	; 0x91a <I2C_READ>
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	89 f5       	brne	.+98     	; 0x1a36 <GetTemperatureMCP9801+0x9e>
    19d4:	2a 81       	ldd	r18, Y+2	; 0x02
    19d6:	42 2f       	mov	r20, r18
    19d8:	02 2e       	mov	r0, r18
    19da:	00 0c       	add	r0, r0
    19dc:	55 0b       	sbc	r21, r21
    19de:	44 27       	eor	r20, r20
    19e0:	55 0f       	add	r21, r21
    19e2:	44 1f       	adc	r20, r20
    19e4:	55 27       	eor	r21, r21
    19e6:	44 0f       	add	r20, r20
    19e8:	55 1f       	adc	r21, r21
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	fb 01       	movw	r30, r22
    19f0:	e4 1b       	sub	r30, r20
    19f2:	f5 0b       	sbc	r31, r21
    19f4:	2f 77       	andi	r18, 0x7F	; 127
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	32 2f       	mov	r19, r18
    19fa:	22 27       	eor	r18, r18
    19fc:	6b 81       	ldd	r22, Y+3	; 0x03
    19fe:	26 0f       	add	r18, r22
    1a00:	31 1d       	adc	r19, r1
    1a02:	35 95       	asr	r19
    1a04:	27 95       	ror	r18
    1a06:	e2 9f       	mul	r30, r18
    1a08:	b0 01       	movw	r22, r0
    1a0a:	e3 9f       	mul	r30, r19
    1a0c:	70 0d       	add	r23, r0
    1a0e:	f2 9f       	mul	r31, r18
    1a10:	70 0d       	add	r23, r0
    1a12:	11 24       	eor	r1, r1
    1a14:	8b 01       	movw	r16, r22
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	00 93 39 02 	sts	0x0239, r16
    1a1e:	10 93 3a 02 	sts	0x023A, r17
    1a22:	20 93 3b 02 	sts	0x023B, r18
    1a26:	30 93 3c 02 	sts	0x023C, r19
    1a2a:	f7 01       	movw	r30, r14
    1a2c:	71 83       	std	Z+1, r23	; 0x01
    1a2e:	60 83       	st	Z, r22
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <GetTemperatureMCP9801+0x9e>
    1a32:	8b ea       	ldi	r24, 0xAB	; 171
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	08 95       	ret

00001a4a <ReadCodeinEEPROM>:
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <ReadCodeinEEPROM+0xe>
    1a58:	1f 92       	push	r1
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	01 96       	adiw	r24, 0x01	; 1
    1a64:	a1 1d       	adc	r26, r1
    1a66:	b1 1d       	adc	r27, r1
    1a68:	02 97       	sbiw	r24, 0x02	; 2
    1a6a:	a1 05       	cpc	r26, r1
    1a6c:	b1 05       	cpc	r27, r1
    1a6e:	58 f5       	brcc	.+86     	; 0x1ac6 <ReadCodeinEEPROM+0x7c>
    1a70:	4e 5f       	subi	r20, 0xFE	; 254
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	41 15       	cp	r20, r1
    1a76:	80 e4       	ldi	r24, 0x40	; 64
    1a78:	58 07       	cpc	r21, r24
    1a7a:	40 f5       	brcc	.+80     	; 0x1acc <ReadCodeinEEPROM+0x82>
    1a7c:	79 01       	movw	r14, r18
    1a7e:	59 83       	std	Y+1, r21	; 0x01
    1a80:	4a 83       	std	Y+2, r20	; 0x02
    1a82:	01 e0       	ldi	r16, 0x01	; 1
    1a84:	10 e0       	ldi	r17, 0x00	; 0
    1a86:	9e 01       	movw	r18, r28
    1a88:	2d 5f       	subi	r18, 0xFD	; 253
    1a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8c:	42 e0       	ldi	r20, 0x02	; 2
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	be 01       	movw	r22, r28
    1a92:	6f 5f       	subi	r22, 0xFF	; 255
    1a94:	7f 4f       	sbci	r23, 0xFF	; 255
    1a96:	80 ea       	ldi	r24, 0xA0	; 160
    1a98:	0e 94 8d 04 	call	0x91a	; 0x91a <I2C_READ>
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	c1 f4       	brne	.+48     	; 0x1ad0 <ReadCodeinEEPROM+0x86>
    1aa0:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa2:	e1 e5       	ldi	r30, 0x51	; 81
    1aa4:	f2 e0       	ldi	r31, 0x02	; 2
    1aa6:	40 81       	ld	r20, Z
    1aa8:	51 81       	ldd	r21, Z+1	; 0x01
    1aaa:	62 81       	ldd	r22, Z+2	; 0x02
    1aac:	73 81       	ldd	r23, Z+3	; 0x03
    1aae:	76 2f       	mov	r23, r22
    1ab0:	65 2f       	mov	r22, r21
    1ab2:	54 2f       	mov	r21, r20
    1ab4:	44 27       	eor	r20, r20
    1ab6:	42 2b       	or	r20, r18
    1ab8:	40 83       	st	Z, r20
    1aba:	51 83       	std	Z+1, r21	; 0x01
    1abc:	62 83       	std	Z+2, r22	; 0x02
    1abe:	73 83       	std	Z+3, r23	; 0x03
    1ac0:	f7 01       	movw	r30, r14
    1ac2:	20 83       	st	Z, r18
    1ac4:	05 c0       	rjmp	.+10     	; 0x1ad0 <ReadCodeinEEPROM+0x86>
    1ac6:	85 eb       	ldi	r24, 0xB5	; 181
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <ReadCodeinEEPROM+0x86>
    1acc:	86 eb       	ldi	r24, 0xB6	; 182
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	08 95       	ret

00001ae4 <GetSizeofCode>:
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	cf 93       	push	r28
    1aee:	df 93       	push	r29
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <GetSizeofCode+0xe>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <GetSizeofCode+0x10>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	a1 1d       	adc	r26, r1
    1b00:	b1 1d       	adc	r27, r1
    1b02:	02 97       	sbiw	r24, 0x02	; 2
    1b04:	a1 05       	cpc	r26, r1
    1b06:	b1 05       	cpc	r27, r1
    1b08:	50 f5       	brcc	.+84     	; 0x1b5e <GetSizeofCode+0x7a>
    1b0a:	7a 01       	movw	r14, r20
    1b0c:	19 82       	std	Y+1, r1	; 0x01
    1b0e:	1a 82       	std	Y+2, r1	; 0x02
    1b10:	02 e0       	ldi	r16, 0x02	; 2
    1b12:	10 e0       	ldi	r17, 0x00	; 0
    1b14:	9e 01       	movw	r18, r28
    1b16:	2d 5f       	subi	r18, 0xFD	; 253
    1b18:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1a:	42 e0       	ldi	r20, 0x02	; 2
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	be 01       	movw	r22, r28
    1b20:	6f 5f       	subi	r22, 0xFF	; 255
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255
    1b24:	80 ea       	ldi	r24, 0xA0	; 160
    1b26:	0e 94 8d 04 	call	0x91a	; 0x91a <I2C_READ>
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	d1 f4       	brne	.+52     	; 0x1b62 <GetSizeofCode+0x7e>
    1b2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	32 2f       	mov	r19, r18
    1b34:	22 27       	eor	r18, r18
    1b36:	4c 81       	ldd	r20, Y+4	; 0x04
    1b38:	24 0f       	add	r18, r20
    1b3a:	31 1d       	adc	r19, r1
    1b3c:	a9 01       	movw	r20, r18
    1b3e:	03 2e       	mov	r0, r19
    1b40:	00 0c       	add	r0, r0
    1b42:	66 0b       	sbc	r22, r22
    1b44:	77 0b       	sbc	r23, r23
    1b46:	40 93 4d 02 	sts	0x024D, r20
    1b4a:	50 93 4e 02 	sts	0x024E, r21
    1b4e:	60 93 4f 02 	sts	0x024F, r22
    1b52:	70 93 50 02 	sts	0x0250, r23
    1b56:	f7 01       	movw	r30, r14
    1b58:	31 83       	std	Z+1, r19	; 0x01
    1b5a:	20 83       	st	Z, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <GetSizeofCode+0x7e>
    1b5e:	85 eb       	ldi	r24, 0xB5	; 181
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	08 95       	ret

00001b78 <WriteinEEPROM>:
    1b78:	3f 92       	push	r3
    1b7a:	4f 92       	push	r4
    1b7c:	5f 92       	push	r5
    1b7e:	6f 92       	push	r6
    1b80:	7f 92       	push	r7
    1b82:	8f 92       	push	r8
    1b84:	9f 92       	push	r9
    1b86:	af 92       	push	r10
    1b88:	bf 92       	push	r11
    1b8a:	cf 92       	push	r12
    1b8c:	df 92       	push	r13
    1b8e:	ef 92       	push	r14
    1b90:	ff 92       	push	r15
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	c2 54       	subi	r28, 0x42	; 66
    1ba0:	d1 09       	sbc	r29, r1
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	a1 1d       	adc	r26, r1
    1bb4:	b1 1d       	adc	r27, r1
    1bb6:	02 97       	sbiw	r24, 0x02	; 2
    1bb8:	a1 05       	cpc	r26, r1
    1bba:	b1 05       	cpc	r27, r1
    1bbc:	08 f0       	brcs	.+2      	; 0x1bc0 <WriteinEEPROM+0x48>
    1bbe:	59 c0       	rjmp	.+178    	; 0x1c72 <WriteinEEPROM+0xfa>
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	81 15       	cp	r24, r1
    1bc6:	90 44       	sbci	r25, 0x40	; 64
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <WriteinEEPROM+0x54>
    1bca:	56 c0       	rjmp	.+172    	; 0x1c78 <WriteinEEPROM+0x100>
    1bcc:	79 01       	movw	r14, r18
    1bce:	5a 01       	movw	r10, r20
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 96 1b 	call	0x372c	; 0x372c <__floatunsisf>
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5c e3       	ldi	r21, 0x3C	; 60
    1be2:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    1be6:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <ceil>
    1bea:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fixsfsi>
    1bee:	2b 01       	movw	r4, r22
    1bf0:	16 16       	cp	r1, r22
    1bf2:	17 06       	cpc	r1, r23
    1bf4:	0c f0       	brlt	.+2      	; 0x1bf8 <WriteinEEPROM+0x80>
    1bf6:	43 c0       	rjmp	.+134    	; 0x1c7e <WriteinEEPROM+0x106>
    1bf8:	61 2c       	mov	r6, r1
    1bfa:	71 2c       	mov	r7, r1
    1bfc:	00 e0       	ldi	r16, 0x00	; 0
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
    1c00:	81 2c       	mov	r8, r1
    1c02:	91 2c       	mov	r9, r1
    1c04:	6e 01       	movw	r12, r28
    1c06:	83 e4       	ldi	r24, 0x43	; 67
    1c08:	c8 0e       	add	r12, r24
    1c0a:	d1 1c       	adc	r13, r1
    1c0c:	62 e0       	ldi	r22, 0x02	; 2
    1c0e:	e6 0e       	add	r14, r22
    1c10:	f1 1c       	adc	r15, r1
    1c12:	33 24       	eor	r3, r3
    1c14:	3a 94       	dec	r3
    1c16:	99 82       	std	Y+1, r9	; 0x01
    1c18:	8a 82       	std	Y+2, r8	; 0x02
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	33 96       	adiw	r30, 0x03	; 3
    1c1e:	0e 15       	cp	r16, r14
    1c20:	1f 05       	cpc	r17, r15
    1c22:	44 f4       	brge	.+16     	; 0x1c34 <WriteinEEPROM+0xbc>
    1c24:	d5 01       	movw	r26, r10
    1c26:	a0 0f       	add	r26, r16
    1c28:	b1 1f       	adc	r27, r17
    1c2a:	8c 91       	ld	r24, X
    1c2c:	80 83       	st	Z, r24
    1c2e:	0f 5f       	subi	r16, 0xFF	; 255
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <WriteinEEPROM+0xbe>
    1c34:	30 82       	st	Z, r3
    1c36:	31 96       	adiw	r30, 0x01	; 1
    1c38:	ec 15       	cp	r30, r12
    1c3a:	fd 05       	cpc	r31, r13
    1c3c:	81 f7       	brne	.-32     	; 0x1c1e <WriteinEEPROM+0xa6>
    1c3e:	42 e4       	ldi	r20, 0x42	; 66
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	be 01       	movw	r22, r28
    1c44:	6f 5f       	subi	r22, 0xFF	; 255
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	80 ea       	ldi	r24, 0xA0	; 160
    1c4a:	0e 94 92 03 	call	0x724	; 0x724 <I2C_WRITE>
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	c1 f4       	brne	.+48     	; 0x1c82 <WriteinEEPROM+0x10a>
    1c52:	80 e1       	ldi	r24, 0x10	; 16
    1c54:	97 e2       	ldi	r25, 0x27	; 39
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <WriteinEEPROM+0xde>
    1c5a:	80 e4       	ldi	r24, 0x40	; 64
    1c5c:	88 0e       	add	r8, r24
    1c5e:	91 1c       	adc	r9, r1
    1c60:	6f ef       	ldi	r22, 0xFF	; 255
    1c62:	66 1a       	sub	r6, r22
    1c64:	76 0a       	sbc	r7, r22
    1c66:	64 14       	cp	r6, r4
    1c68:	75 04       	cpc	r7, r5
    1c6a:	a9 f6       	brne	.-86     	; 0x1c16 <WriteinEEPROM+0x9e>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	08 c0       	rjmp	.+16     	; 0x1c82 <WriteinEEPROM+0x10a>
    1c72:	85 eb       	ldi	r24, 0xB5	; 181
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <WriteinEEPROM+0x10a>
    1c78:	86 eb       	ldi	r24, 0xB6	; 182
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 c0       	rjmp	.+4      	; 0x1c82 <WriteinEEPROM+0x10a>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	ce 5b       	subi	r28, 0xBE	; 190
    1c84:	df 4f       	sbci	r29, 0xFF	; 255
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	df 90       	pop	r13
    1c9e:	cf 90       	pop	r12
    1ca0:	bf 90       	pop	r11
    1ca2:	af 90       	pop	r10
    1ca4:	9f 90       	pop	r9
    1ca6:	8f 90       	pop	r8
    1ca8:	7f 90       	pop	r7
    1caa:	6f 90       	pop	r6
    1cac:	5f 90       	pop	r5
    1cae:	4f 90       	pop	r4
    1cb0:	3f 90       	pop	r3
    1cb2:	08 95       	ret

00001cb4 <WATCHDOG_INIT>:
    1cb4:	f8 94       	cli
    1cb6:	e0 e6       	ldi	r30, 0x60	; 96
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	88 61       	ori	r24, 0x18	; 24
    1cbe:	80 83       	st	Z, r24
    1cc0:	89 e6       	ldi	r24, 0x69	; 105
    1cc2:	80 83       	st	Z, r24
    1cc4:	78 94       	sei
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	08 95       	ret

00001ccc <DisableWatchdogTimer>:
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	a8 95       	wdr
    1cd2:	80 91 60 00 	lds	r24, 0x0060
    1cd6:	88 61       	ori	r24, 0x18	; 24
    1cd8:	80 93 60 00 	sts	0x0060, r24
    1cdc:	10 92 60 00 	sts	0x0060, r1
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	08 95       	ret

00001ce4 <PICOMOTOR_ESTIMATION_INIT>:
    1ce4:	44 ed       	ldi	r20, 0xD4	; 212
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	40 93 65 02 	sts	0x0265, r20
    1cf0:	50 93 66 02 	sts	0x0266, r21
    1cf4:	60 93 67 02 	sts	0x0267, r22
    1cf8:	70 93 68 02 	sts	0x0268, r23
    1cfc:	40 93 69 02 	sts	0x0269, r20
    1d00:	50 93 6a 02 	sts	0x026A, r21
    1d04:	60 93 6b 02 	sts	0x026B, r22
    1d08:	70 93 6c 02 	sts	0x026C, r23
    1d0c:	40 93 6d 02 	sts	0x026D, r20
    1d10:	50 93 6e 02 	sts	0x026E, r21
    1d14:	60 93 6f 02 	sts	0x026F, r22
    1d18:	70 93 70 02 	sts	0x0270, r23
    1d1c:	09 2e       	mov	r0, r25
    1d1e:	00 0c       	add	r0, r0
    1d20:	aa 0b       	sbc	r26, r26
    1d22:	bb 0b       	sbc	r27, r27
    1d24:	80 93 55 02 	sts	0x0255, r24
    1d28:	90 93 56 02 	sts	0x0256, r25
    1d2c:	a0 93 57 02 	sts	0x0257, r26
    1d30:	b0 93 58 02 	sts	0x0258, r27
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	f0 c8       	rjmp	.-3616   	; 0xf18 <ActivatePICOV>
    1d38:	08 95       	ret

00001d3a <EncoderStateMonitor>:
    1d3a:	84 30       	cpi	r24, 0x04	; 4
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	a8 f5       	brcc	.+106    	; 0x1daa <EncoderStateMonitor+0x70>
    1d40:	64 30       	cpi	r22, 0x04	; 4
    1d42:	71 05       	cpc	r23, r1
    1d44:	a8 f5       	brcc	.+106    	; 0x1db0 <EncoderStateMonitor+0x76>
    1d46:	9c 01       	movw	r18, r24
    1d48:	26 1b       	sub	r18, r22
    1d4a:	37 0b       	sbc	r19, r23
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	22 f4       	brpl	.+8      	; 0x1d58 <EncoderStateMonitor+0x1e>
    1d50:	ee 27       	eor	r30, r30
    1d52:	ff 27       	eor	r31, r31
    1d54:	e2 1b       	sub	r30, r18
    1d56:	f3 0b       	sbc	r31, r19
    1d58:	32 97       	sbiw	r30, 0x02	; 2
    1d5a:	69 f1       	breq	.+90     	; 0x1db6 <EncoderStateMonitor+0x7c>
    1d5c:	86 17       	cp	r24, r22
    1d5e:	97 07       	cpc	r25, r23
    1d60:	31 f4       	brne	.+12     	; 0x1d6e <EncoderStateMonitor+0x34>
    1d62:	fa 01       	movw	r30, r20
    1d64:	11 82       	std	Z+1, r1	; 0x01
    1d66:	10 82       	st	Z, r1
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	08 95       	ret
    1d6e:	21 30       	cpi	r18, 0x01	; 1
    1d70:	31 05       	cpc	r19, r1
    1d72:	21 f0       	breq	.+8      	; 0x1d7c <EncoderStateMonitor+0x42>
    1d74:	2d 3f       	cpi	r18, 0xFD	; 253
    1d76:	ff ef       	ldi	r31, 0xFF	; 255
    1d78:	3f 07       	cpc	r19, r31
    1d7a:	41 f4       	brne	.+16     	; 0x1d8c <EncoderStateMonitor+0x52>
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	fa 01       	movw	r30, r20
    1d82:	91 83       	std	Z+1, r25	; 0x01
    1d84:	80 83       	st	Z, r24
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	08 95       	ret
    1d8c:	2f 3f       	cpi	r18, 0xFF	; 255
    1d8e:	ff ef       	ldi	r31, 0xFF	; 255
    1d90:	3f 07       	cpc	r19, r31
    1d92:	19 f0       	breq	.+6      	; 0x1d9a <EncoderStateMonitor+0x60>
    1d94:	23 30       	cpi	r18, 0x03	; 3
    1d96:	31 05       	cpc	r19, r1
    1d98:	89 f4       	brne	.+34     	; 0x1dbc <EncoderStateMonitor+0x82>
    1d9a:	8f ef       	ldi	r24, 0xFF	; 255
    1d9c:	9f ef       	ldi	r25, 0xFF	; 255
    1d9e:	fa 01       	movw	r30, r20
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	08 95       	ret
    1daa:	89 ec       	ldi	r24, 0xC9	; 201
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	08 95       	ret
    1db0:	8a ec       	ldi	r24, 0xCA	; 202
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	08 95       	ret
    1db6:	8b ec       	ldi	r24, 0xCB	; 203
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	08 95       	ret
    1dbc:	8c ec       	ldi	r24, 0xCC	; 204
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	08 95       	ret

00001dc2 <NumTicksCalc>:
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	7b 01       	movw	r14, r22
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	fc 01       	movw	r30, r24
    1dde:	eb 59       	subi	r30, 0x9B	; 155
    1de0:	fd 4f       	sbci	r31, 0xFD	; 253
    1de2:	c0 80       	ld	r12, Z
    1de4:	d1 80       	ldd	r13, Z+1	; 0x01
    1de6:	c5 2f       	mov	r28, r21
    1de8:	cc 1f       	adc	r28, r28
    1dea:	cc 27       	eor	r28, r28
    1dec:	cc 1f       	adc	r28, r28
    1dee:	d0 e0       	ldi	r29, 0x00	; 0
    1df0:	84 2f       	mov	r24, r20
    1df2:	95 2f       	mov	r25, r21
    1df4:	b6 01       	movw	r22, r12
    1df6:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divmodhi4>
    1dfa:	fb 01       	movw	r30, r22
    1dfc:	ec 1b       	sub	r30, r28
    1dfe:	fd 0b       	sbc	r31, r29
    1e00:	cc 9e       	mul	r12, r28
    1e02:	a0 01       	movw	r20, r0
    1e04:	cd 9e       	mul	r12, r29
    1e06:	50 0d       	add	r21, r0
    1e08:	dc 9e       	mul	r13, r28
    1e0a:	50 0d       	add	r21, r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	ec 01       	movw	r28, r24
    1e10:	c4 0f       	add	r28, r20
    1e12:	d5 1f       	adc	r29, r21
    1e14:	c7 01       	movw	r24, r14
    1e16:	b6 01       	movw	r22, r12
    1e18:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <__divmodhi4>
    1e1c:	80 91 00 01 	lds	r24, 0x0100
    1e20:	90 91 01 01 	lds	r25, 0x0101
    1e24:	c8 17       	cp	r28, r24
    1e26:	d9 07       	cpc	r29, r25
    1e28:	5c f5       	brge	.+86     	; 0x1e80 <NumTicksCalc+0xbe>
    1e2a:	e6 1b       	sub	r30, r22
    1e2c:	f7 0b       	sbc	r31, r23
    1e2e:	31 97       	sbiw	r30, 0x01	; 1
    1e30:	d9 01       	movw	r26, r18
    1e32:	ed 93       	st	X+, r30
    1e34:	fc 93       	st	X, r31
    1e36:	80 91 0c 01 	lds	r24, 0x010C
    1e3a:	90 91 0d 01 	lds	r25, 0x010D
    1e3e:	c8 17       	cp	r28, r24
    1e40:	d9 07       	cpc	r29, r25
    1e42:	54 f4       	brge	.+20     	; 0x1e58 <NumTicksCalc+0x96>
    1e44:	ec e0       	ldi	r30, 0x0C	; 12
    1e46:	f1 e0       	ldi	r31, 0x01	; 1
    1e48:	43 e0       	ldi	r20, 0x03	; 3
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	92 91       	ld	r25, -Z
    1e4e:	82 91       	ld	r24, -Z
    1e50:	c8 17       	cp	r28, r24
    1e52:	d9 07       	cpc	r29, r25
    1e54:	4c f0       	brlt	.+18     	; 0x1e68 <NumTicksCalc+0xa6>
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <NumTicksCalc+0x9a>
    1e58:	44 e0       	ldi	r20, 0x04	; 4
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	4f 5f       	subi	r20, 0xFF	; 255
    1e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e60:	f8 01       	movw	r30, r16
    1e62:	51 83       	std	Z+1, r21	; 0x01
    1e64:	40 83       	st	Z, r20
    1e66:	03 c0       	rjmp	.+6      	; 0x1e6e <NumTicksCalc+0xac>
    1e68:	41 50       	subi	r20, 0x01	; 1
    1e6a:	51 09       	sbc	r21, r1
    1e6c:	78 f7       	brcc	.-34     	; 0x1e4c <NumTicksCalc+0x8a>
    1e6e:	d8 01       	movw	r26, r16
    1e70:	8d 91       	ld	r24, X+
    1e72:	9c 91       	ld	r25, X
    1e74:	18 16       	cp	r1, r24
    1e76:	19 06       	cpc	r1, r25
    1e78:	74 f5       	brge	.+92     	; 0x1ed6 <NumTicksCalc+0x114>
    1e7a:	06 97       	sbiw	r24, 0x06	; 6
    1e7c:	7c f5       	brge	.+94     	; 0x1edc <NumTicksCalc+0x11a>
    1e7e:	26 c0       	rjmp	.+76     	; 0x1ecc <NumTicksCalc+0x10a>
    1e80:	e6 1b       	sub	r30, r22
    1e82:	f7 0b       	sbc	r31, r23
    1e84:	31 96       	adiw	r30, 0x01	; 1
    1e86:	d9 01       	movw	r26, r18
    1e88:	ed 93       	st	X+, r30
    1e8a:	fc 93       	st	X, r31
    1e8c:	80 91 02 01 	lds	r24, 0x0102
    1e90:	90 91 03 01 	lds	r25, 0x0103
    1e94:	c8 17       	cp	r28, r24
    1e96:	d9 07       	cpc	r29, r25
    1e98:	54 f4       	brge	.+20     	; 0x1eae <NumTicksCalc+0xec>
    1e9a:	80 91 00 01 	lds	r24, 0x0100
    1e9e:	90 91 01 01 	lds	r25, 0x0101
    1ea2:	c8 17       	cp	r28, r24
    1ea4:	d9 07       	cpc	r29, r25
    1ea6:	4c f0       	brlt	.+18     	; 0x1eba <NumTicksCalc+0xf8>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <NumTicksCalc+0xf0>
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 97       	sbiw	r24, 0x02	; 2
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	91 83       	std	Z+1, r25	; 0x01
    1eb8:	80 83       	st	Z, r24
    1eba:	d8 01       	movw	r26, r16
    1ebc:	8d 91       	ld	r24, X+
    1ebe:	9c 91       	ld	r25, X
    1ec0:	8e 3f       	cpi	r24, 0xFE	; 254
    1ec2:	bf ef       	ldi	r27, 0xFF	; 255
    1ec4:	9b 07       	cpc	r25, r27
    1ec6:	6c f0       	brlt	.+26     	; 0x1ee2 <NumTicksCalc+0x120>
    1ec8:	99 23       	and	r25, r25
    1eca:	74 f4       	brge	.+28     	; 0x1ee8 <NumTicksCalc+0x126>
    1ecc:	23 2b       	or	r18, r19
    1ece:	79 f0       	breq	.+30     	; 0x1eee <NumTicksCalc+0x12c>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e c0       	rjmp	.+28     	; 0x1ef2 <NumTicksCalc+0x130>
    1ed6:	8d ec       	ldi	r24, 0xCD	; 205
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0b c0       	rjmp	.+22     	; 0x1ef2 <NumTicksCalc+0x130>
    1edc:	8e ec       	ldi	r24, 0xCE	; 206
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	08 c0       	rjmp	.+16     	; 0x1ef2 <NumTicksCalc+0x130>
    1ee2:	8d ec       	ldi	r24, 0xCD	; 205
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <NumTicksCalc+0x130>
    1ee8:	8e ec       	ldi	r24, 0xCE	; 206
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <NumTicksCalc+0x130>
    1eee:	8f ec       	ldi	r24, 0xCF	; 207
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	df 90       	pop	r13
    1f00:	cf 90       	pop	r12
    1f02:	08 95       	ret

00001f04 <MoveIntervals>:
    1f04:	2f 92       	push	r2
    1f06:	3f 92       	push	r3
    1f08:	4f 92       	push	r4
    1f0a:	5f 92       	push	r5
    1f0c:	6f 92       	push	r6
    1f0e:	7f 92       	push	r7
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	28 97       	sbiw	r28, 0x08	; 8
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
    1f38:	16 16       	cp	r1, r22
    1f3a:	17 06       	cpc	r1, r23
    1f3c:	3c f0       	brlt	.+14     	; 0x1f4c <MoveIntervals+0x48>
    1f3e:	77 23       	and	r23, r23
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <MoveIntervals+0x40>
    1f42:	7d c0       	rjmp	.+250    	; 0x203e <MoveIntervals+0x13a>
    1f44:	cc 24       	eor	r12, r12
    1f46:	ca 94       	dec	r12
    1f48:	dc 2c       	mov	r13, r12
    1f4a:	03 c0       	rjmp	.+6      	; 0x1f52 <MoveIntervals+0x4e>
    1f4c:	cc 24       	eor	r12, r12
    1f4e:	c3 94       	inc	r12
    1f50:	d1 2c       	mov	r13, r1
    1f52:	79 01       	movw	r14, r18
    1f54:	5e 83       	std	Y+6, r21	; 0x06
    1f56:	4d 83       	std	Y+5, r20	; 0x05
    1f58:	8b 01       	movw	r16, r22
    1f5a:	3c 01       	movw	r6, r24
    1f5c:	be 01       	movw	r22, r28
    1f5e:	6f 5f       	subi	r22, 0xFF	; 255
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	fd da       	rcall	.-2566   	; 0x155e <GetEncoderState>
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <MoveIntervals+0x66>
    1f68:	75 c0       	rjmp	.+234    	; 0x2054 <MoveIntervals+0x150>
    1f6a:	ed 81       	ldd	r30, Y+5	; 0x05
    1f6c:	fe 81       	ldd	r31, Y+6	; 0x06
    1f6e:	11 82       	std	Z+1, r1	; 0x01
    1f70:	10 82       	st	Z, r1
    1f72:	f7 01       	movw	r30, r14
    1f74:	11 82       	std	Z+1, r1	; 0x01
    1f76:	10 82       	st	Z, r1
    1f78:	1c 82       	std	Y+4, r1	; 0x04
    1f7a:	1b 82       	std	Y+3, r1	; 0x03
    1f7c:	18 01       	movw	r2, r16
    1f7e:	11 23       	and	r17, r17
    1f80:	24 f4       	brge	.+8      	; 0x1f8a <MoveIntervals+0x86>
    1f82:	22 24       	eor	r2, r2
    1f84:	33 24       	eor	r3, r3
    1f86:	20 1a       	sub	r2, r16
    1f88:	31 0a       	sbc	r3, r17
    1f8a:	12 14       	cp	r1, r2
    1f8c:	13 04       	cpc	r1, r3
    1f8e:	0c f0       	brlt	.+2      	; 0x1f92 <MoveIntervals+0x8e>
    1f90:	59 c0       	rjmp	.+178    	; 0x2044 <MoveIntervals+0x140>
    1f92:	18 86       	std	Y+8, r1	; 0x08
    1f94:	1f 82       	std	Y+7, r1	; 0x07
    1f96:	0f 2e       	mov	r0, r31
    1f98:	f5 e5       	ldi	r31, 0x55	; 85
    1f9a:	af 2e       	mov	r10, r31
    1f9c:	f2 e0       	ldi	r31, 0x02	; 2
    1f9e:	bf 2e       	mov	r11, r31
    1fa0:	f0 2d       	mov	r31, r0
    1fa2:	88 24       	eor	r8, r8
    1fa4:	99 24       	eor	r9, r9
    1fa6:	8c 18       	sub	r8, r12
    1fa8:	9d 08       	sbc	r9, r13
    1faa:	49 80       	ldd	r4, Y+1	; 0x01
    1fac:	5a 80       	ldd	r5, Y+2	; 0x02
    1fae:	00 e0       	ldi	r16, 0x00	; 0
    1fb0:	10 e0       	ldi	r17, 0x00	; 0
    1fb2:	b6 01       	movw	r22, r12
    1fb4:	c3 01       	movw	r24, r6
    1fb6:	7d d9       	rcall	.-3334   	; 0x12b2 <MovePicomotor>
    1fb8:	f7 01       	movw	r30, r14
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	8c 0d       	add	r24, r12
    1fc0:	9d 1d       	adc	r25, r13
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
    1fc6:	0f 5f       	subi	r16, 0xFF	; 255
    1fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fca:	a8 01       	movw	r20, r16
    1fcc:	01 2e       	mov	r0, r17
    1fce:	00 0c       	add	r0, r0
    1fd0:	66 0b       	sbc	r22, r22
    1fd2:	77 0b       	sbc	r23, r23
    1fd4:	f5 01       	movw	r30, r10
    1fd6:	80 81       	ld	r24, Z
    1fd8:	91 81       	ldd	r25, Z+1	; 0x01
    1fda:	a2 81       	ldd	r26, Z+2	; 0x02
    1fdc:	b3 81       	ldd	r27, Z+3	; 0x03
    1fde:	84 17       	cp	r24, r20
    1fe0:	95 07       	cpc	r25, r21
    1fe2:	a6 07       	cpc	r26, r22
    1fe4:	b7 07       	cpc	r27, r23
    1fe6:	8c f1       	brlt	.+98     	; 0x204a <MoveIntervals+0x146>
    1fe8:	be 01       	movw	r22, r28
    1fea:	6f 5f       	subi	r22, 0xFF	; 255
    1fec:	7f 4f       	sbci	r23, 0xFF	; 255
    1fee:	c3 01       	movw	r24, r6
    1ff0:	b6 da       	rcall	.-2708   	; 0x155e <GetEncoderState>
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	79 f5       	brne	.+94     	; 0x2054 <MoveIntervals+0x150>
    1ff6:	ae 01       	movw	r20, r28
    1ff8:	4d 5f       	subi	r20, 0xFD	; 253
    1ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    1ffc:	b2 01       	movw	r22, r4
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	9b de       	rcall	.-714    	; 0x1d3a <EncoderStateMonitor>
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	31 f5       	brne	.+76     	; 0x2054 <MoveIntervals+0x150>
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	88 16       	cp	r8, r24
    200e:	99 06       	cpc	r9, r25
    2010:	f9 f0       	breq	.+62     	; 0x2050 <MoveIntervals+0x14c>
    2012:	89 2b       	or	r24, r25
    2014:	71 f2       	breq	.-100    	; 0x1fb2 <MoveIntervals+0xae>
    2016:	ed 81       	ldd	r30, Y+5	; 0x05
    2018:	fe 81       	ldd	r31, Y+6	; 0x06
    201a:	80 81       	ld	r24, Z
    201c:	91 81       	ldd	r25, Z+1	; 0x01
    201e:	8c 0d       	add	r24, r12
    2020:	9d 1d       	adc	r25, r13
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	8f 81       	ldd	r24, Y+7	; 0x07
    2028:	98 85       	ldd	r25, Y+8	; 0x08
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	98 87       	std	Y+8, r25	; 0x08
    202e:	8f 83       	std	Y+7, r24	; 0x07
    2030:	82 15       	cp	r24, r2
    2032:	93 05       	cpc	r25, r3
    2034:	09 f0       	breq	.+2      	; 0x2038 <MoveIntervals+0x134>
    2036:	b9 cf       	rjmp	.-142    	; 0x1faa <MoveIntervals+0xa6>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	0b c0       	rjmp	.+22     	; 0x2054 <MoveIntervals+0x150>
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	08 c0       	rjmp	.+16     	; 0x2054 <MoveIntervals+0x150>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <MoveIntervals+0x150>
    204a:	80 ed       	ldi	r24, 0xD0	; 208
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <MoveIntervals+0x150>
    2050:	81 ed       	ldi	r24, 0xD1	; 209
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	28 96       	adiw	r28, 0x08	; 8
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	ff 90       	pop	r15
    206a:	ef 90       	pop	r14
    206c:	df 90       	pop	r13
    206e:	cf 90       	pop	r12
    2070:	bf 90       	pop	r11
    2072:	af 90       	pop	r10
    2074:	9f 90       	pop	r9
    2076:	8f 90       	pop	r8
    2078:	7f 90       	pop	r7
    207a:	6f 90       	pop	r6
    207c:	5f 90       	pop	r5
    207e:	4f 90       	pop	r4
    2080:	3f 90       	pop	r3
    2082:	2f 90       	pop	r2
    2084:	08 95       	ret

00002086 <CalibratePicomotor>:
    2086:	2f 92       	push	r2
    2088:	3f 92       	push	r3
    208a:	4f 92       	push	r4
    208c:	5f 92       	push	r5
    208e:	6f 92       	push	r6
    2090:	7f 92       	push	r7
    2092:	8f 92       	push	r8
    2094:	9f 92       	push	r9
    2096:	af 92       	push	r10
    2098:	bf 92       	push	r11
    209a:	cf 92       	push	r12
    209c:	df 92       	push	r13
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	60 97       	sbiw	r28, 0x10	; 16
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	4c 01       	movw	r8, r24
    20bc:	1b 01       	movw	r2, r22
    20be:	5c 87       	std	Y+12, r21	; 0x0c
    20c0:	4b 87       	std	Y+11, r20	; 0x0b
    20c2:	3e 87       	std	Y+14, r19	; 0x0e
    20c4:	2d 87       	std	Y+13, r18	; 0x0d
    20c6:	77 23       	and	r23, r23
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <CalibratePicomotor+0x4e>
    20ca:	8f ef       	ldi	r24, 0xFF	; 255
    20cc:	9f ef       	ldi	r25, 0xFF	; 255
    20ce:	9a 87       	std	Y+10, r25	; 0x0a
    20d0:	89 87       	std	Y+9, r24	; 0x09
    20d2:	04 c0       	rjmp	.+8      	; 0x20dc <CalibratePicomotor+0x56>
    20d4:	a1 e0       	ldi	r26, 0x01	; 1
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	ba 87       	std	Y+10, r27	; 0x0a
    20da:	a9 87       	std	Y+9, r26	; 0x09
    20dc:	51 01       	movw	r10, r2
    20de:	33 20       	and	r3, r3
    20e0:	24 f4       	brge	.+8      	; 0x20ea <CalibratePicomotor+0x64>
    20e2:	aa 24       	eor	r10, r10
    20e4:	bb 24       	eor	r11, r11
    20e6:	a2 18       	sub	r10, r2
    20e8:	b3 08       	sbc	r11, r3
    20ea:	1a 14       	cp	r1, r10
    20ec:	1b 04       	cpc	r1, r11
    20ee:	0c f0       	brlt	.+2      	; 0x20f2 <CalibratePicomotor+0x6c>
    20f0:	49 c0       	rjmp	.+146    	; 0x2184 <CalibratePicomotor+0xfe>
    20f2:	00 e0       	ldi	r16, 0x00	; 0
    20f4:	10 e0       	ldi	r17, 0x00	; 0
    20f6:	41 2c       	mov	r4, r1
    20f8:	51 2c       	mov	r5, r1
    20fa:	32 01       	movw	r6, r4
    20fc:	c1 2c       	mov	r12, r1
    20fe:	d1 2c       	mov	r13, r1
    2100:	76 01       	movw	r14, r12
    2102:	9e 82       	std	Y+6, r9	; 0x06
    2104:	8d 82       	std	Y+5, r8	; 0x05
    2106:	38 8a       	std	Y+16, r3	; 0x10
    2108:	2f 86       	std	Y+15, r2	; 0x0f
    210a:	15 01       	movw	r2, r10
    210c:	9e 01       	movw	r18, r28
    210e:	2d 5f       	subi	r18, 0xFD	; 253
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	ae 01       	movw	r20, r28
    2114:	4f 5f       	subi	r20, 0xFF	; 255
    2116:	5f 4f       	sbci	r21, 0xFF	; 255
    2118:	69 85       	ldd	r22, Y+9	; 0x09
    211a:	7a 85       	ldd	r23, Y+10	; 0x0a
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	9e 81       	ldd	r25, Y+6	; 0x06
    2120:	f1 de       	rcall	.-542    	; 0x1f04 <MoveIntervals>
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	09 f0       	breq	.+2      	; 0x2128 <CalibratePicomotor+0xa2>
    2126:	9c c0       	rjmp	.+312    	; 0x2260 <CalibratePicomotor+0x1da>
    2128:	6b 81       	ldd	r22, Y+3	; 0x03
    212a:	7c 81       	ldd	r23, Y+4	; 0x04
    212c:	07 2e       	mov	r0, r23
    212e:	00 0c       	add	r0, r0
    2130:	88 0b       	sbc	r24, r24
    2132:	99 0b       	sbc	r25, r25
    2134:	c6 0e       	add	r12, r22
    2136:	d7 1e       	adc	r13, r23
    2138:	e8 1e       	adc	r14, r24
    213a:	f9 1e       	adc	r15, r25
    213c:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    2140:	4b 01       	movw	r8, r22
    2142:	5c 01       	movw	r10, r24
    2144:	c3 01       	movw	r24, r6
    2146:	b2 01       	movw	r22, r4
    2148:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    214c:	2b 01       	movw	r4, r22
    214e:	3c 01       	movw	r6, r24
    2150:	a5 01       	movw	r20, r10
    2152:	94 01       	movw	r18, r8
    2154:	c5 01       	movw	r24, r10
    2156:	b4 01       	movw	r22, r8
    2158:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    215c:	9b 01       	movw	r18, r22
    215e:	ac 01       	movw	r20, r24
    2160:	c3 01       	movw	r24, r6
    2162:	b2 01       	movw	r22, r4
    2164:	0e 94 82 1a 	call	0x3504	; 0x3504 <__addsf3>
    2168:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fixsfsi>
    216c:	2b 01       	movw	r4, r22
    216e:	3c 01       	movw	r6, r24
    2170:	0f 5f       	subi	r16, 0xFF	; 255
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	02 15       	cp	r16, r2
    2176:	13 05       	cpc	r17, r3
    2178:	49 f6       	brne	.-110    	; 0x210c <CalibratePicomotor+0x86>
    217a:	8d 80       	ldd	r8, Y+5	; 0x05
    217c:	9e 80       	ldd	r9, Y+6	; 0x06
    217e:	2f 84       	ldd	r2, Y+15	; 0x0f
    2180:	38 88       	ldd	r3, Y+16	; 0x10
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <CalibratePicomotor+0x10a>
    2184:	41 2c       	mov	r4, r1
    2186:	51 2c       	mov	r5, r1
    2188:	32 01       	movw	r6, r4
    218a:	c1 2c       	mov	r12, r1
    218c:	d1 2c       	mov	r13, r1
    218e:	76 01       	movw	r14, r12
    2190:	f4 01       	movw	r30, r8
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	eb 59       	subi	r30, 0x9B	; 155
    219c:	fd 4f       	sbci	r31, 0xFD	; 253
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    21aa:	4b 01       	movw	r8, r22
    21ac:	5c 01       	movw	r10, r24
    21ae:	c7 01       	movw	r24, r14
    21b0:	b6 01       	movw	r22, r12
    21b2:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    21b6:	9b 01       	movw	r18, r22
    21b8:	ac 01       	movw	r20, r24
    21ba:	c5 01       	movw	r24, r10
    21bc:	b4 01       	movw	r22, r8
    21be:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__divsf3>
    21c2:	4b 01       	movw	r8, r22
    21c4:	5c 01       	movw	r10, r24
    21c6:	b1 01       	movw	r22, r2
    21c8:	03 2c       	mov	r0, r3
    21ca:	00 0c       	add	r0, r0
    21cc:	88 0b       	sbc	r24, r24
    21ce:	99 0b       	sbc	r25, r25
    21d0:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    21d4:	9b 01       	movw	r18, r22
    21d6:	ac 01       	movw	r20, r24
    21d8:	c5 01       	movw	r24, r10
    21da:	b4 01       	movw	r22, r8
    21dc:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    21e0:	6d 83       	std	Y+5, r22	; 0x05
    21e2:	7e 83       	std	Y+6, r23	; 0x06
    21e4:	8f 83       	std	Y+7, r24	; 0x07
    21e6:	98 87       	std	Y+8, r25	; 0x08
    21e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    21ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    21ec:	60 83       	st	Z, r22
    21ee:	71 83       	std	Z+1, r23	; 0x01
    21f0:	82 83       	std	Z+2, r24	; 0x02
    21f2:	93 83       	std	Z+3, r25	; 0x03
    21f4:	dd 20       	and	r13, r13
    21f6:	04 f4       	brge	.+0      	; 0x21f8 <CalibratePicomotor+0x172>
    21f8:	96 01       	movw	r18, r12
    21fa:	dd 20       	and	r13, r13
    21fc:	24 f4       	brge	.+8      	; 0x2206 <CalibratePicomotor+0x180>
    21fe:	22 27       	eor	r18, r18
    2200:	33 27       	eor	r19, r19
    2202:	2c 19       	sub	r18, r12
    2204:	3d 09       	sbc	r19, r13
    2206:	03 2e       	mov	r0, r19
    2208:	00 0c       	add	r0, r0
    220a:	44 0b       	sbc	r20, r20
    220c:	55 0b       	sbc	r21, r21
    220e:	c3 01       	movw	r24, r6
    2210:	b2 01       	movw	r22, r4
    2212:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    2216:	49 01       	movw	r8, r18
    2218:	5a 01       	movw	r10, r20
    221a:	91 01       	movw	r18, r2
    221c:	33 0c       	add	r3, r3
    221e:	44 0b       	sbc	r20, r20
    2220:	55 0b       	sbc	r21, r21
    2222:	c7 01       	movw	r24, r14
    2224:	b6 01       	movw	r22, r12
    2226:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__divmodsi4>
    222a:	c5 01       	movw	r24, r10
    222c:	b4 01       	movw	r22, r8
    222e:	62 1b       	sub	r22, r18
    2230:	73 0b       	sbc	r23, r19
    2232:	84 0b       	sbc	r24, r20
    2234:	95 0b       	sbc	r25, r21
    2236:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    223a:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <sqrt>
    223e:	9b 01       	movw	r18, r22
    2240:	ac 01       	movw	r20, r24
    2242:	6d 81       	ldd	r22, Y+5	; 0x05
    2244:	7e 81       	ldd	r23, Y+6	; 0x06
    2246:	8f 81       	ldd	r24, Y+7	; 0x07
    2248:	98 85       	ldd	r25, Y+8	; 0x08
    224a:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    224e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2250:	be 85       	ldd	r27, Y+14	; 0x0e
    2252:	6d 93       	st	X+, r22
    2254:	7d 93       	st	X+, r23
    2256:	8d 93       	st	X+, r24
    2258:	9c 93       	st	X, r25
    225a:	13 97       	sbiw	r26, 0x03	; 3
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	60 96       	adiw	r28, 0x10	; 16
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	1f 91       	pop	r17
    2272:	0f 91       	pop	r16
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	df 90       	pop	r13
    227a:	cf 90       	pop	r12
    227c:	bf 90       	pop	r11
    227e:	af 90       	pop	r10
    2280:	9f 90       	pop	r9
    2282:	8f 90       	pop	r8
    2284:	7f 90       	pop	r7
    2286:	6f 90       	pop	r6
    2288:	5f 90       	pop	r5
    228a:	4f 90       	pop	r4
    228c:	3f 90       	pop	r3
    228e:	2f 90       	pop	r2
    2290:	08 95       	ret

00002292 <SetPicomotorLocation>:
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	28 97       	sbiw	r28, 0x08	; 8
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	7c 01       	movw	r14, r24
    22b0:	8e 01       	movw	r16, r28
    22b2:	0d 5f       	subi	r16, 0xFD	; 253
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	9e 01       	movw	r18, r28
    22b8:	2f 5f       	subi	r18, 0xFF	; 255
    22ba:	3f 4f       	sbci	r19, 0xFF	; 255
    22bc:	82 dd       	rcall	.-1276   	; 0x1dc2 <NumTicksCalc>
    22be:	9c 01       	movw	r18, r24
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	d9 f5       	brne	.+118    	; 0x233a <SetPicomotorLocation+0xa8>
    22c4:	69 81       	ldd	r22, Y+1	; 0x01
    22c6:	7a 81       	ldd	r23, Y+2	; 0x02
    22c8:	9e 01       	movw	r18, r28
    22ca:	29 5f       	subi	r18, 0xF9	; 249
    22cc:	3f 4f       	sbci	r19, 0xFF	; 255
    22ce:	ae 01       	movw	r20, r28
    22d0:	4b 5f       	subi	r20, 0xFB	; 251
    22d2:	5f 4f       	sbci	r21, 0xFF	; 255
    22d4:	c7 01       	movw	r24, r14
    22d6:	16 de       	rcall	.-980    	; 0x1f04 <MoveIntervals>
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	99 f5       	brne	.+102    	; 0x2342 <SetPicomotorLocation+0xb0>
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	18 16       	cp	r1, r24
    22e2:	19 06       	cpc	r1, r25
    22e4:	a4 f4       	brge	.+40     	; 0x230e <SetPicomotorLocation+0x7c>
    22e6:	9e 01       	movw	r18, r28
    22e8:	29 5f       	subi	r18, 0xF9	; 249
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	ae 01       	movw	r20, r28
    22ee:	4b 5f       	subi	r20, 0xFB	; 251
    22f0:	5f 4f       	sbci	r21, 0xFF	; 255
    22f2:	61 e0       	ldi	r22, 0x01	; 1
    22f4:	70 e0       	ldi	r23, 0x00	; 0
    22f6:	c7 01       	movw	r24, r14
    22f8:	05 de       	rcall	.-1014   	; 0x1f04 <MoveIntervals>
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	11 f5       	brne	.+68     	; 0x2342 <SetPicomotorLocation+0xb0>
    22fe:	6b 81       	ldd	r22, Y+3	; 0x03
    2300:	7c 81       	ldd	r23, Y+4	; 0x04
    2302:	61 50       	subi	r22, 0x01	; 1
    2304:	71 09       	sbc	r23, r1
    2306:	c7 01       	movw	r24, r14
    2308:	0e 94 59 09 	call	0x12b2	; 0x12b2 <MovePicomotor>
    230c:	1a c0       	rjmp	.+52     	; 0x2342 <SetPicomotorLocation+0xb0>
    230e:	99 23       	and	r25, r25
    2310:	b4 f4       	brge	.+44     	; 0x233e <SetPicomotorLocation+0xac>
    2312:	9e 01       	movw	r18, r28
    2314:	29 5f       	subi	r18, 0xF9	; 249
    2316:	3f 4f       	sbci	r19, 0xFF	; 255
    2318:	ae 01       	movw	r20, r28
    231a:	4b 5f       	subi	r20, 0xFB	; 251
    231c:	5f 4f       	sbci	r21, 0xFF	; 255
    231e:	6f ef       	ldi	r22, 0xFF	; 255
    2320:	7f ef       	ldi	r23, 0xFF	; 255
    2322:	c7 01       	movw	r24, r14
    2324:	ef dd       	rcall	.-1058   	; 0x1f04 <MoveIntervals>
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	61 f4       	brne	.+24     	; 0x2342 <SetPicomotorLocation+0xb0>
    232a:	6b 81       	ldd	r22, Y+3	; 0x03
    232c:	7c 81       	ldd	r23, Y+4	; 0x04
    232e:	6f 5f       	subi	r22, 0xFF	; 255
    2330:	7f 4f       	sbci	r23, 0xFF	; 255
    2332:	c7 01       	movw	r24, r14
    2334:	0e 94 59 09 	call	0x12b2	; 0x12b2 <MovePicomotor>
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <SetPicomotorLocation+0xb0>
    233a:	93 2f       	mov	r25, r19
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <SetPicomotorLocation+0xb0>
    233e:	82 ed       	ldi	r24, 0xD2	; 210
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	28 96       	adiw	r28, 0x08	; 8
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	08 95       	ret

0000235c <ELECTRODE_ACTUATION_INIT>:
    235c:	2f 92       	push	r2
    235e:	3f 92       	push	r3
    2360:	4f 92       	push	r4
    2362:	5f 92       	push	r5
    2364:	6f 92       	push	r6
    2366:	7f 92       	push	r7
    2368:	8f 92       	push	r8
    236a:	9f 92       	push	r9
    236c:	af 92       	push	r10
    236e:	bf 92       	push	r11
    2370:	cf 92       	push	r12
    2372:	df 92       	push	r13
    2374:	ef 92       	push	r14
    2376:	ff 92       	push	r15
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	28 97       	sbiw	r28, 0x08	; 8
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	88 ee       	ldi	r24, 0xE8	; 232
    2392:	93 e0       	ldi	r25, 0x03	; 3
    2394:	a0 e0       	ldi	r26, 0x00	; 0
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	80 93 89 02 	sts	0x0289, r24
    239c:	90 93 8a 02 	sts	0x028A, r25
    23a0:	a0 93 8b 02 	sts	0x028B, r26
    23a4:	b0 93 8c 02 	sts	0x028C, r27
    23a8:	88 e9       	ldi	r24, 0x98	; 152
    23aa:	9f e1       	ldi	r25, 0x1F	; 31
    23ac:	a0 e0       	ldi	r26, 0x00	; 0
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	80 93 8d 02 	sts	0x028D, r24
    23b4:	90 93 8e 02 	sts	0x028E, r25
    23b8:	a0 93 8f 02 	sts	0x028F, r26
    23bc:	b0 93 90 02 	sts	0x0290, r27
    23c0:	0e 94 4a 08 	call	0x1094	; 0x1094 <ActivateHV>
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	09 f0       	breq	.+2      	; 0x23ca <ELECTRODE_ACTUATION_INIT+0x6e>
    23c8:	57 c1       	rjmp	.+686    	; 0x2678 <ELECTRODE_ACTUATION_INIT+0x31c>
    23ca:	00 91 01 02 	lds	r16, 0x0201
    23ce:	10 91 02 02 	lds	r17, 0x0202
    23d2:	20 91 03 02 	lds	r18, 0x0203
    23d6:	30 91 04 02 	lds	r19, 0x0204
    23da:	8f ef       	ldi	r24, 0xFF	; 255
    23dc:	9f e3       	ldi	r25, 0x3F	; 63
    23de:	a0 e0       	ldi	r26, 0x00	; 0
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	60 1b       	sub	r22, r16
    23e8:	71 0b       	sbc	r23, r17
    23ea:	82 0b       	sbc	r24, r18
    23ec:	93 0b       	sbc	r25, r19
    23ee:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    23f2:	6b 01       	movw	r12, r22
    23f4:	7c 01       	movw	r14, r24
    23f6:	60 91 fd 01 	lds	r22, 0x01FD
    23fa:	70 91 fe 01 	lds	r23, 0x01FE
    23fe:	80 91 ff 01 	lds	r24, 0x01FF
    2402:	90 91 00 02 	lds	r25, 0x0200
    2406:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    240a:	9b 01       	movw	r18, r22
    240c:	ac 01       	movw	r20, r24
    240e:	c7 01       	movw	r24, r14
    2410:	b6 01       	movw	r22, r12
    2412:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__divsf3>
    2416:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <floor>
    241a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <__fixsfsi>
    241e:	4b 01       	movw	r8, r22
    2420:	16 16       	cp	r1, r22
    2422:	17 06       	cpc	r1, r23
    2424:	0c f0       	brlt	.+2      	; 0x2428 <ELECTRODE_ACTUATION_INIT+0xcc>
    2426:	b4 c0       	rjmp	.+360    	; 0x2590 <ELECTRODE_ACTUATION_INIT+0x234>
    2428:	c1 2c       	mov	r12, r1
    242a:	d1 2c       	mov	r13, r1
    242c:	76 01       	movw	r14, r12
    242e:	0f 2e       	mov	r0, r31
    2430:	22 24       	eor	r2, r2
    2432:	2a 94       	dec	r2
    2434:	ff e3       	ldi	r31, 0x3F	; 63
    2436:	3f 2e       	mov	r3, r31
    2438:	f0 2d       	mov	r31, r0
    243a:	0f 2e       	mov	r0, r31
    243c:	f8 ec       	ldi	r31, 0xC8	; 200
    243e:	af 2e       	mov	r10, r31
    2440:	b1 2c       	mov	r11, r1
    2442:	f0 2d       	mov	r31, r0
    2444:	05 e3       	ldi	r16, 0x35	; 53
    2446:	13 e0       	ldi	r17, 0x03	; 3
    2448:	0f 2e       	mov	r0, r31
    244a:	44 24       	eor	r4, r4
    244c:	4a 94       	dec	r4
    244e:	ff e3       	ldi	r31, 0x3F	; 63
    2450:	5f 2e       	mov	r5, r31
    2452:	61 2c       	mov	r6, r1
    2454:	71 2c       	mov	r7, r1
    2456:	f0 2d       	mov	r31, r0
    2458:	ad ef       	ldi	r26, 0xFD	; 253
    245a:	b1 e0       	ldi	r27, 0x01	; 1
    245c:	2d 91       	ld	r18, X+
    245e:	3c 91       	ld	r19, X
    2460:	2c 9d       	mul	r18, r12
    2462:	c0 01       	movw	r24, r0
    2464:	2d 9d       	mul	r18, r13
    2466:	90 0d       	add	r25, r0
    2468:	3c 9d       	mul	r19, r12
    246a:	90 0d       	add	r25, r0
    246c:	11 24       	eor	r1, r1
    246e:	f1 01       	movw	r30, r2
    2470:	e8 1b       	sub	r30, r24
    2472:	f9 0b       	sbc	r31, r25
    2474:	cf 01       	movw	r24, r30
    2476:	0e 94 24 08 	call	0x1048	; 0x1048 <SetBias>
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	09 f0       	breq	.+2      	; 0x2480 <ELECTRODE_ACTUATION_INIT+0x124>
    247e:	fe c0       	rjmp	.+508    	; 0x267c <ELECTRODE_ACTUATION_INIT+0x320>
    2480:	ad ef       	ldi	r26, 0xFD	; 253
    2482:	b1 e0       	ldi	r27, 0x01	; 1
    2484:	2d 91       	ld	r18, X+
    2486:	3c 91       	ld	r19, X
    2488:	2c 9d       	mul	r18, r12
    248a:	c0 01       	movw	r24, r0
    248c:	2d 9d       	mul	r18, r13
    248e:	90 0d       	add	r25, r0
    2490:	3c 9d       	mul	r19, r12
    2492:	90 0d       	add	r25, r0
    2494:	11 24       	eor	r1, r1
    2496:	f1 01       	movw	r30, r2
    2498:	e8 1b       	sub	r30, r24
    249a:	f9 0b       	sbc	r31, r25
    249c:	cf 01       	movw	r24, r30
    249e:	0e 94 99 07 	call	0xf32	; 0xf32 <SetVoltage>
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	09 f0       	breq	.+2      	; 0x24a8 <ELECTRODE_ACTUATION_INIT+0x14c>
    24a6:	ec c0       	rjmp	.+472    	; 0x2680 <ELECTRODE_ACTUATION_INIT+0x324>
    24a8:	a9 e8       	ldi	r26, 0x89	; 137
    24aa:	b2 e0       	ldi	r27, 0x02	; 2
    24ac:	6d 91       	ld	r22, X+
    24ae:	7d 91       	ld	r23, X+
    24b0:	8d 91       	ld	r24, X+
    24b2:	9c 91       	ld	r25, X
    24b4:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    24b8:	6d 83       	std	Y+5, r22	; 0x05
    24ba:	7e 83       	std	Y+6, r23	; 0x06
    24bc:	8f 83       	std	Y+7, r24	; 0x07
    24be:	98 87       	std	Y+8, r25	; 0x08
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    24cc:	69 83       	std	Y+1, r22	; 0x01
    24ce:	7a 83       	std	Y+2, r23	; 0x02
    24d0:	8b 83       	std	Y+3, r24	; 0x03
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__cmpsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	4c f1       	brlt	.+82     	; 0x2536 <ELECTRODE_ACTUATION_INIT+0x1da>
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	3f ef       	ldi	r19, 0xFF	; 255
    24e8:	4f e7       	ldi	r20, 0x7F	; 127
    24ea:	57 e4       	ldi	r21, 0x47	; 71
    24ec:	69 81       	ldd	r22, Y+1	; 0x01
    24ee:	7a 81       	ldd	r23, Y+2	; 0x02
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__gesf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	b4 f4       	brge	.+44     	; 0x2528 <ELECTRODE_ACTUATION_INIT+0x1cc>
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e2       	ldi	r20, 0x20	; 32
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	6d 81       	ldd	r22, Y+5	; 0x05
    2506:	7e 81       	ldd	r23, Y+6	; 0x06
    2508:	8f 81       	ldd	r24, Y+7	; 0x07
    250a:	98 85       	ldd	r25, Y+8	; 0x08
    250c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    2510:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__fixunssfsi>
    2514:	61 15       	cp	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	99 f0       	breq	.+38     	; 0x2540 <ELECTRODE_ACTUATION_INIT+0x1e4>
    251a:	c5 01       	movw	r24, r10
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	f1 f7       	brne	.-4      	; 0x251c <ELECTRODE_ACTUATION_INIT+0x1c0>
    2520:	61 50       	subi	r22, 0x01	; 1
    2522:	71 09       	sbc	r23, r1
    2524:	d1 f7       	brne	.-12     	; 0x251a <ELECTRODE_ACTUATION_INIT+0x1be>
    2526:	0c c0       	rjmp	.+24     	; 0x2540 <ELECTRODE_ACTUATION_INIT+0x1e4>
    2528:	69 81       	ldd	r22, Y+1	; 0x01
    252a:	7a 81       	ldd	r23, Y+2	; 0x02
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__fixunssfsi>
    2534:	02 c0       	rjmp	.+4      	; 0x253a <ELECTRODE_ACTUATION_INIT+0x1de>
    2536:	61 e0       	ldi	r22, 0x01	; 1
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	cb 01       	movw	r24, r22
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <ELECTRODE_ACTUATION_INIT+0x1e0>
    2540:	e1 e9       	ldi	r30, 0x91	; 145
    2542:	f2 e0       	ldi	r31, 0x02	; 2
    2544:	ad ef       	ldi	r26, 0xFD	; 253
    2546:	b1 e0       	ldi	r27, 0x01	; 1
    2548:	6d 91       	ld	r22, X+
    254a:	7d 91       	ld	r23, X+
    254c:	8d 91       	ld	r24, X+
    254e:	9c 91       	ld	r25, X
    2550:	a7 01       	movw	r20, r14
    2552:	96 01       	movw	r18, r12
    2554:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <__mulsi3>
    2558:	a3 01       	movw	r20, r6
    255a:	92 01       	movw	r18, r4
    255c:	26 1b       	sub	r18, r22
    255e:	37 0b       	sbc	r19, r23
    2560:	48 0b       	sbc	r20, r24
    2562:	59 0b       	sbc	r21, r25
    2564:	da 01       	movw	r26, r20
    2566:	c9 01       	movw	r24, r18
    2568:	aa 27       	eor	r26, r26
    256a:	bb 27       	eor	r27, r27
    256c:	aa 60       	ori	r26, 0x0A	; 10
    256e:	ba 60       	ori	r27, 0x0A	; 10
    2570:	81 93       	st	Z+, r24
    2572:	91 93       	st	Z+, r25
    2574:	a1 93       	st	Z+, r26
    2576:	b1 93       	st	Z+, r27
    2578:	e0 17       	cp	r30, r16
    257a:	f1 07       	cpc	r31, r17
    257c:	19 f7       	brne	.-58     	; 0x2544 <ELECTRODE_ACTUATION_INIT+0x1e8>
    257e:	3f ef       	ldi	r19, 0xFF	; 255
    2580:	c3 1a       	sub	r12, r19
    2582:	d3 0a       	sbc	r13, r19
    2584:	e3 0a       	sbc	r14, r19
    2586:	f3 0a       	sbc	r15, r19
    2588:	c8 14       	cp	r12, r8
    258a:	d9 04       	cpc	r13, r9
    258c:	0c f4       	brge	.+2      	; 0x2590 <ELECTRODE_ACTUATION_INIT+0x234>
    258e:	64 cf       	rjmp	.-312    	; 0x2458 <ELECTRODE_ACTUATION_INIT+0xfc>
    2590:	80 91 01 02 	lds	r24, 0x0201
    2594:	90 91 02 02 	lds	r25, 0x0202
    2598:	0e 94 24 08 	call	0x1048	; 0x1048 <SetBias>
    259c:	00 97       	sbiw	r24, 0x00	; 0
    259e:	09 f0       	breq	.+2      	; 0x25a2 <ELECTRODE_ACTUATION_INIT+0x246>
    25a0:	71 c0       	rjmp	.+226    	; 0x2684 <ELECTRODE_ACTUATION_INIT+0x328>
    25a2:	80 91 01 02 	lds	r24, 0x0201
    25a6:	90 91 02 02 	lds	r25, 0x0202
    25aa:	0e 94 99 07 	call	0xf32	; 0xf32 <SetVoltage>
    25ae:	00 97       	sbiw	r24, 0x00	; 0
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <ELECTRODE_ACTUATION_INIT+0x258>
    25b2:	6a c0       	rjmp	.+212    	; 0x2688 <ELECTRODE_ACTUATION_INIT+0x32c>
    25b4:	60 91 89 02 	lds	r22, 0x0289
    25b8:	70 91 8a 02 	lds	r23, 0x028A
    25bc:	80 91 8b 02 	lds	r24, 0x028B
    25c0:	90 91 8c 02 	lds	r25, 0x028C
    25c4:	0e 94 98 1b 	call	0x3730	; 0x3730 <__floatsisf>
    25c8:	4b 01       	movw	r8, r22
    25ca:	5c 01       	movw	r10, r24
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a ef       	ldi	r20, 0xFA	; 250
    25d2:	54 e4       	ldi	r21, 0x44	; 68
    25d4:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    25d8:	6b 01       	movw	r12, r22
    25da:	7c 01       	movw	r14, r24
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e8       	ldi	r20, 0x80	; 128
    25e2:	5f e3       	ldi	r21, 0x3F	; 63
    25e4:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <__cmpsf2>
    25e8:	88 23       	and	r24, r24
    25ea:	2c f1       	brlt	.+74     	; 0x2636 <ELECTRODE_ACTUATION_INIT+0x2da>
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	3f ef       	ldi	r19, 0xFF	; 255
    25f0:	4f e7       	ldi	r20, 0x7F	; 127
    25f2:	57 e4       	ldi	r21, 0x47	; 71
    25f4:	c7 01       	movw	r24, r14
    25f6:	b6 01       	movw	r22, r12
    25f8:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__gesf2>
    25fc:	18 16       	cp	r1, r24
    25fe:	b4 f4       	brge	.+44     	; 0x262c <ELECTRODE_ACTUATION_INIT+0x2d0>
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	51 e4       	ldi	r21, 0x41	; 65
    2608:	c5 01       	movw	r24, r10
    260a:	b4 01       	movw	r22, r8
    260c:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    2610:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__fixunssfsi>
    2614:	61 15       	cp	r22, r1
    2616:	71 05       	cpc	r23, r1
    2618:	99 f0       	breq	.+38     	; 0x2640 <ELECTRODE_ACTUATION_INIT+0x2e4>
    261a:	28 ec       	ldi	r18, 0xC8	; 200
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	c9 01       	movw	r24, r18
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <ELECTRODE_ACTUATION_INIT+0x2c4>
    2624:	61 50       	subi	r22, 0x01	; 1
    2626:	71 09       	sbc	r23, r1
    2628:	d1 f7       	brne	.-12     	; 0x261e <ELECTRODE_ACTUATION_INIT+0x2c2>
    262a:	0a c0       	rjmp	.+20     	; 0x2640 <ELECTRODE_ACTUATION_INIT+0x2e4>
    262c:	c7 01       	movw	r24, r14
    262e:	b6 01       	movw	r22, r12
    2630:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__fixunssfsi>
    2634:	02 c0       	rjmp	.+4      	; 0x263a <ELECTRODE_ACTUATION_INIT+0x2de>
    2636:	61 e0       	ldi	r22, 0x01	; 1
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	cb 01       	movw	r24, r22
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	f1 f7       	brne	.-4      	; 0x263c <ELECTRODE_ACTUATION_INIT+0x2e0>
    2640:	e1 e9       	ldi	r30, 0x91	; 145
    2642:	f2 e0       	ldi	r31, 0x02	; 2
    2644:	25 e3       	ldi	r18, 0x35	; 53
    2646:	33 e0       	ldi	r19, 0x03	; 3
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	52 e0       	ldi	r21, 0x02	; 2
    264c:	bf 01       	movw	r22, r30
    264e:	fa 01       	movw	r30, r20
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	a2 81       	ldd	r26, Z+2	; 0x02
    2656:	b3 81       	ldd	r27, Z+3	; 0x03
    2658:	aa 27       	eor	r26, r26
    265a:	bb 27       	eor	r27, r27
    265c:	aa 60       	ori	r26, 0x0A	; 10
    265e:	ba 60       	ori	r27, 0x0A	; 10
    2660:	fb 01       	movw	r30, r22
    2662:	81 93       	st	Z+, r24
    2664:	91 93       	st	Z+, r25
    2666:	a1 93       	st	Z+, r26
    2668:	b1 93       	st	Z+, r27
    266a:	bf 01       	movw	r22, r30
    266c:	e2 17       	cp	r30, r18
    266e:	f3 07       	cpc	r31, r19
    2670:	71 f7       	brne	.-36     	; 0x264e <ELECTRODE_ACTUATION_INIT+0x2f2>
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	09 c0       	rjmp	.+18     	; 0x268a <ELECTRODE_ACTUATION_INIT+0x32e>
    2678:	28 2f       	mov	r18, r24
    267a:	07 c0       	rjmp	.+14     	; 0x268a <ELECTRODE_ACTUATION_INIT+0x32e>
    267c:	28 2f       	mov	r18, r24
    267e:	05 c0       	rjmp	.+10     	; 0x268a <ELECTRODE_ACTUATION_INIT+0x32e>
    2680:	28 2f       	mov	r18, r24
    2682:	03 c0       	rjmp	.+6      	; 0x268a <ELECTRODE_ACTUATION_INIT+0x32e>
    2684:	28 2f       	mov	r18, r24
    2686:	01 c0       	rjmp	.+2      	; 0x268a <ELECTRODE_ACTUATION_INIT+0x32e>
    2688:	28 2f       	mov	r18, r24
    268a:	82 2f       	mov	r24, r18
    268c:	28 96       	adiw	r28, 0x08	; 8
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	cd bf       	out	0x3d, r28	; 61
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	df 90       	pop	r13
    26a6:	cf 90       	pop	r12
    26a8:	bf 90       	pop	r11
    26aa:	af 90       	pop	r10
    26ac:	9f 90       	pop	r9
    26ae:	8f 90       	pop	r8
    26b0:	7f 90       	pop	r7
    26b2:	6f 90       	pop	r6
    26b4:	5f 90       	pop	r5
    26b6:	4f 90       	pop	r4
    26b8:	3f 90       	pop	r3
    26ba:	2f 90       	pop	r2
    26bc:	08 95       	ret

000026be <ActuateElectode>:
int ActuateElectode(int channel){
    26be:	8f 92       	push	r8
    26c0:	9f 92       	push	r9
    26c2:	af 92       	push	r10
    26c4:	bf 92       	push	r11
    26c6:	cf 92       	push	r12
    26c8:	df 92       	push	r13
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	8c 01       	movw	r16, r24
	int status;
	
	unsigned int memory_address = memory_ELECTRODE1 + channel;
    26d8:	ec 01       	movw	r28, r24
    26da:	ef 96       	adiw	r28, 0x3f	; 63
	
	// 1. Check voltage
	uint16_t limit = (uint16_t)REGISTER[memory_ELECTRODE_LIMIT_V];
    26dc:	60 91 8d 02 	lds	r22, 0x028D
    26e0:	70 91 8e 02 	lds	r23, 0x028E
	uint16_t bias = (uint16_t)REGISTER[memory_HV_BIAS];
    26e4:	20 91 01 02 	lds	r18, 0x0201
    26e8:	30 91 02 02 	lds	r19, 0x0202
	uint16_t voltage = REGISTER[memory_address] & 0xffff;
    26ec:	fe 01       	movw	r30, r28
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	ee 0f       	add	r30, r30
    26f4:	ff 1f       	adc	r31, r31
    26f6:	eb 56       	subi	r30, 0x6B	; 107
    26f8:	fe 4f       	sbci	r31, 0xFE	; 254
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	a2 81       	ldd	r26, Z+2	; 0x02
    2700:	b3 81       	ldd	r27, Z+3	; 0x03
    2702:	ac 01       	movw	r20, r24
	if(voltage > bias+limit) {
    2704:	f9 01       	movw	r30, r18
    2706:	e6 0f       	add	r30, r22
    2708:	f7 1f       	adc	r31, r23
    270a:	e8 17       	cp	r30, r24
    270c:	f9 07       	cpc	r31, r25
    270e:	b8 f4       	brcc	.+46     	; 0x273e <ActuateElectode+0x80>
		voltage = bias+limit;
		REGISTER[memory_address] = (REGISTER[memory_address] & 0xffff0000) | voltage;
    2710:	ae 01       	movw	r20, r28
    2712:	44 0f       	add	r20, r20
    2714:	55 1f       	adc	r21, r21
    2716:	44 0f       	add	r20, r20
    2718:	55 1f       	adc	r21, r21
    271a:	4b 56       	subi	r20, 0x6B	; 107
    271c:	5e 4f       	sbci	r21, 0xFE	; 254
    271e:	88 27       	eor	r24, r24
    2720:	99 27       	eor	r25, r25
    2722:	6f 01       	movw	r12, r30
    2724:	e1 2c       	mov	r14, r1
    2726:	f1 2c       	mov	r15, r1
    2728:	c8 2a       	or	r12, r24
    272a:	d9 2a       	or	r13, r25
    272c:	ea 2a       	or	r14, r26
    272e:	fb 2a       	or	r15, r27
    2730:	da 01       	movw	r26, r20
    2732:	cd 92       	st	X+, r12
    2734:	dd 92       	st	X+, r13
    2736:	ed 92       	st	X+, r14
    2738:	fc 92       	st	X, r15
    273a:	13 97       	sbiw	r26, 0x03	; 3
	// 1. Check voltage
	uint16_t limit = (uint16_t)REGISTER[memory_ELECTRODE_LIMIT_V];
	uint16_t bias = (uint16_t)REGISTER[memory_HV_BIAS];
	uint16_t voltage = REGISTER[memory_address] & 0xffff;
	if(voltage > bias+limit) {
		voltage = bias+limit;
    273c:	af 01       	movw	r20, r30
		REGISTER[memory_address] = (REGISTER[memory_address] & 0xffff0000) | voltage;
	}
	if(voltage < bias-limit) {
    273e:	26 1b       	sub	r18, r22
    2740:	37 0b       	sbc	r19, r23
    2742:	42 17       	cp	r20, r18
    2744:	53 07       	cpc	r21, r19
    2746:	c8 f4       	brcc	.+50     	; 0x277a <ActuateElectode+0xbc>
		voltage = bias-limit;
		REGISTER[memory_address] = (REGISTER[memory_address] & 0xffff0000) | voltage;
    2748:	fe 01       	movw	r30, r28
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	ee 0f       	add	r30, r30
    2750:	ff 1f       	adc	r31, r31
    2752:	eb 56       	subi	r30, 0x6B	; 107
    2754:	fe 4f       	sbci	r31, 0xFE	; 254
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	a2 81       	ldd	r26, Z+2	; 0x02
    275c:	b3 81       	ldd	r27, Z+3	; 0x03
    275e:	88 27       	eor	r24, r24
    2760:	99 27       	eor	r25, r25
    2762:	a9 01       	movw	r20, r18
    2764:	60 e0       	ldi	r22, 0x00	; 0
    2766:	70 e0       	ldi	r23, 0x00	; 0
    2768:	84 2b       	or	r24, r20
    276a:	95 2b       	or	r25, r21
    276c:	a6 2b       	or	r26, r22
    276e:	b7 2b       	or	r27, r23
    2770:	80 83       	st	Z, r24
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	a2 83       	std	Z+2, r26	; 0x02
    2776:	b3 83       	std	Z+3, r27	; 0x03
	if(voltage > bias+limit) {
		voltage = bias+limit;
		REGISTER[memory_address] = (REGISTER[memory_address] & 0xffff0000) | voltage;
	}
	if(voltage < bias-limit) {
		voltage = bias-limit;
    2778:	a9 01       	movw	r20, r18
		REGISTER[memory_address] = (REGISTER[memory_address] & 0xffff0000) | voltage;
	}
	
	// 2. Set desired voltage
	if (voltage != REGISTER[memory_HV]){
    277a:	ca 01       	movw	r24, r20
    277c:	a0 e0       	ldi	r26, 0x00	; 0
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	c0 90 f1 01 	lds	r12, 0x01F1
    2784:	d0 90 f2 01 	lds	r13, 0x01F2
    2788:	e0 90 f3 01 	lds	r14, 0x01F3
    278c:	f0 90 f4 01 	lds	r15, 0x01F4
    2790:	8c 15       	cp	r24, r12
    2792:	9d 05       	cpc	r25, r13
    2794:	ae 05       	cpc	r26, r14
    2796:	bf 05       	cpc	r27, r15
    2798:	09 f4       	brne	.+2      	; 0x279c <ActuateElectode+0xde>
    279a:	48 c0       	rjmp	.+144    	; 0x282c <ActuateElectode+0x16e>
		status = SetVoltage(voltage);  // Set DAC value
    279c:	ca 01       	movw	r24, r20
    279e:	0e 94 99 07 	call	0xf32	; 0xf32 <SetVoltage>
		if(status) return status;
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	09 f0       	breq	.+2      	; 0x27a8 <ActuateElectode+0xea>
    27a6:	b2 c0       	rjmp	.+356    	; 0x290c <ActuateElectode+0x24e>
		_delay_ms(REGISTER[memory_HV_TIMER]);
    27a8:	60 91 89 02 	lds	r22, 0x0289
    27ac:	70 91 8a 02 	lds	r23, 0x028A
    27b0:	80 91 8b 02 	lds	r24, 0x028B
    27b4:	90 91 8c 02 	lds	r25, 0x028C
    27b8:	bb d7       	rcall	.+3958   	; 0x3730 <__floatsisf>
    27ba:	4b 01       	movw	r8, r22
    27bc:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	4a ef       	ldi	r20, 0xFA	; 250
    27c4:	54 e4       	ldi	r21, 0x44	; 68
    27c6:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    27ca:	6b 01       	movw	r12, r22
    27cc:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0d d7       	rcall	.+3610   	; 0x35f2 <__cmpsf2>
    27d8:	88 23       	and	r24, r24
    27da:	1c f1       	brlt	.+70     	; 0x2822 <ActuateElectode+0x164>
		__ticks = 1;
	else if (__tmp > 65535)
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	c7 01       	movw	r24, r14
    27e6:	b6 01       	movw	r22, r12
    27e8:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__gesf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	ac f4       	brge	.+42     	; 0x281a <ActuateElectode+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e2       	ldi	r20, 0x20	; 32
    27f6:	51 e4       	ldi	r21, 0x41	; 65
    27f8:	c5 01       	movw	r24, r10
    27fa:	b4 01       	movw	r22, r8
    27fc:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    2800:	69 d7       	rcall	.+3794   	; 0x36d4 <__fixunssfsi>
		while(__ticks)
    2802:	61 15       	cp	r22, r1
    2804:	71 05       	cpc	r23, r1
    2806:	91 f0       	breq	.+36     	; 0x282c <ActuateElectode+0x16e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2808:	28 ec       	ldi	r18, 0xC8	; 200
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	c9 01       	movw	r24, r18
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <ActuateElectode+0x150>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	61 50       	subi	r22, 0x01	; 1
    2814:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	d1 f7       	brne	.-12     	; 0x280c <ActuateElectode+0x14e>
    2818:	09 c0       	rjmp	.+18     	; 0x282c <ActuateElectode+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281a:	c7 01       	movw	r24, r14
    281c:	b6 01       	movw	r22, r12
    281e:	5a d7       	rcall	.+3764   	; 0x36d4 <__fixunssfsi>
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <ActuateElectode+0x168>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    2822:	61 e0       	ldi	r22, 0x01	; 1
    2824:	70 e0       	ldi	r23, 0x00	; 0
    2826:	cb 01       	movw	r24, r22
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <ActuateElectode+0x16a>
	}
	
	// 3. Turn channel on
	status = ChannelOn(channel);  // Start charging channel
    282c:	c8 01       	movw	r24, r16
    282e:	33 d8       	rcall	.-3994   	; 0x1896 <ChannelOn>
	if(status) return status;
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	09 f0       	breq	.+2      	; 0x2836 <ActuateElectode+0x178>
    2834:	6d c0       	rjmp	.+218    	; 0x2910 <ActuateElectode+0x252>
	
	// 4. Charge electrode
	_delay_ms((REGISTER[memory_address] >> 24) & 0xff);
    2836:	fe 01       	movw	r30, r28
    2838:	ee 0f       	add	r30, r30
    283a:	ff 1f       	adc	r31, r31
    283c:	ee 0f       	add	r30, r30
    283e:	ff 1f       	adc	r31, r31
    2840:	eb 56       	subi	r30, 0x6B	; 107
    2842:	fe 4f       	sbci	r31, 0xFE	; 254
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	a2 81       	ldd	r26, Z+2	; 0x02
    284a:	b3 81       	ldd	r27, Z+3	; 0x03
    284c:	6b 2f       	mov	r22, r27
    284e:	77 27       	eor	r23, r23
    2850:	88 27       	eor	r24, r24
    2852:	99 27       	eor	r25, r25
    2854:	6d d7       	rcall	.+3802   	; 0x3730 <__floatsisf>
    2856:	4b 01       	movw	r8, r22
    2858:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	4a ef       	ldi	r20, 0xFA	; 250
    2860:	54 e4       	ldi	r21, 0x44	; 68
    2862:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    2866:	6b 01       	movw	r12, r22
    2868:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e8       	ldi	r20, 0x80	; 128
    2870:	5f e3       	ldi	r21, 0x3F	; 63
    2872:	bf d6       	rcall	.+3454   	; 0x35f2 <__cmpsf2>
    2874:	88 23       	and	r24, r24
    2876:	1c f1       	brlt	.+70     	; 0x28be <ActuateElectode+0x200>
		__ticks = 1;
	else if (__tmp > 65535)
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	3f ef       	ldi	r19, 0xFF	; 255
    287c:	4f e7       	ldi	r20, 0x7F	; 127
    287e:	57 e4       	ldi	r21, 0x47	; 71
    2880:	c7 01       	movw	r24, r14
    2882:	b6 01       	movw	r22, r12
    2884:	0e 94 9b 1c 	call	0x3936	; 0x3936 <__gesf2>
    2888:	18 16       	cp	r1, r24
    288a:	ac f4       	brge	.+42     	; 0x28b6 <ActuateElectode+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e2       	ldi	r20, 0x20	; 32
    2892:	51 e4       	ldi	r21, 0x41	; 65
    2894:	c5 01       	movw	r24, r10
    2896:	b4 01       	movw	r22, r8
    2898:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <__mulsf3>
    289c:	1b d7       	rcall	.+3638   	; 0x36d4 <__fixunssfsi>
		while(__ticks)
    289e:	61 15       	cp	r22, r1
    28a0:	71 05       	cpc	r23, r1
    28a2:	91 f0       	breq	.+36     	; 0x28c8 <ActuateElectode+0x20a>
    28a4:	28 ec       	ldi	r18, 0xC8	; 200
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	c9 01       	movw	r24, r18
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <ActuateElectode+0x1ec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	61 50       	subi	r22, 0x01	; 1
    28b0:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	d1 f7       	brne	.-12     	; 0x28a8 <ActuateElectode+0x1ea>
    28b4:	09 c0       	rjmp	.+18     	; 0x28c8 <ActuateElectode+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b6:	c7 01       	movw	r24, r14
    28b8:	b6 01       	movw	r22, r12
    28ba:	0c d7       	rcall	.+3608   	; 0x36d4 <__fixunssfsi>
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <ActuateElectode+0x204>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    28be:	61 e0       	ldi	r22, 0x01	; 1
    28c0:	70 e0       	ldi	r23, 0x00	; 0
    28c2:	cb 01       	movw	r24, r22
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <ActuateElectode+0x206>
	
	// 5. Turn channel off
	status = ChannelOff(channel);
    28c8:	c8 01       	movw	r24, r16
    28ca:	1f d8       	rcall	.-4034   	; 0x190a <ChannelOff>
	if(status) return status;
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	11 f5       	brne	.+68     	; 0x2914 <ActuateElectode+0x256>
	
	// 6. Update timer in electrode data
	REGISTER[memory_address] = ((REGISTER[memory_address] & 0xff0000) << 8) | (REGISTER[memory_address] & 0xffffff);
    28d0:	cc 0f       	add	r28, r28
    28d2:	dd 1f       	adc	r29, r29
    28d4:	cc 0f       	add	r28, r28
    28d6:	dd 1f       	adc	r29, r29
    28d8:	cb 56       	subi	r28, 0x6B	; 107
    28da:	de 4f       	sbci	r29, 0xFE	; 254
    28dc:	48 81       	ld	r20, Y
    28de:	59 81       	ldd	r21, Y+1	; 0x01
    28e0:	6a 81       	ldd	r22, Y+2	; 0x02
    28e2:	7b 81       	ldd	r23, Y+3	; 0x03
    28e4:	8a 01       	movw	r16, r20
    28e6:	9b 01       	movw	r18, r22
    28e8:	00 27       	eor	r16, r16
    28ea:	11 27       	eor	r17, r17
    28ec:	33 27       	eor	r19, r19
    28ee:	32 2f       	mov	r19, r18
    28f0:	21 2f       	mov	r18, r17
    28f2:	10 2f       	mov	r17, r16
    28f4:	00 27       	eor	r16, r16
    28f6:	77 27       	eor	r23, r23
    28f8:	40 2b       	or	r20, r16
    28fa:	51 2b       	or	r21, r17
    28fc:	62 2b       	or	r22, r18
    28fe:	73 2b       	or	r23, r19
    2900:	48 83       	st	Y, r20
    2902:	59 83       	std	Y+1, r21	; 0x01
    2904:	6a 83       	std	Y+2, r22	; 0x02
    2906:	7b 83       	std	Y+3, r23	; 0x03
	
	return OK;
    2908:	28 2f       	mov	r18, r24
    290a:	05 c0       	rjmp	.+10     	; 0x2916 <ActuateElectode+0x258>
	}
	
	// 2. Set desired voltage
	if (voltage != REGISTER[memory_HV]){
		status = SetVoltage(voltage);  // Set DAC value
		if(status) return status;
    290c:	28 2f       	mov	r18, r24
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <ActuateElectode+0x258>
		_delay_ms(REGISTER[memory_HV_TIMER]);
	}
	
	// 3. Turn channel on
	status = ChannelOn(channel);  // Start charging channel
	if(status) return status;
    2910:	28 2f       	mov	r18, r24
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <ActuateElectode+0x258>
	// 4. Charge electrode
	_delay_ms((REGISTER[memory_address] >> 24) & 0xff);
	
	// 5. Turn channel off
	status = ChannelOff(channel);
	if(status) return status;
    2914:	28 2f       	mov	r18, r24
	
	// 6. Update timer in electrode data
	REGISTER[memory_address] = ((REGISTER[memory_address] & 0xff0000) << 8) | (REGISTER[memory_address] & 0xffffff);
	
	return OK;
}
    2916:	82 2f       	mov	r24, r18
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    2928:	bf 90       	pop	r11
    292a:	af 90       	pop	r10
    292c:	9f 90       	pop	r9
    292e:	8f 90       	pop	r8
    2930:	08 95       	ret

00002932 <ParseCommand>:
#include "Interfaces.h"
#include "Drivers.h"
#include "Algorithms.h"

int ParseCommand(int port)
{
    2932:	4f 92       	push	r4
    2934:	5f 92       	push	r5
    2936:	6f 92       	push	r6
    2938:	7f 92       	push	r7
    293a:	8f 92       	push	r8
    293c:	9f 92       	push	r9
    293e:	af 92       	push	r10
    2940:	bf 92       	push	r11
    2942:	cf 92       	push	r12
    2944:	df 92       	push	r13
    2946:	ef 92       	push	r14
    2948:	ff 92       	push	r15
    294a:	0f 93       	push	r16
    294c:	1f 93       	push	r17
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	2c 97       	sbiw	r28, 0x0c	; 12
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	7c 01       	movw	r14, r24
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
}
    2964:	cd b6       	in	r12, 0x3d	; 61
    2966:	de b6       	in	r13, 0x3e	; 62

	}
	
	// Command
	unsigned int command = 0;
	for (II = 0; II < MessageCommandN; II++) command |= (Message[II] << 8*(MessageCommandN-II-1));
    2968:	e0 e9       	ldi	r30, 0x90	; 144
    296a:	f1 e0       	ldi	r31, 0x01	; 1
    296c:	20 81       	ld	r18, Z
    296e:	82 2f       	mov	r24, r18
    2970:	90 e0       	ldi	r25, 0x00	; 0
	
	// Data
	signed long data = 0;
	for (II = 0; II < MessageDataN; II++) data |= ((int32_t)Message[MessageCommandN+II] << 8*(MessageDataN-II-1));
    2972:	31 81       	ldd	r19, Z+1	; 0x01
    2974:	42 80       	ldd	r4, Z+2	; 0x02
    2976:	51 2c       	mov	r5, r1
    2978:	61 2c       	mov	r6, r1
    297a:	71 2c       	mov	r7, r1
    297c:	32 01       	movw	r6, r4
    297e:	55 24       	eor	r5, r5
    2980:	44 24       	eor	r4, r4
    2982:	73 2a       	or	r7, r19
    2984:	33 81       	ldd	r19, Z+3	; 0x03
    2986:	53 2a       	or	r5, r19
    2988:	34 81       	ldd	r19, Z+4	; 0x04
    298a:	43 2a       	or	r4, r19

	/*--------------------------------------------------
                           PRIVATE
	--------------------------------------------------*/
	// command = 0
	if (command	== 0){
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	51 f4       	brne	.+20     	; 0x29a4 <ParseCommand+0x72>
		int error = SendFeedback(port,0,0xAA12e570); //Send back AAReST written in Hex
    2990:	20 e7       	ldi	r18, 0x70	; 112
    2992:	35 ee       	ldi	r19, 0xE5	; 229
    2994:	42 e1       	ldi	r20, 0x12	; 18
    2996:	5a ea       	ldi	r21, 0xAA	; 170
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	70 e0       	ldi	r23, 0x00	; 0
    299c:	c7 01       	movw	r24, r14
    299e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    29a2:	35 c5       	rjmp	.+2666   	; 0x340e <ParseCommand+0xadc>

	/*--------------------------------------------------
                       REGISTER WRITE
	--------------------------------------------------*/
	// command = 1-149
	else if (command < 150)
    29a4:	86 39       	cpi	r24, 0x96	; 150
    29a6:	91 05       	cpc	r25, r1
    29a8:	a0 f4       	brcc	.+40     	; 0x29d2 <ParseCommand+0xa0>
	{	
		REGISTER[command] = data;
    29aa:	88 0f       	add	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	88 0f       	add	r24, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	fc 01       	movw	r30, r24
    29b4:	eb 56       	subi	r30, 0x6B	; 107
    29b6:	fe 4f       	sbci	r31, 0xFE	; 254
    29b8:	40 82       	st	Z, r4
    29ba:	51 82       	std	Z+1, r5	; 0x01
    29bc:	62 82       	std	Z+2, r6	; 0x02
    29be:	73 82       	std	Z+3, r7	; 0x03
		int error = SendFeedback(port,command,0);
    29c0:	62 2f       	mov	r22, r18
    29c2:	70 e0       	ldi	r23, 0x00	; 0
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	a9 01       	movw	r20, r18
    29ca:	c7 01       	movw	r24, r14
    29cc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    29d0:	1e c5       	rjmp	.+2620   	; 0x340e <ParseCommand+0xadc>

	/*--------------------------------------------------
                       REGISTER READ
	--------------------------------------------------*/
	// command = 150
	else if(command == 150){
    29d2:	86 39       	cpi	r24, 0x96	; 150
    29d4:	91 05       	cpc	r25, r1
    29d6:	81 f4       	brne	.+32     	; 0x29f8 <ParseCommand+0xc6>
		int error = SendFeedback(port,data,REGISTER[data]);
    29d8:	f2 01       	movw	r30, r4
    29da:	ee 0f       	add	r30, r30
    29dc:	ff 1f       	adc	r31, r31
    29de:	ee 0f       	add	r30, r30
    29e0:	ff 1f       	adc	r31, r31
    29e2:	eb 56       	subi	r30, 0x6B	; 107
    29e4:	fe 4f       	sbci	r31, 0xFE	; 254
    29e6:	20 81       	ld	r18, Z
    29e8:	31 81       	ldd	r19, Z+1	; 0x01
    29ea:	42 81       	ldd	r20, Z+2	; 0x02
    29ec:	53 81       	ldd	r21, Z+3	; 0x03
    29ee:	b2 01       	movw	r22, r4
    29f0:	c7 01       	movw	r24, r14
    29f2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    29f6:	0b c5       	rjmp	.+2582   	; 0x340e <ParseCommand+0xadc>
                          ACTIONS
	--------------------------------------------------*/
	// command = 151-239
	
	// RE-INITIALIZE USART0
	else if (command==151){
    29f8:	87 39       	cpi	r24, 0x97	; 151
    29fa:	91 05       	cpc	r25, r1
    29fc:	71 f4       	brne	.+28     	; 0x2a1a <ParseCommand+0xe8>
		int status = USART0_INIT(data);
    29fe:	c3 01       	movw	r24, r6
    2a00:	b2 01       	movw	r22, r4
    2a02:	0e 94 83 01 	call	0x306	; 0x306 <USART0_INIT>
		int error = SendFeedback(port,command,status);
    2a06:	9c 01       	movw	r18, r24
    2a08:	99 0f       	add	r25, r25
    2a0a:	44 0b       	sbc	r20, r20
    2a0c:	55 0b       	sbc	r21, r21
    2a0e:	67 e9       	ldi	r22, 0x97	; 151
    2a10:	70 e0       	ldi	r23, 0x00	; 0
    2a12:	c7 01       	movw	r24, r14
    2a14:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2a18:	fa c4       	rjmp	.+2548   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE USART1
	else if (command==152){
    2a1a:	88 39       	cpi	r24, 0x98	; 152
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	71 f4       	brne	.+28     	; 0x2a3c <ParseCommand+0x10a>
		int status = USART1_INIT(data);
    2a20:	c3 01       	movw	r24, r6
    2a22:	b2 01       	movw	r22, r4
    2a24:	0e 94 67 02 	call	0x4ce	; 0x4ce <USART1_INIT>
		int error = SendFeedback(port,command,status);
    2a28:	9c 01       	movw	r18, r24
    2a2a:	99 0f       	add	r25, r25
    2a2c:	44 0b       	sbc	r20, r20
    2a2e:	55 0b       	sbc	r21, r21
    2a30:	68 e9       	ldi	r22, 0x98	; 152
    2a32:	70 e0       	ldi	r23, 0x00	; 0
    2a34:	c7 01       	movw	r24, r14
    2a36:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2a3a:	e9 c4       	rjmp	.+2514   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE SPI
	else if (command==153){
    2a3c:	89 39       	cpi	r24, 0x99	; 153
    2a3e:	91 05       	cpc	r25, r1
    2a40:	71 f4       	brne	.+28     	; 0x2a5e <ParseCommand+0x12c>
		int status = SPI_INIT(data);
    2a42:	c3 01       	movw	r24, r6
    2a44:	b2 01       	movw	r22, r4
    2a46:	0e 94 99 02 	call	0x532	; 0x532 <SPI_INIT>
		int error = SendFeedback(port,command,status);
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	99 0f       	add	r25, r25
    2a4e:	44 0b       	sbc	r20, r20
    2a50:	55 0b       	sbc	r21, r21
    2a52:	69 e9       	ldi	r22, 0x99	; 153
    2a54:	70 e0       	ldi	r23, 0x00	; 0
    2a56:	c7 01       	movw	r24, r14
    2a58:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2a5c:	d8 c4       	rjmp	.+2480   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE I2C
	else if (command==154){
    2a5e:	8a 39       	cpi	r24, 0x9A	; 154
    2a60:	91 05       	cpc	r25, r1
    2a62:	71 f4       	brne	.+28     	; 0x2a80 <ParseCommand+0x14e>
		int status = I2C_INIT(data);
    2a64:	c3 01       	movw	r24, r6
    2a66:	b2 01       	movw	r22, r4
    2a68:	0e 94 61 03 	call	0x6c2	; 0x6c2 <I2C_INIT>
		int error = SendFeedback(port,command,status);
    2a6c:	9c 01       	movw	r18, r24
    2a6e:	99 0f       	add	r25, r25
    2a70:	44 0b       	sbc	r20, r20
    2a72:	55 0b       	sbc	r21, r21
    2a74:	6a e9       	ldi	r22, 0x9A	; 154
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	c7 01       	movw	r24, r14
    2a7a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2a7e:	c7 c4       	rjmp	.+2446   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE ADC
	else if (command==155){
    2a80:	8b 39       	cpi	r24, 0x9B	; 155
    2a82:	91 05       	cpc	r25, r1
    2a84:	71 f4       	brne	.+28     	; 0x2aa2 <ParseCommand+0x170>
		int status = ADC_INIT(data);
    2a86:	c3 01       	movw	r24, r6
    2a88:	b2 01       	movw	r22, r4
    2a8a:	0e 94 b1 05 	call	0xb62	; 0xb62 <ADC_INIT>
		int error = SendFeedback(port,command,status);
    2a8e:	9c 01       	movw	r18, r24
    2a90:	99 0f       	add	r25, r25
    2a92:	44 0b       	sbc	r20, r20
    2a94:	55 0b       	sbc	r21, r21
    2a96:	6b e9       	ldi	r22, 0x9B	; 155
    2a98:	70 e0       	ldi	r23, 0x00	; 0
    2a9a:	c7 01       	movw	r24, r14
    2a9c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2aa0:	b6 c4       	rjmp	.+2412   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE COMMUNICATIONS
	else if (command==156){
    2aa2:	8c 39       	cpi	r24, 0x9C	; 156
    2aa4:	91 05       	cpc	r25, r1
    2aa6:	71 f4       	brne	.+28     	; 0x2ac4 <ParseCommand+0x192>
		int status = COMMUNICATION_INIT(data);
    2aa8:	c3 01       	movw	r24, r6
    2aaa:	b2 01       	movw	r22, r4
    2aac:	0e 94 2f 06 	call	0xc5e	; 0xc5e <COMMUNICATION_INIT>
		int error = SendFeedback(port,command,status);
    2ab0:	9c 01       	movw	r18, r24
    2ab2:	99 0f       	add	r25, r25
    2ab4:	44 0b       	sbc	r20, r20
    2ab6:	55 0b       	sbc	r21, r21
    2ab8:	6c e9       	ldi	r22, 0x9C	; 156
    2aba:	70 e0       	ldi	r23, 0x00	; 0
    2abc:	c7 01       	movw	r24, r14
    2abe:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2ac2:	a5 c4       	rjmp	.+2378   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE POWER
	else if (command==160){
    2ac4:	80 3a       	cpi	r24, 0xA0	; 160
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	61 f4       	brne	.+24     	; 0x2ae2 <ParseCommand+0x1b0>
		int status = POWER_INIT();
    2aca:	0e 94 4f 07 	call	0xe9e	; 0xe9e <POWER_INIT>
		int error = SendFeedback(port,command,status);
    2ace:	9c 01       	movw	r18, r24
    2ad0:	99 0f       	add	r25, r25
    2ad2:	44 0b       	sbc	r20, r20
    2ad4:	55 0b       	sbc	r21, r21
    2ad6:	60 ea       	ldi	r22, 0xA0	; 160
    2ad8:	70 e0       	ldi	r23, 0x00	; 0
    2ada:	c7 01       	movw	r24, r14
    2adc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2ae0:	96 c4       	rjmp	.+2348   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// ACTIVATE ELECTRODE HV
	else if (command==161){
    2ae2:	81 3a       	cpi	r24, 0xA1	; 161
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	61 f4       	brne	.+24     	; 0x2b00 <ParseCommand+0x1ce>
		int status = ActivateHV();
    2ae8:	0e 94 4a 08 	call	0x1094	; 0x1094 <ActivateHV>
		int error = SendFeedback(port,command,status);
    2aec:	9c 01       	movw	r18, r24
    2aee:	99 0f       	add	r25, r25
    2af0:	44 0b       	sbc	r20, r20
    2af2:	55 0b       	sbc	r21, r21
    2af4:	61 ea       	ldi	r22, 0xA1	; 161
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	c7 01       	movw	r24, r14
    2afa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2afe:	87 c4       	rjmp	.+2318   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// DEACTIVATE ELECTRODE HV
	else if (command==162){
    2b00:	82 3a       	cpi	r24, 0xA2	; 162
    2b02:	91 05       	cpc	r25, r1
    2b04:	61 f4       	brne	.+24     	; 0x2b1e <ParseCommand+0x1ec>
		int status = DeactivateHV();
    2b06:	0e 94 bf 07 	call	0xf7e	; 0xf7e <DeactivateHV>
		int error = SendFeedback(port,command,status);
    2b0a:	9c 01       	movw	r18, r24
    2b0c:	99 0f       	add	r25, r25
    2b0e:	44 0b       	sbc	r20, r20
    2b10:	55 0b       	sbc	r21, r21
    2b12:	62 ea       	ldi	r22, 0xA2	; 162
    2b14:	70 e0       	ldi	r23, 0x00	; 0
    2b16:	c7 01       	movw	r24, r14
    2b18:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2b1c:	78 c4       	rjmp	.+2288   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// ACTIVATE PICOMOTOR HV
	else if (command==163){
    2b1e:	83 3a       	cpi	r24, 0xA3	; 163
    2b20:	91 05       	cpc	r25, r1
    2b22:	91 f4       	brne	.+36     	; 0x2b48 <ParseCommand+0x216>
		int status = ActivatePICOV(data);
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	45 28       	or	r4, r5
    2b28:	46 28       	or	r4, r6
    2b2a:	47 28       	or	r4, r7
    2b2c:	09 f4       	brne	.+2      	; 0x2b30 <ParseCommand+0x1fe>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	0e 94 8c 07 	call	0xf18	; 0xf18 <ActivatePICOV>
		int error = SendFeedback(port,command,status);
    2b34:	9c 01       	movw	r18, r24
    2b36:	99 0f       	add	r25, r25
    2b38:	44 0b       	sbc	r20, r20
    2b3a:	55 0b       	sbc	r21, r21
    2b3c:	63 ea       	ldi	r22, 0xA3	; 163
    2b3e:	70 e0       	ldi	r23, 0x00	; 0
    2b40:	c7 01       	movw	r24, r14
    2b42:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2b46:	63 c4       	rjmp	.+2246   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// DEACTIVATE PICOMOTOR HV
	else if (command==164){
    2b48:	84 3a       	cpi	r24, 0xA4	; 164
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	61 f4       	brne	.+24     	; 0x2b66 <ParseCommand+0x234>
		int status = DeactivatePICOV();
    2b4e:	0e 94 93 07 	call	0xf26	; 0xf26 <DeactivatePICOV>
		int error = SendFeedback(port,command,status);
    2b52:	9c 01       	movw	r18, r24
    2b54:	99 0f       	add	r25, r25
    2b56:	44 0b       	sbc	r20, r20
    2b58:	55 0b       	sbc	r21, r21
    2b5a:	64 ea       	ldi	r22, 0xA4	; 164
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	c7 01       	movw	r24, r14
    2b60:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2b64:	54 c4       	rjmp	.+2216   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// CHANGE VARIABLE HV
	else if (command==165){
    2b66:	85 3a       	cpi	r24, 0xA5	; 165
    2b68:	91 05       	cpc	r25, r1
    2b6a:	69 f4       	brne	.+26     	; 0x2b86 <ParseCommand+0x254>
		int status = SetVoltage(data);
    2b6c:	c2 01       	movw	r24, r4
    2b6e:	0e 94 99 07 	call	0xf32	; 0xf32 <SetVoltage>
		int error = SendFeedback(port,command,status);
    2b72:	9c 01       	movw	r18, r24
    2b74:	99 0f       	add	r25, r25
    2b76:	44 0b       	sbc	r20, r20
    2b78:	55 0b       	sbc	r21, r21
    2b7a:	65 ea       	ldi	r22, 0xA5	; 165
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	c7 01       	movw	r24, r14
    2b80:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2b84:	44 c4       	rjmp	.+2184   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// CHANGE BIAS HV
	else if (command==166){
    2b86:	86 3a       	cpi	r24, 0xA6	; 166
    2b88:	91 05       	cpc	r25, r1
    2b8a:	69 f4       	brne	.+26     	; 0x2ba6 <ParseCommand+0x274>
		int status = SetBias(data);
    2b8c:	c2 01       	movw	r24, r4
    2b8e:	0e 94 24 08 	call	0x1048	; 0x1048 <SetBias>
		int error = SendFeedback(port,command,status);
    2b92:	9c 01       	movw	r18, r24
    2b94:	99 0f       	add	r25, r25
    2b96:	44 0b       	sbc	r20, r20
    2b98:	55 0b       	sbc	r21, r21
    2b9a:	66 ea       	ldi	r22, 0xA6	; 166
    2b9c:	70 e0       	ldi	r23, 0x00	; 0
    2b9e:	c7 01       	movw	r24, r14
    2ba0:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2ba4:	34 c4       	rjmp	.+2152   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// ENABLE SUPPLY VOLTAGE
	else if (command==167){
    2ba6:	87 3a       	cpi	r24, 0xA7	; 167
    2ba8:	91 05       	cpc	r25, r1
    2baa:	99 f4       	brne	.+38     	; 0x2bd2 <ParseCommand+0x2a0>
}
int EnableSV(int port, bool state)
{
	// PORT = FIVE_V_E or TWELVE_V_E or TWO_EIGHT_V_E
	// State = true means enable // State = false means disable
	if(state) PORT_SV |= (1<<port);
    2bac:	25 b1       	in	r18, 0x05	; 5
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <ParseCommand+0x286>
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	4a 94       	dec	r4
    2bba:	e2 f7       	brpl	.-8      	; 0x2bb4 <ParseCommand+0x282>
    2bbc:	82 2b       	or	r24, r18
    2bbe:	85 b9       	out	0x05, r24	; 5
		int status = EnableSV(data,true);
		int error = SendFeedback(port,command,status);
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	a9 01       	movw	r20, r18
    2bc6:	67 ea       	ldi	r22, 0xA7	; 167
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	c7 01       	movw	r24, r14
    2bcc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2bd0:	1e c4       	rjmp	.+2108   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// DISABLE SUPPLY VOLTAGE
	else if (command==168){
    2bd2:	88 3a       	cpi	r24, 0xA8	; 168
    2bd4:	91 05       	cpc	r25, r1
    2bd6:	a1 f4       	brne	.+40     	; 0x2c00 <ParseCommand+0x2ce>
	else PORT_SV &= ~(1<<port);
    2bd8:	25 b1       	in	r18, 0x05	; 5
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <ParseCommand+0x2b2>
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	4a 94       	dec	r4
    2be6:	e2 f7       	brpl	.-8      	; 0x2be0 <ParseCommand+0x2ae>
    2be8:	80 95       	com	r24
    2bea:	82 23       	and	r24, r18
    2bec:	85 b9       	out	0x05, r24	; 5
		int status = EnableSV(data,false);
		int error = SendFeedback(port,command,status);
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	a9 01       	movw	r20, r18
    2bf4:	68 ea       	ldi	r22, 0xA8	; 168
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	c7 01       	movw	r24, r14
    2bfa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2bfe:	07 c4       	rjmp	.+2062   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// ENABLE CURRENT LIMITER
	else if (command==169){
    2c00:	89 3a       	cpi	r24, 0xA9	; 169
    2c02:	91 05       	cpc	r25, r1
    2c04:	a1 f4       	brne	.+40     	; 0x2c2e <ParseCommand+0x2fc>
}
int EnableCL(int port, bool state)
{
	// PORT = CL1_E or CL2_E or CL3_E
	// State = true means enable // State = false means disable
	if(state) PORT_CL_E &= ~(1<<port);
    2c06:	28 b1       	in	r18, 0x08	; 8
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <ParseCommand+0x2e0>
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	4a 94       	dec	r4
    2c14:	e2 f7       	brpl	.-8      	; 0x2c0e <ParseCommand+0x2dc>
    2c16:	80 95       	com	r24
    2c18:	82 23       	and	r24, r18
    2c1a:	88 b9       	out	0x08, r24	; 8
		int status = EnableCL(data,true);
		int error = SendFeedback(port,command,status);
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	a9 01       	movw	r20, r18
    2c22:	69 ea       	ldi	r22, 0xA9	; 169
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	c7 01       	movw	r24, r14
    2c28:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2c2c:	f0 c3       	rjmp	.+2016   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// DISABLE CURRENT LIMITER
	else if (command==170){
    2c2e:	8a 3a       	cpi	r24, 0xAA	; 170
    2c30:	91 05       	cpc	r25, r1
    2c32:	99 f4       	brne	.+38     	; 0x2c5a <ParseCommand+0x328>
	else PORT_CL_E |= (1<<port);
    2c34:	28 b1       	in	r18, 0x08	; 8
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <ParseCommand+0x30e>
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	4a 94       	dec	r4
    2c42:	e2 f7       	brpl	.-8      	; 0x2c3c <ParseCommand+0x30a>
    2c44:	82 2b       	or	r24, r18
    2c46:	88 b9       	out	0x08, r24	; 8
		int status = EnableCL(data,false);
		int error = SendFeedback(port,command,status);
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	a9 01       	movw	r20, r18
    2c4e:	6a ea       	ldi	r22, 0xAA	; 170
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	c7 01       	movw	r24, r14
    2c54:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2c58:	da c3       	rjmp	.+1972   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// MEASURE FB VOLTAGE
	else if (command==171){
    2c5a:	8b 3a       	cpi	r24, 0xAB	; 171
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	a9 f4       	brne	.+42     	; 0x2c8a <ParseCommand+0x358>
		int val;
		int status = MeasureV(data,&val);
    2c60:	be 01       	movw	r22, r28
    2c62:	6f 5f       	subi	r22, 0xFF	; 255
    2c64:	7f 4f       	sbci	r23, 0xFF	; 255
    2c66:	c2 01       	movw	r24, r4
    2c68:	0e 94 59 08 	call	0x10b2	; 0x10b2 <MeasureV>
		int error = SendFeedback(port,command,status);
    2c6c:	9c 01       	movw	r18, r24
    2c6e:	99 0f       	add	r25, r25
    2c70:	44 0b       	sbc	r20, r20
    2c72:	55 0b       	sbc	r21, r21
    2c74:	6b ea       	ldi	r22, 0xAB	; 171
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	c7 01       	movw	r24, r14
    2c7a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <ParseCommand+0x352>
    2c82:	c5 c3       	rjmp	.+1930   	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	c2 c3       	rjmp	.+1924   	; 0x340e <ParseCommand+0xadc>
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	
	// CURRENT LIMITER FAULT
	else if (command==172){
    2c8a:	8c 3a       	cpi	r24, 0xAC	; 172
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	69 f4       	brne	.+26     	; 0x2caa <ParseCommand+0x378>
		int status = IsCLFault(data);
    2c90:	c2 01       	movw	r24, r4
    2c92:	0e 94 78 08 	call	0x10f0	; 0x10f0 <IsCLFault>
		int error = SendFeedback(port,command,status);
    2c96:	28 2f       	mov	r18, r24
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	40 e0       	ldi	r20, 0x00	; 0
    2c9c:	50 e0       	ldi	r21, 0x00	; 0
    2c9e:	6c ea       	ldi	r22, 0xAC	; 172
    2ca0:	70 e0       	ldi	r23, 0x00	; 0
    2ca2:	c7 01       	movw	r24, r14
    2ca4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2ca8:	b2 c3       	rjmp	.+1892   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE SEPERATION DEVICE
	else if (command==175){
    2caa:	8f 3a       	cpi	r24, 0xAF	; 175
    2cac:	91 05       	cpc	r25, r1
    2cae:	61 f4       	brne	.+24     	; 0x2cc8 <ParseCommand+0x396>
		int status = SEP_DEV_INIT();
    2cb0:	0e 94 91 08 	call	0x1122	; 0x1122 <SEP_DEV_INIT>
		int error = SendFeedback(port,command,status);
    2cb4:	9c 01       	movw	r18, r24
    2cb6:	99 0f       	add	r25, r25
    2cb8:	44 0b       	sbc	r20, r20
    2cba:	55 0b       	sbc	r21, r21
    2cbc:	6f ea       	ldi	r22, 0xAF	; 175
    2cbe:	70 e0       	ldi	r23, 0x00	; 0
    2cc0:	c7 01       	movw	r24, r14
    2cc2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2cc6:	a3 c3       	rjmp	.+1862   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RELEASE SEPERATION DEVICE
	else if (command==176){
    2cc8:	80 3b       	cpi	r24, 0xB0	; 176
    2cca:	91 05       	cpc	r25, r1
    2ccc:	71 f4       	brne	.+28     	; 0x2cea <ParseCommand+0x3b8>
		int status = ReleaseMirror(data);
    2cce:	c3 01       	movw	r24, r6
    2cd0:	b2 01       	movw	r22, r4
    2cd2:	0e 94 9c 08 	call	0x1138	; 0x1138 <ReleaseMirror>
		int error = SendFeedback(port,command,status);
    2cd6:	9c 01       	movw	r18, r24
    2cd8:	99 0f       	add	r25, r25
    2cda:	44 0b       	sbc	r20, r20
    2cdc:	55 0b       	sbc	r21, r21
    2cde:	60 eb       	ldi	r22, 0xB0	; 176
    2ce0:	70 e0       	ldi	r23, 0x00	; 0
    2ce2:	c7 01       	movw	r24, r14
    2ce4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2ce8:	92 c3       	rjmp	.+1828   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// SEPERATION DEVICE OFF
	else if (command==177){
    2cea:	81 3b       	cpi	r24, 0xB1	; 177
    2cec:	91 05       	cpc	r25, r1
    2cee:	61 f4       	brne	.+24     	; 0x2d08 <ParseCommand+0x3d6>
		int status = IsMirrorConstrained();
    2cf0:	0e 94 97 08 	call	0x112e	; 0x112e <IsMirrorConstrained>
		int error = SendFeedback(port,command,status);
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	50 e0       	ldi	r21, 0x00	; 0
    2cfc:	61 eb       	ldi	r22, 0xB1	; 177
    2cfe:	70 e0       	ldi	r23, 0x00	; 0
    2d00:	c7 01       	movw	r24, r14
    2d02:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2d06:	83 c3       	rjmp	.+1798   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE PICOMOTORS DRIVER
	else if (command==179){
    2d08:	83 3b       	cpi	r24, 0xB3	; 179
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	61 f4       	brne	.+24     	; 0x2d26 <ParseCommand+0x3f4>
		int status = PICOMOTORS_INIT();
    2d0e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PICOMOTORS_INIT>
		int error = SendFeedback(port,command,status);
    2d12:	9c 01       	movw	r18, r24
    2d14:	99 0f       	add	r25, r25
    2d16:	44 0b       	sbc	r20, r20
    2d18:	55 0b       	sbc	r21, r21
    2d1a:	63 eb       	ldi	r22, 0xB3	; 179
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	c7 01       	movw	r24, r14
    2d20:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2d24:	74 c3       	rjmp	.+1768   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE PICOMOTORS ESTIMATION ALGORITHM
	else if (command==180){
    2d26:	84 3b       	cpi	r24, 0xB4	; 180
    2d28:	91 05       	cpc	r25, r1
    2d2a:	69 f4       	brne	.+26     	; 0x2d46 <ParseCommand+0x414>
		int status = PICOMOTOR_ESTIMATION_INIT(data);
    2d2c:	c2 01       	movw	r24, r4
    2d2e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <PICOMOTOR_ESTIMATION_INIT>
		int error = SendFeedback(port,command,status);
    2d32:	9c 01       	movw	r18, r24
    2d34:	99 0f       	add	r25, r25
    2d36:	44 0b       	sbc	r20, r20
    2d38:	55 0b       	sbc	r21, r21
    2d3a:	64 eb       	ldi	r22, 0xB4	; 180
    2d3c:	70 e0       	ldi	r23, 0x00	; 0
    2d3e:	c7 01       	movw	r24, r14
    2d40:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2d44:	64 c3       	rjmp	.+1736   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// LEFT PICOMOTOR
	else if(command==181){ // MOVE BY TICKS
    2d46:	85 3b       	cpi	r24, 0xB5	; 181
    2d48:	91 05       	cpc	r25, r1
    2d4a:	79 f4       	brne	.+30     	; 0x2d6a <ParseCommand+0x438>
		int status = MovePicomotor(0,data);
    2d4c:	b2 01       	movw	r22, r4
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	0e 94 59 09 	call	0x12b2	; 0x12b2 <MovePicomotor>
		int error = SendFeedback(port,command,status);
    2d56:	9c 01       	movw	r18, r24
    2d58:	99 0f       	add	r25, r25
    2d5a:	44 0b       	sbc	r20, r20
    2d5c:	55 0b       	sbc	r21, r21
    2d5e:	65 eb       	ldi	r22, 0xB5	; 181
    2d60:	70 e0       	ldi	r23, 0x00	; 0
    2d62:	c7 01       	movw	r24, r14
    2d64:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2d68:	52 c3       	rjmp	.+1700   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==182){ // MOVE BY INTERVALS
    2d6a:	86 3b       	cpi	r24, 0xB6	; 182
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	c9 f4       	brne	.+50     	; 0x2da2 <ParseCommand+0x470>
		int MovedIntervals, MovedTicks;
		int status = MoveIntervals(0, data, &MovedIntervals, &MovedTicks);
    2d70:	9e 01       	movw	r18, r28
    2d72:	2f 5f       	subi	r18, 0xFF	; 255
    2d74:	3f 4f       	sbci	r19, 0xFF	; 255
    2d76:	ae 01       	movw	r20, r28
    2d78:	4b 5f       	subi	r20, 0xFB	; 251
    2d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d7c:	b2 01       	movw	r22, r4
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	c0 d8       	rcall	.-3712   	; 0x1f04 <MoveIntervals>
		int error = SendFeedback(port,command,status);
    2d84:	9c 01       	movw	r18, r24
    2d86:	99 0f       	add	r25, r25
    2d88:	44 0b       	sbc	r20, r20
    2d8a:	55 0b       	sbc	r21, r21
    2d8c:	66 eb       	ldi	r22, 0xB6	; 182
    2d8e:	70 e0       	ldi	r23, 0x00	; 0
    2d90:	c7 01       	movw	r24, r14
    2d92:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    2d96:	00 97       	sbiw	r24, 0x00	; 0
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <ParseCommand+0x46a>
    2d9a:	39 c3       	rjmp	.+1650   	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	36 c3       	rjmp	.+1644   	; 0x340e <ParseCommand+0xadc>
		int MovedIntervals, MovedTicks;
		int status = MoveIntervals(0, data, &MovedIntervals, &MovedTicks);
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	else if(command==183){ // MOVE BY NM (THROUGH ALGORITHM)
    2da2:	87 3b       	cpi	r24, 0xB7	; 183
    2da4:	91 05       	cpc	r25, r1
    2da6:	91 f4       	brne	.+36     	; 0x2dcc <ParseCommand+0x49a>
		int status = SetPicomotorLocation(0, REGISTER[memory_PICO0_LOCATION], data);
    2da8:	60 91 59 02 	lds	r22, 0x0259
    2dac:	70 91 5a 02 	lds	r23, 0x025A
    2db0:	a2 01       	movw	r20, r4
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	6d da       	rcall	.-2854   	; 0x2292 <SetPicomotorLocation>
		int error = SendFeedback(port,command,status);
    2db8:	9c 01       	movw	r18, r24
    2dba:	99 0f       	add	r25, r25
    2dbc:	44 0b       	sbc	r20, r20
    2dbe:	55 0b       	sbc	r21, r21
    2dc0:	67 eb       	ldi	r22, 0xB7	; 183
    2dc2:	70 e0       	ldi	r23, 0x00	; 0
    2dc4:	c7 01       	movw	r24, r14
    2dc6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2dca:	21 c3       	rjmp	.+1602   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==184){ // INITIALIZE
    2dcc:	88 3b       	cpi	r24, 0xB8	; 184
    2dce:	91 05       	cpc	r25, r1
    2dd0:	49 f4       	brne	.+18     	; 0x2de4 <ParseCommand+0x4b2>
		int status = InitializePicomotor(0, data);
		int error = SendFeedback(port,command,status);
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	a9 01       	movw	r20, r18
    2dd8:	68 eb       	ldi	r22, 0xB8	; 184
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	c7 01       	movw	r24, r14
    2dde:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2de2:	15 c3       	rjmp	.+1578   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==185){ // CALIBRATE
    2de4:	89 3b       	cpi	r24, 0xB9	; 185
    2de6:	91 05       	cpc	r25, r1
    2de8:	09 f0       	breq	.+2      	; 0x2dec <ParseCommand+0x4ba>
    2dea:	40 c0       	rjmp	.+128    	; 0x2e6c <ParseCommand+0x53a>
		float mean, std;
		int status = CalibratePicomotor(0, data, &mean, &std);
    2dec:	9e 01       	movw	r18, r28
    2dee:	2f 5f       	subi	r18, 0xFF	; 255
    2df0:	3f 4f       	sbci	r19, 0xFF	; 255
    2df2:	ae 01       	movw	r20, r28
    2df4:	4b 5f       	subi	r20, 0xFB	; 251
    2df6:	5f 4f       	sbci	r21, 0xFF	; 255
    2df8:	b2 01       	movw	r22, r4
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	43 d9       	rcall	.-3450   	; 0x2086 <CalibratePicomotor>
    2e00:	5c 01       	movw	r10, r24
		if(!status){
    2e02:	89 2b       	or	r24, r25
    2e04:	21 f5       	brne	.+72     	; 0x2e4e <ParseCommand+0x51c>
			REGISTER[memory_PICO0_MEAN] =  (long)(mean*1000000);
    2e06:	20 e0       	ldi	r18, 0x00	; 0
    2e08:	34 e2       	ldi	r19, 0x24	; 36
    2e0a:	44 e7       	ldi	r20, 0x74	; 116
    2e0c:	59 e4       	ldi	r21, 0x49	; 73
    2e0e:	6d 81       	ldd	r22, Y+5	; 0x05
    2e10:	7e 81       	ldd	r23, Y+6	; 0x06
    2e12:	8f 81       	ldd	r24, Y+7	; 0x07
    2e14:	98 85       	ldd	r25, Y+8	; 0x08
    2e16:	d8 d5       	rcall	.+2992   	; 0x39c8 <__mulsf3>
    2e18:	58 d4       	rcall	.+2224   	; 0x36ca <__fixsfsi>
    2e1a:	60 93 71 02 	sts	0x0271, r22
    2e1e:	70 93 72 02 	sts	0x0272, r23
    2e22:	80 93 73 02 	sts	0x0273, r24
    2e26:	90 93 74 02 	sts	0x0274, r25
			REGISTER[memory_PICO0_STD] =  (long)(  std*1000000);
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	34 e2       	ldi	r19, 0x24	; 36
    2e2e:	44 e7       	ldi	r20, 0x74	; 116
    2e30:	59 e4       	ldi	r21, 0x49	; 73
    2e32:	69 81       	ldd	r22, Y+1	; 0x01
    2e34:	7a 81       	ldd	r23, Y+2	; 0x02
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3a:	c6 d5       	rcall	.+2956   	; 0x39c8 <__mulsf3>
    2e3c:	46 d4       	rcall	.+2188   	; 0x36ca <__fixsfsi>
    2e3e:	60 93 7d 02 	sts	0x027D, r22
    2e42:	70 93 7e 02 	sts	0x027E, r23
    2e46:	80 93 7f 02 	sts	0x027F, r24
    2e4a:	90 93 80 02 	sts	0x0280, r25
		}
		int error = SendFeedback(port,command,status);
    2e4e:	95 01       	movw	r18, r10
    2e50:	bb 0c       	add	r11, r11
    2e52:	44 0b       	sbc	r20, r20
    2e54:	55 0b       	sbc	r21, r21
    2e56:	69 eb       	ldi	r22, 0xB9	; 185
    2e58:	70 e0       	ldi	r23, 0x00	; 0
    2e5a:	c7 01       	movw	r24, r14
    2e5c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <ParseCommand+0x534>
    2e64:	d4 c2       	rjmp	.+1448   	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	d1 c2       	rjmp	.+1442   	; 0x340e <ParseCommand+0xadc>
			REGISTER[memory_PICO0_STD] =  (long)(  std*1000000);
		}
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	else if(command==186){ // MEASURE ENCODER STATE
    2e6c:	8a 3b       	cpi	r24, 0xBA	; 186
    2e6e:	91 05       	cpc	r25, r1
    2e70:	b1 f4       	brne	.+44     	; 0x2e9e <ParseCommand+0x56c>
		int state;
		int status = GetEncoderState(0, &state);
    2e72:	be 01       	movw	r22, r28
    2e74:	6f 5f       	subi	r22, 0xFF	; 255
    2e76:	7f 4f       	sbci	r23, 0xFF	; 255
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 af 0a 	call	0x155e	; 0x155e <GetEncoderState>
		int error = SendFeedback(port,command,status);
    2e80:	9c 01       	movw	r18, r24
    2e82:	99 0f       	add	r25, r25
    2e84:	44 0b       	sbc	r20, r20
    2e86:	55 0b       	sbc	r21, r21
    2e88:	6a eb       	ldi	r22, 0xBA	; 186
    2e8a:	70 e0       	ldi	r23, 0x00	; 0
    2e8c:	c7 01       	movw	r24, r14
    2e8e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <ParseCommand+0x566>
    2e96:	bb c2       	rjmp	.+1398   	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    2e98:	80 e0       	ldi	r24, 0x00	; 0
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	b8 c2       	rjmp	.+1392   	; 0x340e <ParseCommand+0xadc>
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	
	// RIGHT PICOMOTOR
	else if(command==191){ // MOVE BY TICKS
    2e9e:	8f 3b       	cpi	r24, 0xBF	; 191
    2ea0:	91 05       	cpc	r25, r1
    2ea2:	79 f4       	brne	.+30     	; 0x2ec2 <ParseCommand+0x590>
		int status = MovePicomotor(1,data);
    2ea4:	b2 01       	movw	r22, r4
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	0e 94 59 09 	call	0x12b2	; 0x12b2 <MovePicomotor>
		int error = SendFeedback(port,command,status);
    2eae:	9c 01       	movw	r18, r24
    2eb0:	99 0f       	add	r25, r25
    2eb2:	44 0b       	sbc	r20, r20
    2eb4:	55 0b       	sbc	r21, r21
    2eb6:	6f eb       	ldi	r22, 0xBF	; 191
    2eb8:	70 e0       	ldi	r23, 0x00	; 0
    2eba:	c7 01       	movw	r24, r14
    2ebc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2ec0:	a6 c2       	rjmp	.+1356   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==192){ // MOVE BY INTERVALS
    2ec2:	80 3c       	cpi	r24, 0xC0	; 192
    2ec4:	91 05       	cpc	r25, r1
    2ec6:	c9 f4       	brne	.+50     	; 0x2efa <ParseCommand+0x5c8>
		int MovedIntervals, MovedTicks;
		int status = MoveIntervals(1, data, &MovedIntervals, &MovedTicks);
    2ec8:	9e 01       	movw	r18, r28
    2eca:	2f 5f       	subi	r18, 0xFF	; 255
    2ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ece:	ae 01       	movw	r20, r28
    2ed0:	4b 5f       	subi	r20, 0xFB	; 251
    2ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed4:	b2 01       	movw	r22, r4
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	14 d8       	rcall	.-4056   	; 0x1f04 <MoveIntervals>
		int error = SendFeedback(port,command,status);
    2edc:	9c 01       	movw	r18, r24
    2ede:	99 0f       	add	r25, r25
    2ee0:	44 0b       	sbc	r20, r20
    2ee2:	55 0b       	sbc	r21, r21
    2ee4:	60 ec       	ldi	r22, 0xC0	; 192
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	c7 01       	movw	r24, r14
    2eea:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <ParseCommand+0x5c2>
    2ef2:	8d c2       	rjmp	.+1306   	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	8a c2       	rjmp	.+1300   	; 0x340e <ParseCommand+0xadc>
		int MovedIntervals, MovedTicks;
		int status = MoveIntervals(1, data, &MovedIntervals, &MovedTicks);
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	else if(command==193){ // MOVE BY NM (THROUGH ALGORITHM)
    2efa:	81 3c       	cpi	r24, 0xC1	; 193
    2efc:	91 05       	cpc	r25, r1
    2efe:	91 f4       	brne	.+36     	; 0x2f24 <ParseCommand+0x5f2>
		int status = SetPicomotorLocation(1, REGISTER[memory_PICO1_LOCATION], data);
    2f00:	60 91 5d 02 	lds	r22, 0x025D
    2f04:	70 91 5e 02 	lds	r23, 0x025E
    2f08:	a2 01       	movw	r20, r4
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	c1 d9       	rcall	.-3198   	; 0x2292 <SetPicomotorLocation>
		int error = SendFeedback(port,command,status);
    2f10:	9c 01       	movw	r18, r24
    2f12:	99 0f       	add	r25, r25
    2f14:	44 0b       	sbc	r20, r20
    2f16:	55 0b       	sbc	r21, r21
    2f18:	61 ec       	ldi	r22, 0xC1	; 193
    2f1a:	70 e0       	ldi	r23, 0x00	; 0
    2f1c:	c7 01       	movw	r24, r14
    2f1e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2f22:	75 c2       	rjmp	.+1258   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==194){ // INITIALIZE
    2f24:	82 3c       	cpi	r24, 0xC2	; 194
    2f26:	91 05       	cpc	r25, r1
    2f28:	49 f4       	brne	.+18     	; 0x2f3c <ParseCommand+0x60a>
		int status = InitializePicomotor(1, data);
		int error = SendFeedback(port,command,status);
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	a9 01       	movw	r20, r18
    2f30:	62 ec       	ldi	r22, 0xC2	; 194
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	c7 01       	movw	r24, r14
    2f36:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    2f3a:	69 c2       	rjmp	.+1234   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==195){ // CALIBRATE
    2f3c:	83 3c       	cpi	r24, 0xC3	; 195
    2f3e:	91 05       	cpc	r25, r1
    2f40:	09 f0       	breq	.+2      	; 0x2f44 <ParseCommand+0x612>
    2f42:	40 c0       	rjmp	.+128    	; 0x2fc4 <ParseCommand+0x692>
		float mean, std;
		int status = CalibratePicomotor(1, data, &mean, &std);
    2f44:	9e 01       	movw	r18, r28
    2f46:	2f 5f       	subi	r18, 0xFF	; 255
    2f48:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4a:	ae 01       	movw	r20, r28
    2f4c:	4b 5f       	subi	r20, 0xFB	; 251
    2f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f50:	b2 01       	movw	r22, r4
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	97 d8       	rcall	.-3794   	; 0x2086 <CalibratePicomotor>
    2f58:	5c 01       	movw	r10, r24
		if(!status){
    2f5a:	89 2b       	or	r24, r25
    2f5c:	21 f5       	brne	.+72     	; 0x2fa6 <ParseCommand+0x674>
			REGISTER[memory_PICO1_MEAN] =  (long)(mean*1000000);
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	34 e2       	ldi	r19, 0x24	; 36
    2f62:	44 e7       	ldi	r20, 0x74	; 116
    2f64:	59 e4       	ldi	r21, 0x49	; 73
    2f66:	6d 81       	ldd	r22, Y+5	; 0x05
    2f68:	7e 81       	ldd	r23, Y+6	; 0x06
    2f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6c:	98 85       	ldd	r25, Y+8	; 0x08
    2f6e:	2c d5       	rcall	.+2648   	; 0x39c8 <__mulsf3>
    2f70:	ac d3       	rcall	.+1880   	; 0x36ca <__fixsfsi>
    2f72:	60 93 75 02 	sts	0x0275, r22
    2f76:	70 93 76 02 	sts	0x0276, r23
    2f7a:	80 93 77 02 	sts	0x0277, r24
    2f7e:	90 93 78 02 	sts	0x0278, r25
			REGISTER[memory_PICO1_STD] =  (long)(std*1000000);
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	34 e2       	ldi	r19, 0x24	; 36
    2f86:	44 e7       	ldi	r20, 0x74	; 116
    2f88:	59 e4       	ldi	r21, 0x49	; 73
    2f8a:	69 81       	ldd	r22, Y+1	; 0x01
    2f8c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f90:	9c 81       	ldd	r25, Y+4	; 0x04
    2f92:	1a d5       	rcall	.+2612   	; 0x39c8 <__mulsf3>
    2f94:	9a d3       	rcall	.+1844   	; 0x36ca <__fixsfsi>
    2f96:	60 93 81 02 	sts	0x0281, r22
    2f9a:	70 93 82 02 	sts	0x0282, r23
    2f9e:	80 93 83 02 	sts	0x0283, r24
    2fa2:	90 93 84 02 	sts	0x0284, r25
		}
		int error = SendFeedback(port,command,status);
    2fa6:	95 01       	movw	r18, r10
    2fa8:	bb 0c       	add	r11, r11
    2faa:	44 0b       	sbc	r20, r20
    2fac:	55 0b       	sbc	r21, r21
    2fae:	63 ec       	ldi	r22, 0xC3	; 195
    2fb0:	70 e0       	ldi	r23, 0x00	; 0
    2fb2:	c7 01       	movw	r24, r14
    2fb4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	09 f0       	breq	.+2      	; 0x2fbe <ParseCommand+0x68c>
    2fbc:	28 c2       	rjmp	.+1104   	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	25 c2       	rjmp	.+1098   	; 0x340e <ParseCommand+0xadc>
			REGISTER[memory_PICO1_STD] =  (long)(std*1000000);
		}
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	else if(command==196){ // MEASURE ENCODER STATE
    2fc4:	84 3c       	cpi	r24, 0xC4	; 196
    2fc6:	91 05       	cpc	r25, r1
    2fc8:	b1 f4       	brne	.+44     	; 0x2ff6 <ParseCommand+0x6c4>
		int state;
		int status = GetEncoderState(1, &state);
    2fca:	be 01       	movw	r22, r28
    2fcc:	6f 5f       	subi	r22, 0xFF	; 255
    2fce:	7f 4f       	sbci	r23, 0xFF	; 255
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 af 0a 	call	0x155e	; 0x155e <GetEncoderState>
		int error = SendFeedback(port,command,status);
    2fd8:	9c 01       	movw	r18, r24
    2fda:	99 0f       	add	r25, r25
    2fdc:	44 0b       	sbc	r20, r20
    2fde:	55 0b       	sbc	r21, r21
    2fe0:	64 ec       	ldi	r22, 0xC4	; 196
    2fe2:	70 e0       	ldi	r23, 0x00	; 0
    2fe4:	c7 01       	movw	r24, r14
    2fe6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	09 f0       	breq	.+2      	; 0x2ff0 <ParseCommand+0x6be>
    2fee:	0f c2       	rjmp	.+1054   	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    2ff0:	80 e0       	ldi	r24, 0x00	; 0
    2ff2:	90 e0       	ldi	r25, 0x00	; 0
    2ff4:	0c c2       	rjmp	.+1048   	; 0x340e <ParseCommand+0xadc>
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	
	// BOTTOM PICOMOTOR
	else if(command==201){ // MOVE BY TICKS
    2ff6:	89 3c       	cpi	r24, 0xC9	; 201
    2ff8:	91 05       	cpc	r25, r1
    2ffa:	79 f4       	brne	.+30     	; 0x301a <ParseCommand+0x6e8>
		int status = MovePicomotor(2,data);
    2ffc:	b2 01       	movw	r22, r4
    2ffe:	82 e0       	ldi	r24, 0x02	; 2
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	0e 94 59 09 	call	0x12b2	; 0x12b2 <MovePicomotor>
		int error = SendFeedback(port,command,status);
    3006:	9c 01       	movw	r18, r24
    3008:	99 0f       	add	r25, r25
    300a:	44 0b       	sbc	r20, r20
    300c:	55 0b       	sbc	r21, r21
    300e:	69 ec       	ldi	r22, 0xC9	; 201
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	c7 01       	movw	r24, r14
    3014:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    3018:	fa c1       	rjmp	.+1012   	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==202){ // MOVE BY INTERVALS
    301a:	8a 3c       	cpi	r24, 0xCA	; 202
    301c:	91 05       	cpc	r25, r1
    301e:	d1 f4       	brne	.+52     	; 0x3054 <ParseCommand+0x722>
		int MovedIntervals, MovedTicks;
		int status = MoveIntervals(2, data, &MovedIntervals, &MovedTicks);
    3020:	9e 01       	movw	r18, r28
    3022:	2f 5f       	subi	r18, 0xFF	; 255
    3024:	3f 4f       	sbci	r19, 0xFF	; 255
    3026:	ae 01       	movw	r20, r28
    3028:	4b 5f       	subi	r20, 0xFB	; 251
    302a:	5f 4f       	sbci	r21, 0xFF	; 255
    302c:	b2 01       	movw	r22, r4
    302e:	82 e0       	ldi	r24, 0x02	; 2
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <MoveIntervals>
		int error = SendFeedback(port,command,status);
    3036:	9c 01       	movw	r18, r24
    3038:	99 0f       	add	r25, r25
    303a:	44 0b       	sbc	r20, r20
    303c:	55 0b       	sbc	r21, r21
    303e:	6a ec       	ldi	r22, 0xCA	; 202
    3040:	70 e0       	ldi	r23, 0x00	; 0
    3042:	c7 01       	movw	r24, r14
    3044:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    3048:	00 97       	sbiw	r24, 0x00	; 0
    304a:	09 f0       	breq	.+2      	; 0x304e <ParseCommand+0x71c>
    304c:	e0 c1       	rjmp	.+960    	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	dd c1       	rjmp	.+954    	; 0x340e <ParseCommand+0xadc>
		int MovedIntervals, MovedTicks;
		int status = MoveIntervals(2, data, &MovedIntervals, &MovedTicks);
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	else if(command==203){ // MOVE BY NM (THROUGH ALGORITHM)
    3054:	8b 3c       	cpi	r24, 0xCB	; 203
    3056:	91 05       	cpc	r25, r1
    3058:	91 f4       	brne	.+36     	; 0x307e <ParseCommand+0x74c>
		int status = SetPicomotorLocation(2, REGISTER[memory_PICO2_LOCATION], data);
    305a:	60 91 61 02 	lds	r22, 0x0261
    305e:	70 91 62 02 	lds	r23, 0x0262
    3062:	a2 01       	movw	r20, r4
    3064:	82 e0       	ldi	r24, 0x02	; 2
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	14 d9       	rcall	.-3544   	; 0x2292 <SetPicomotorLocation>
		int error = SendFeedback(port,command,status);
    306a:	9c 01       	movw	r18, r24
    306c:	99 0f       	add	r25, r25
    306e:	44 0b       	sbc	r20, r20
    3070:	55 0b       	sbc	r21, r21
    3072:	6b ec       	ldi	r22, 0xCB	; 203
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	c7 01       	movw	r24, r14
    3078:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    307c:	c8 c1       	rjmp	.+912    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==204){ // INITIALIZE
    307e:	8c 3c       	cpi	r24, 0xCC	; 204
    3080:	91 05       	cpc	r25, r1
    3082:	49 f4       	brne	.+18     	; 0x3096 <ParseCommand+0x764>
		int status = InitializePicomotor(2, data);
		int error = SendFeedback(port,command,status);
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	a9 01       	movw	r20, r18
    308a:	6c ec       	ldi	r22, 0xCC	; 204
    308c:	70 e0       	ldi	r23, 0x00	; 0
    308e:	c7 01       	movw	r24, r14
    3090:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    3094:	bc c1       	rjmp	.+888    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	else if(command==205){ // CALIBRATE
    3096:	8d 3c       	cpi	r24, 0xCD	; 205
    3098:	91 05       	cpc	r25, r1
    309a:	09 f0       	breq	.+2      	; 0x309e <ParseCommand+0x76c>
    309c:	41 c0       	rjmp	.+130    	; 0x3120 <ParseCommand+0x7ee>
		float mean, std;
		int status = CalibratePicomotor(2, data, &mean, &std);
    309e:	9e 01       	movw	r18, r28
    30a0:	2f 5f       	subi	r18, 0xFF	; 255
    30a2:	3f 4f       	sbci	r19, 0xFF	; 255
    30a4:	ae 01       	movw	r20, r28
    30a6:	4b 5f       	subi	r20, 0xFB	; 251
    30a8:	5f 4f       	sbci	r21, 0xFF	; 255
    30aa:	b2 01       	movw	r22, r4
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 94 43 10 	call	0x2086	; 0x2086 <CalibratePicomotor>
    30b4:	5c 01       	movw	r10, r24
		if(!status) {
    30b6:	89 2b       	or	r24, r25
    30b8:	21 f5       	brne	.+72     	; 0x3102 <ParseCommand+0x7d0>
			REGISTER[memory_PICO2_MEAN] = (long)(mean*1000000);
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	34 e2       	ldi	r19, 0x24	; 36
    30be:	44 e7       	ldi	r20, 0x74	; 116
    30c0:	59 e4       	ldi	r21, 0x49	; 73
    30c2:	6d 81       	ldd	r22, Y+5	; 0x05
    30c4:	7e 81       	ldd	r23, Y+6	; 0x06
    30c6:	8f 81       	ldd	r24, Y+7	; 0x07
    30c8:	98 85       	ldd	r25, Y+8	; 0x08
    30ca:	7e d4       	rcall	.+2300   	; 0x39c8 <__mulsf3>
    30cc:	fe d2       	rcall	.+1532   	; 0x36ca <__fixsfsi>
    30ce:	60 93 79 02 	sts	0x0279, r22
    30d2:	70 93 7a 02 	sts	0x027A, r23
    30d6:	80 93 7b 02 	sts	0x027B, r24
    30da:	90 93 7c 02 	sts	0x027C, r25
			REGISTER[memory_PICO2_STD] =  (long)(std*1000000);
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	34 e2       	ldi	r19, 0x24	; 36
    30e2:	44 e7       	ldi	r20, 0x74	; 116
    30e4:	59 e4       	ldi	r21, 0x49	; 73
    30e6:	69 81       	ldd	r22, Y+1	; 0x01
    30e8:	7a 81       	ldd	r23, Y+2	; 0x02
    30ea:	8b 81       	ldd	r24, Y+3	; 0x03
    30ec:	9c 81       	ldd	r25, Y+4	; 0x04
    30ee:	6c d4       	rcall	.+2264   	; 0x39c8 <__mulsf3>
    30f0:	ec d2       	rcall	.+1496   	; 0x36ca <__fixsfsi>
    30f2:	60 93 85 02 	sts	0x0285, r22
    30f6:	70 93 86 02 	sts	0x0286, r23
    30fa:	80 93 87 02 	sts	0x0287, r24
    30fe:	90 93 88 02 	sts	0x0288, r25
		}
		int error = SendFeedback(port,command,status);
    3102:	95 01       	movw	r18, r10
    3104:	bb 0c       	add	r11, r11
    3106:	44 0b       	sbc	r20, r20
    3108:	55 0b       	sbc	r21, r21
    310a:	6d ec       	ldi	r22, 0xCD	; 205
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	c7 01       	movw	r24, r14
    3110:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    3114:	00 97       	sbiw	r24, 0x00	; 0
    3116:	09 f0       	breq	.+2      	; 0x311a <ParseCommand+0x7e8>
    3118:	7a c1       	rjmp	.+756    	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	77 c1       	rjmp	.+750    	; 0x340e <ParseCommand+0xadc>
			REGISTER[memory_PICO2_STD] =  (long)(std*1000000);
		}
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	else if(command==206){ // MEASURE ENCODER STATE
    3120:	8e 3c       	cpi	r24, 0xCE	; 206
    3122:	91 05       	cpc	r25, r1
    3124:	b1 f4       	brne	.+44     	; 0x3152 <ParseCommand+0x820>
		int state;
		int status = GetEncoderState(2, &state);
    3126:	be 01       	movw	r22, r28
    3128:	6f 5f       	subi	r22, 0xFF	; 255
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	82 e0       	ldi	r24, 0x02	; 2
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0e 94 af 0a 	call	0x155e	; 0x155e <GetEncoderState>
		int error = SendFeedback(port,command,status);
    3134:	9c 01       	movw	r18, r24
    3136:	99 0f       	add	r25, r25
    3138:	44 0b       	sbc	r20, r20
    313a:	55 0b       	sbc	r21, r21
    313c:	6e ec       	ldi	r22, 0xCE	; 206
    313e:	70 e0       	ldi	r23, 0x00	; 0
    3140:	c7 01       	movw	r24, r14
    3142:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	09 f0       	breq	.+2      	; 0x314c <ParseCommand+0x81a>
    314a:	61 c1       	rjmp	.+706    	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	5e c1       	rjmp	.+700    	; 0x340e <ParseCommand+0xadc>
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	
	// RE-INITIALIZE MUX
	else if (command==210){
    3152:	82 3d       	cpi	r24, 0xD2	; 210
    3154:	91 05       	cpc	r25, r1
    3156:	69 f4       	brne	.+26     	; 0x3172 <ParseCommand+0x840>
		int status = MULTIPLEXER_INIT(data);
    3158:	c2 01       	movw	r24, r4
    315a:	0e 94 b5 0b 	call	0x176a	; 0x176a <MULTIPLEXER_INIT>
		int error = SendFeedback(port,command,status);
    315e:	9c 01       	movw	r18, r24
    3160:	99 0f       	add	r25, r25
    3162:	44 0b       	sbc	r20, r20
    3164:	55 0b       	sbc	r21, r21
    3166:	62 ed       	ldi	r22, 0xD2	; 210
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	c7 01       	movw	r24, r14
    316c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    3170:	4e c1       	rjmp	.+668    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// TURN CHANNEL ON
	else if (command==211){ 
    3172:	83 3d       	cpi	r24, 0xD3	; 211
    3174:	91 05       	cpc	r25, r1
    3176:	69 f4       	brne	.+26     	; 0x3192 <ParseCommand+0x860>
		int status = ChannelOn(data);
    3178:	c2 01       	movw	r24, r4
    317a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <ChannelOn>
		int error = SendFeedback(port,command,status);
    317e:	9c 01       	movw	r18, r24
    3180:	99 0f       	add	r25, r25
    3182:	44 0b       	sbc	r20, r20
    3184:	55 0b       	sbc	r21, r21
    3186:	63 ed       	ldi	r22, 0xD3	; 211
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	c7 01       	movw	r24, r14
    318c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    3190:	3e c1       	rjmp	.+636    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	// TURN CHANNEL OFF
	else if (command==212){ 
    3192:	84 3d       	cpi	r24, 0xD4	; 212
    3194:	91 05       	cpc	r25, r1
    3196:	69 f4       	brne	.+26     	; 0x31b2 <ParseCommand+0x880>
		int status = ChannelOff(data);
    3198:	c2 01       	movw	r24, r4
    319a:	0e 94 85 0c 	call	0x190a	; 0x190a <ChannelOff>
		int error = SendFeedback(port,command,status);
    319e:	9c 01       	movw	r18, r24
    31a0:	99 0f       	add	r25, r25
    31a2:	44 0b       	sbc	r20, r20
    31a4:	55 0b       	sbc	r21, r21
    31a6:	64 ed       	ldi	r22, 0xD4	; 212
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	c7 01       	movw	r24, r14
    31ac:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    31b0:	2e c1       	rjmp	.+604    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE ELECTRODE ALGORITHM
	else if (command==213){
    31b2:	85 3d       	cpi	r24, 0xD5	; 213
    31b4:	91 05       	cpc	r25, r1
    31b6:	59 f4       	brne	.+22     	; 0x31ce <ParseCommand+0x89c>
		int status = ELECTRODE_ACTUATION_INIT();
    31b8:	d1 d8       	rcall	.-3678   	; 0x235c <ELECTRODE_ACTUATION_INIT>
		int error = SendFeedback(port,command,status);
    31ba:	9c 01       	movw	r18, r24
    31bc:	99 0f       	add	r25, r25
    31be:	44 0b       	sbc	r20, r20
    31c0:	55 0b       	sbc	r21, r21
    31c2:	65 ed       	ldi	r22, 0xD5	; 213
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	c7 01       	movw	r24, r14
    31c8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    31cc:	20 c1       	rjmp	.+576    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// ACTUATE ELECTRODE
	else if (command==214){
    31ce:	86 3d       	cpi	r24, 0xD6	; 214
    31d0:	91 05       	cpc	r25, r1
    31d2:	61 f4       	brne	.+24     	; 0x31ec <ParseCommand+0x8ba>
		int status = ActuateElectode(data);
    31d4:	c2 01       	movw	r24, r4
    31d6:	73 da       	rcall	.-2842   	; 0x26be <ActuateElectode>
		int error = SendFeedback(port,command,status);
    31d8:	9c 01       	movw	r18, r24
    31da:	99 0f       	add	r25, r25
    31dc:	44 0b       	sbc	r20, r20
    31de:	55 0b       	sbc	r21, r21
    31e0:	66 ed       	ldi	r22, 0xD6	; 214
    31e2:	70 e0       	ldi	r23, 0x00	; 0
    31e4:	c7 01       	movw	r24, r14
    31e6:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    31ea:	11 c1       	rjmp	.+546    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE THERMO-SENSORS
	else if (command==220){
    31ec:	8c 3d       	cpi	r24, 0xDC	; 220
    31ee:	91 05       	cpc	r25, r1
    31f0:	61 f4       	brne	.+24     	; 0x320a <ParseCommand+0x8d8>
		int status = TEMP_SENSORS_INIT();
    31f2:	0e 94 b7 0c 	call	0x196e	; 0x196e <TEMP_SENSORS_INIT>
		int error = SendFeedback(port,command,status);
    31f6:	9c 01       	movw	r18, r24
    31f8:	99 0f       	add	r25, r25
    31fa:	44 0b       	sbc	r20, r20
    31fc:	55 0b       	sbc	r21, r21
    31fe:	6c ed       	ldi	r22, 0xDC	; 220
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	c7 01       	movw	r24, r14
    3204:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    3208:	02 c1       	rjmp	.+516    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// MEASURE TEMP FROM MCP9801
	else if(command==221){
    320a:	8d 3d       	cpi	r24, 0xDD	; 221
    320c:	91 05       	cpc	r25, r1
    320e:	a9 f4       	brne	.+42     	; 0x323a <ParseCommand+0x908>
		int16_t temp;
		int status = GetTemperatureMCP9801(data, &temp);
    3210:	be 01       	movw	r22, r28
    3212:	6f 5f       	subi	r22, 0xFF	; 255
    3214:	7f 4f       	sbci	r23, 0xFF	; 255
    3216:	c2 01       	movw	r24, r4
    3218:	0e 94 cc 0c 	call	0x1998	; 0x1998 <GetTemperatureMCP9801>
		int error = SendFeedback(port,command,status);
    321c:	9c 01       	movw	r18, r24
    321e:	99 0f       	add	r25, r25
    3220:	44 0b       	sbc	r20, r20
    3222:	55 0b       	sbc	r21, r21
    3224:	6d ed       	ldi	r22, 0xDD	; 221
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	c7 01       	movw	r24, r14
    322a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	09 f0       	breq	.+2      	; 0x3234 <ParseCommand+0x902>
    3232:	ed c0       	rjmp	.+474    	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	ea c0       	rjmp	.+468    	; 0x340e <ParseCommand+0xadc>
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	
	// MEASURE TEMP FROM TMP006
	else if(command==222){
    323a:	8e 3d       	cpi	r24, 0xDE	; 222
    323c:	91 05       	cpc	r25, r1
    323e:	51 f4       	brne	.+20     	; 0x3254 <ParseCommand+0x922>
		int16_t temp;
		int status = GetTemperatureTMP006(data, &temp);
		int error = SendFeedback(port,command,status);
    3240:	2b ea       	ldi	r18, 0xAB	; 171
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e0       	ldi	r20, 0x00	; 0
    3246:	50 e0       	ldi	r21, 0x00	; 0
    3248:	6e ed       	ldi	r22, 0xDE	; 222
    324a:	70 e0       	ldi	r23, 0x00	; 0
    324c:	c7 01       	movw	r24, r14
    324e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    3252:	dd c0       	rjmp	.+442    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// RE-INITIALIZE WATCHDOG TIMER
	else if (command==230){
    3254:	86 3e       	cpi	r24, 0xE6	; 230
    3256:	91 05       	cpc	r25, r1
    3258:	61 f4       	brne	.+24     	; 0x3272 <ParseCommand+0x940>
		int status = WATCHDOG_INIT();
    325a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <WATCHDOG_INIT>
		int error = SendFeedback(port,command,status);
    325e:	9c 01       	movw	r18, r24
    3260:	99 0f       	add	r25, r25
    3262:	44 0b       	sbc	r20, r20
    3264:	55 0b       	sbc	r21, r21
    3266:	66 ee       	ldi	r22, 0xE6	; 230
    3268:	70 e0       	ldi	r23, 0x00	; 0
    326a:	c7 01       	movw	r24, r14
    326c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    3270:	ce c0       	rjmp	.+412    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// DISABLE WATCHDOG TIMER
	else if (command==231){
    3272:	87 3e       	cpi	r24, 0xE7	; 231
    3274:	91 05       	cpc	r25, r1
    3276:	59 f4       	brne	.+22     	; 0x328e <ParseCommand+0x95c>
		DisableWatchdogTimer();
    3278:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DisableWatchdogTimer>
		int error = SendFeedback(port,command,0);
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	a9 01       	movw	r20, r18
    3282:	67 ee       	ldi	r22, 0xE7	; 231
    3284:	70 e0       	ldi	r23, 0x00	; 0
    3286:	c7 01       	movw	r24, r14
    3288:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    328c:	c0 c0       	rjmp	.+384    	; 0x340e <ParseCommand+0xadc>
                       SPECIAL COMMANDS
	--------------------------------------------------*/
	// command = 240-255

	// SAVE MEMORY
	else if(command==240){
    328e:	80 3f       	cpi	r24, 0xF0	; 240
    3290:	91 05       	cpc	r25, r1
    3292:	69 f4       	brne	.+26     	; 0x32ae <ParseCommand+0x97c>
		int status = SaveRegister(data);
    3294:	c2 01       	movw	r24, r4
    3296:	0e 94 9d 00 	call	0x13a	; 0x13a <SaveRegister>
		int error = SendFeedback(port,command,status);
    329a:	9c 01       	movw	r18, r24
    329c:	99 0f       	add	r25, r25
    329e:	44 0b       	sbc	r20, r20
    32a0:	55 0b       	sbc	r21, r21
    32a2:	60 ef       	ldi	r22, 0xF0	; 240
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	c7 01       	movw	r24, r14
    32a8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    32ac:	b0 c0       	rjmp	.+352    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}

	// LOAD MEMORY
	else if(command==241){
    32ae:	81 3f       	cpi	r24, 0xF1	; 241
    32b0:	91 05       	cpc	r25, r1
    32b2:	69 f4       	brne	.+26     	; 0x32ce <ParseCommand+0x99c>
		int status = LoadRegister(data);
    32b4:	c2 01       	movw	r24, r4
    32b6:	0e 94 ba 00 	call	0x174	; 0x174 <LoadRegister>
		int error = SendFeedback(port,command,status);
    32ba:	9c 01       	movw	r18, r24
    32bc:	99 0f       	add	r25, r25
    32be:	44 0b       	sbc	r20, r20
    32c0:	55 0b       	sbc	r21, r21
    32c2:	61 ef       	ldi	r22, 0xF1	; 241
    32c4:	70 e0       	ldi	r23, 0x00	; 0
    32c6:	c7 01       	movw	r24, r14
    32c8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    32cc:	a0 c0       	rjmp	.+320    	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// WRITE CODE TO EEPROM
	else if(command==245){
    32ce:	85 3f       	cpi	r24, 0xF5	; 245
    32d0:	91 05       	cpc	r25, r1
    32d2:	09 f0       	breq	.+2      	; 0x32d6 <ParseCommand+0x9a4>
    32d4:	55 c0       	rjmp	.+170    	; 0x3380 <ParseCommand+0xa4e>
    32d6:	8d b6       	in	r8, 0x3d	; 61
    32d8:	9e b6       	in	r9, 0x3e	; 62
		uint16_t length = data & 0xffff;
		uint32_t eeprom_index = data >> 16;
    32da:	c3 01       	movw	r24, r6
    32dc:	bb 27       	eor	r27, r27
    32de:	97 fd       	sbrc	r25, 7
    32e0:	b0 95       	com	r27
    32e2:	ab 2f       	mov	r26, r27
    32e4:	89 87       	std	Y+9, r24	; 0x09
    32e6:	9a 87       	std	Y+10, r25	; 0x0a
    32e8:	ab 87       	std	Y+11, r26	; 0x0b
    32ea:	bc 87       	std	Y+12, r27	; 0x0c
		uint8_t buffer[length + 2];
    32ec:	c2 01       	movw	r24, r4
    32ee:	02 96       	adiw	r24, 0x02	; 2
    32f0:	ad b7       	in	r26, 0x3d	; 61
    32f2:	be b7       	in	r27, 0x3e	; 62
    32f4:	a8 1b       	sub	r26, r24
    32f6:	b9 0b       	sbc	r27, r25
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	be bf       	out	0x3e, r27	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	ad bf       	out	0x3d, r26	; 61
    3302:	ed b7       	in	r30, 0x3d	; 61
    3304:	fe b7       	in	r31, 0x3e	; 62
    3306:	31 96       	adiw	r30, 0x01	; 1
    3308:	5f 01       	movw	r10, r30
		buffer[0] = length >> 8;
    330a:	11 96       	adiw	r26, 0x01	; 1
    330c:	5c 92       	st	X, r5
		buffer[1] = length;
    330e:	41 82       	std	Z+1, r4	; 0x01
		int error = SendFeedback(port,command,0);
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	a9 01       	movw	r20, r18
    3316:	65 ef       	ldi	r22, 0xF5	; 245
    3318:	70 e0       	ldi	r23, 0x00	; 0
    331a:	c7 01       	movw	r24, r14
    331c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;	
    3320:	00 97       	sbiw	r24, 0x00	; 0
    3322:	41 f5       	brne	.+80     	; 0x3374 <ParseCommand+0xa42>
		
		int status = LoadMessage(port, &(buffer[2]), length,(long)10000);
    3324:	00 e1       	ldi	r16, 0x10	; 16
    3326:	17 e2       	ldi	r17, 0x27	; 39
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	a2 01       	movw	r20, r4
    332e:	b5 01       	movw	r22, r10
    3330:	6e 5f       	subi	r22, 0xFE	; 254
    3332:	7f 4f       	sbci	r23, 0xFF	; 255
    3334:	c7 01       	movw	r24, r14
    3336:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LoadMessage>
		if(status==0) status = WriteinEEPROM(eeprom_index, buffer, length);
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	41 f4       	brne	.+16     	; 0x334e <ParseCommand+0xa1c>
    333e:	92 01       	movw	r18, r4
    3340:	a5 01       	movw	r20, r10
    3342:	69 85       	ldd	r22, Y+9	; 0x09
    3344:	7a 85       	ldd	r23, Y+10	; 0x0a
    3346:	8b 85       	ldd	r24, Y+11	; 0x0b
    3348:	9c 85       	ldd	r25, Y+12	; 0x0c
    334a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <WriteinEEPROM>
		error = SendFeedback(port,command,status);
    334e:	9c 01       	movw	r18, r24
    3350:	99 0f       	add	r25, r25
    3352:	44 0b       	sbc	r20, r20
    3354:	55 0b       	sbc	r21, r21
    3356:	65 ef       	ldi	r22, 0xF5	; 245
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	c7 01       	movw	r24, r14
    335c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    3360:	00 97       	sbiw	r24, 0x00	; 0
    3362:	41 f4       	brne	.+16     	; 0x3374 <ParseCommand+0xa42>
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	9e be       	out	0x3e, r9	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	8d be       	out	0x3d, r8	; 61
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	4d c0       	rjmp	.+154    	; 0x340e <ParseCommand+0xadc>
		uint32_t eeprom_index = data >> 16;
		uint8_t buffer[length + 2];
		buffer[0] = length >> 8;
		buffer[1] = length;
		int error = SendFeedback(port,command,0);
		if(error) return error;	
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	9e be       	out	0x3e, r9	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	8d be       	out	0x3d, r8	; 61
    337e:	47 c0       	rjmp	.+142    	; 0x340e <ParseCommand+0xadc>
		error = SendFeedback(port,command,status);
		if(error) return error;
	}
	
	// GET SIZE OF CODE IN EEPROM
	else if(command==246){
    3380:	86 3f       	cpi	r24, 0xF6	; 246
    3382:	91 05       	cpc	r25, r1
    3384:	a9 f4       	brne	.+42     	; 0x33b0 <ParseCommand+0xa7e>
		int length;
		int status = GetSizeofCode(data, &length);
    3386:	ae 01       	movw	r20, r28
    3388:	4f 5f       	subi	r20, 0xFF	; 255
    338a:	5f 4f       	sbci	r21, 0xFF	; 255
    338c:	c3 01       	movw	r24, r6
    338e:	b2 01       	movw	r22, r4
    3390:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <GetSizeofCode>
		int error = SendFeedback(port,command,status);
    3394:	9c 01       	movw	r18, r24
    3396:	99 0f       	add	r25, r25
    3398:	44 0b       	sbc	r20, r20
    339a:	55 0b       	sbc	r21, r21
    339c:	66 ef       	ldi	r22, 0xF6	; 246
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	c7 01       	movw	r24, r14
    33a2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    33a6:	00 97       	sbiw	r24, 0x00	; 0
    33a8:	91 f5       	brne	.+100    	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	2f c0       	rjmp	.+94     	; 0x340e <ParseCommand+0xadc>
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	
	// READ BYTE OF CODE IN EEPROM
	else if(command==247){
    33b0:	87 3f       	cpi	r24, 0xF7	; 247
    33b2:	91 05       	cpc	r25, r1
    33b4:	c9 f4       	brne	.+50     	; 0x33e8 <ParseCommand+0xab6>
		uint8_t byte;
		int status = ReadCodeinEEPROM(data>>16, data & 0xffff, &byte);
    33b6:	b3 01       	movw	r22, r6
    33b8:	99 27       	eor	r25, r25
    33ba:	77 fd       	sbrc	r23, 7
    33bc:	90 95       	com	r25
    33be:	89 2f       	mov	r24, r25
    33c0:	9e 01       	movw	r18, r28
    33c2:	2f 5f       	subi	r18, 0xFF	; 255
    33c4:	3f 4f       	sbci	r19, 0xFF	; 255
    33c6:	a2 01       	movw	r20, r4
    33c8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <ReadCodeinEEPROM>
		int error = SendFeedback(port,command,status);
    33cc:	9c 01       	movw	r18, r24
    33ce:	99 0f       	add	r25, r25
    33d0:	44 0b       	sbc	r20, r20
    33d2:	55 0b       	sbc	r21, r21
    33d4:	67 ef       	ldi	r22, 0xF7	; 247
    33d6:	70 e0       	ldi	r23, 0x00	; 0
    33d8:	c7 01       	movw	r24, r14
    33da:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;
    33de:	00 97       	sbiw	r24, 0x00	; 0
    33e0:	b1 f4       	brne	.+44     	; 0x340e <ParseCommand+0xadc>
	else{
		int error = SendFeedback(port,254,command);
		if(error) return error;	
	}
	
	return OK;
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	13 c0       	rjmp	.+38     	; 0x340e <ParseCommand+0xadc>
		int error = SendFeedback(port,command,status);
		if(error) return error;
	}
	
	//PING
	else if(command==255){
    33e8:	8f 3f       	cpi	r24, 0xFF	; 255
    33ea:	91 05       	cpc	r25, r1
    33ec:	41 f4       	brne	.+16     	; 0x33fe <ParseCommand+0xacc>
		int error = SendFeedback(port,command,data);
    33ee:	a3 01       	movw	r20, r6
    33f0:	92 01       	movw	r18, r4
    33f2:	6f ef       	ldi	r22, 0xFF	; 255
    33f4:	70 e0       	ldi	r23, 0x00	; 0
    33f6:	c7 01       	movw	r24, r14
    33f8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
    33fc:	08 c0       	rjmp	.+16     	; 0x340e <ParseCommand+0xadc>
		if(error) return error;
	}
	
	// WRONG COMMAND
	else{
		int error = SendFeedback(port,254,command);
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	50 e0       	ldi	r21, 0x00	; 0
    3404:	6e ef       	ldi	r22, 0xFE	; 254
    3406:	70 e0       	ldi	r23, 0x00	; 0
    3408:	c7 01       	movw	r24, r14
    340a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SendFeedback>
		if(error) return error;	
	}
	
	return OK;
}
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de be       	out	0x3e, r13	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd be       	out	0x3d, r12	; 61
    3418:	2c 96       	adiw	r28, 0x0c	; 12
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	df 91       	pop	r29
    3426:	cf 91       	pop	r28
    3428:	1f 91       	pop	r17
    342a:	0f 91       	pop	r16
    342c:	ff 90       	pop	r15
    342e:	ef 90       	pop	r14
    3430:	df 90       	pop	r13
    3432:	cf 90       	pop	r12
    3434:	bf 90       	pop	r11
    3436:	af 90       	pop	r10
    3438:	9f 90       	pop	r9
    343a:	8f 90       	pop	r8
    343c:	7f 90       	pop	r7
    343e:	6f 90       	pop	r6
    3440:	5f 90       	pop	r5
    3442:	4f 90       	pop	r4
    3444:	08 95       	ret

00003446 <__vector_8>:

ISR(WDT_vect){
    3446:	1f 92       	push	r1
    3448:	0f 92       	push	r0
    344a:	0f b6       	in	r0, 0x3f	; 63
    344c:	0f 92       	push	r0
    344e:	11 24       	eor	r1, r1
    3450:	0b b6       	in	r0, 0x3b	; 59
    3452:	0f 92       	push	r0
    3454:	2f 93       	push	r18
    3456:	3f 93       	push	r19
    3458:	4f 93       	push	r20
    345a:	5f 93       	push	r21
    345c:	6f 93       	push	r22
    345e:	7f 93       	push	r23
    3460:	8f 93       	push	r24
    3462:	9f 93       	push	r25
    3464:	af 93       	push	r26
    3466:	bf 93       	push	r27
    3468:	ef 93       	push	r30
    346a:	ff 93       	push	r31
	// Interrupt before power-up from watchdog
	// Saves the register
	SaveRegister(0);
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	0e 94 9d 00 	call	0x13a	; 0x13a <SaveRegister>
}
    3474:	ff 91       	pop	r31
    3476:	ef 91       	pop	r30
    3478:	bf 91       	pop	r27
    347a:	af 91       	pop	r26
    347c:	9f 91       	pop	r25
    347e:	8f 91       	pop	r24
    3480:	7f 91       	pop	r23
    3482:	6f 91       	pop	r22
    3484:	5f 91       	pop	r21
    3486:	4f 91       	pop	r20
    3488:	3f 91       	pop	r19
    348a:	2f 91       	pop	r18
    348c:	0f 90       	pop	r0
    348e:	0b be       	out	0x3b, r0	; 59
    3490:	0f 90       	pop	r0
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	0f 90       	pop	r0
    3496:	1f 90       	pop	r1
    3498:	18 95       	reti

0000349a <main>:

int main(void)
{	
	LoadRegister(0);
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	0e 94 ba 00 	call	0x174	; 0x174 <LoadRegister>

	USART0_INIT(9600);
    34a2:	60 e8       	ldi	r22, 0x80	; 128
    34a4:	75 e2       	ldi	r23, 0x25	; 37
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	0e 94 83 01 	call	0x306	; 0x306 <USART0_INIT>
	USART1_INIT(9600);
    34ae:	60 e8       	ldi	r22, 0x80	; 128
    34b0:	75 e2       	ldi	r23, 0x25	; 37
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	0e 94 67 02 	call	0x4ce	; 0x4ce <USART1_INIT>
    	SPI_INIT(4000000);
    34ba:	60 e0       	ldi	r22, 0x00	; 0
    34bc:	79 e0       	ldi	r23, 0x09	; 9
    34be:	8d e3       	ldi	r24, 0x3D	; 61
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0e 94 99 02 	call	0x532	; 0x532 <SPI_INIT>
	I2C_INIT(200000);
    34c6:	60 e4       	ldi	r22, 0x40	; 64
    34c8:	7d e0       	ldi	r23, 0x0D	; 13
    34ca:	83 e0       	ldi	r24, 0x03	; 3
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	0e 94 61 03 	call	0x6c2	; 0x6c2 <I2C_INIT>
	
	COMMUNICATION_INIT(1000);
    34d2:	68 ee       	ldi	r22, 0xE8	; 232
    34d4:	73 e0       	ldi	r23, 0x03	; 3
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 2f 06 	call	0xc5e	; 0xc5e <COMMUNICATION_INIT>
	POWER_INIT();
    34de:	0e 94 4f 07 	call	0xe9e	; 0xe9e <POWER_INIT>
    	PICOMOTORS_INIT();
    34e2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <PICOMOTORS_INIT>
	//MULTIPLEXER_INIT(0);
	//MULTIPLEXER_INIT(1);
	SEP_DEV_INIT();
    34e6:	0e 94 91 08 	call	0x1122	; 0x1122 <SEP_DEV_INIT>
	int port;
	
    while (1)
    {	
		// Receive telecommand (if any)	
		if((port=IsCommandWaiting())){
    34ea:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <IsCommandWaiting>
    34ee:	ec 01       	movw	r28, r24
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	d9 f3       	breq	.-10     	; 0x34ea <main+0x50>
				status = SaveCommand(port);
    34f4:	0e 94 e7 06 	call	0xdce	; 0xdce <SaveCommand>
				if(status == 0) ParseCommand(port);
    34f8:	89 2b       	or	r24, r25
    34fa:	b9 f7       	brne	.-18     	; 0x34ea <main+0x50>
    34fc:	ce 01       	movw	r24, r28
    34fe:	19 da       	rcall	.-3022   	; 0x2932 <ParseCommand>
    3500:	f4 cf       	rjmp	.-24     	; 0x34ea <main+0x50>

00003502 <__subsf3>:
    3502:	50 58       	subi	r21, 0x80	; 128

00003504 <__addsf3>:
    3504:	bb 27       	eor	r27, r27
    3506:	aa 27       	eor	r26, r26
    3508:	0e d0       	rcall	.+28     	; 0x3526 <__addsf3x>
    350a:	c4 c1       	rjmp	.+904    	; 0x3894 <__fp_round>
    350c:	b5 d1       	rcall	.+874    	; 0x3878 <__fp_pscA>
    350e:	30 f0       	brcs	.+12     	; 0x351c <__addsf3+0x18>
    3510:	ba d1       	rcall	.+884    	; 0x3886 <__fp_pscB>
    3512:	20 f0       	brcs	.+8      	; 0x351c <__addsf3+0x18>
    3514:	31 f4       	brne	.+12     	; 0x3522 <__addsf3+0x1e>
    3516:	9f 3f       	cpi	r25, 0xFF	; 255
    3518:	11 f4       	brne	.+4      	; 0x351e <__addsf3+0x1a>
    351a:	1e f4       	brtc	.+6      	; 0x3522 <__addsf3+0x1e>
    351c:	aa c1       	rjmp	.+852    	; 0x3872 <__fp_nan>
    351e:	0e f4       	brtc	.+2      	; 0x3522 <__addsf3+0x1e>
    3520:	e0 95       	com	r30
    3522:	e7 fb       	bst	r30, 7
    3524:	77 c1       	rjmp	.+750    	; 0x3814 <__fp_inf>

00003526 <__addsf3x>:
    3526:	e9 2f       	mov	r30, r25
    3528:	c6 d1       	rcall	.+908    	; 0x38b6 <__fp_split3>
    352a:	80 f3       	brcs	.-32     	; 0x350c <__addsf3+0x8>
    352c:	ba 17       	cp	r27, r26
    352e:	62 07       	cpc	r22, r18
    3530:	73 07       	cpc	r23, r19
    3532:	84 07       	cpc	r24, r20
    3534:	95 07       	cpc	r25, r21
    3536:	18 f0       	brcs	.+6      	; 0x353e <__addsf3x+0x18>
    3538:	71 f4       	brne	.+28     	; 0x3556 <__addsf3x+0x30>
    353a:	9e f5       	brtc	.+102    	; 0x35a2 <__addsf3x+0x7c>
    353c:	f5 c1       	rjmp	.+1002   	; 0x3928 <__fp_zero>
    353e:	0e f4       	brtc	.+2      	; 0x3542 <__addsf3x+0x1c>
    3540:	e0 95       	com	r30
    3542:	0b 2e       	mov	r0, r27
    3544:	ba 2f       	mov	r27, r26
    3546:	a0 2d       	mov	r26, r0
    3548:	0b 01       	movw	r0, r22
    354a:	b9 01       	movw	r22, r18
    354c:	90 01       	movw	r18, r0
    354e:	0c 01       	movw	r0, r24
    3550:	ca 01       	movw	r24, r20
    3552:	a0 01       	movw	r20, r0
    3554:	11 24       	eor	r1, r1
    3556:	ff 27       	eor	r31, r31
    3558:	59 1b       	sub	r21, r25
    355a:	99 f0       	breq	.+38     	; 0x3582 <__addsf3x+0x5c>
    355c:	59 3f       	cpi	r21, 0xF9	; 249
    355e:	50 f4       	brcc	.+20     	; 0x3574 <__addsf3x+0x4e>
    3560:	50 3e       	cpi	r21, 0xE0	; 224
    3562:	68 f1       	brcs	.+90     	; 0x35be <__addsf3x+0x98>
    3564:	1a 16       	cp	r1, r26
    3566:	f0 40       	sbci	r31, 0x00	; 0
    3568:	a2 2f       	mov	r26, r18
    356a:	23 2f       	mov	r18, r19
    356c:	34 2f       	mov	r19, r20
    356e:	44 27       	eor	r20, r20
    3570:	58 5f       	subi	r21, 0xF8	; 248
    3572:	f3 cf       	rjmp	.-26     	; 0x355a <__addsf3x+0x34>
    3574:	46 95       	lsr	r20
    3576:	37 95       	ror	r19
    3578:	27 95       	ror	r18
    357a:	a7 95       	ror	r26
    357c:	f0 40       	sbci	r31, 0x00	; 0
    357e:	53 95       	inc	r21
    3580:	c9 f7       	brne	.-14     	; 0x3574 <__addsf3x+0x4e>
    3582:	7e f4       	brtc	.+30     	; 0x35a2 <__addsf3x+0x7c>
    3584:	1f 16       	cp	r1, r31
    3586:	ba 0b       	sbc	r27, r26
    3588:	62 0b       	sbc	r22, r18
    358a:	73 0b       	sbc	r23, r19
    358c:	84 0b       	sbc	r24, r20
    358e:	ba f0       	brmi	.+46     	; 0x35be <__addsf3x+0x98>
    3590:	91 50       	subi	r25, 0x01	; 1
    3592:	a1 f0       	breq	.+40     	; 0x35bc <__addsf3x+0x96>
    3594:	ff 0f       	add	r31, r31
    3596:	bb 1f       	adc	r27, r27
    3598:	66 1f       	adc	r22, r22
    359a:	77 1f       	adc	r23, r23
    359c:	88 1f       	adc	r24, r24
    359e:	c2 f7       	brpl	.-16     	; 0x3590 <__addsf3x+0x6a>
    35a0:	0e c0       	rjmp	.+28     	; 0x35be <__addsf3x+0x98>
    35a2:	ba 0f       	add	r27, r26
    35a4:	62 1f       	adc	r22, r18
    35a6:	73 1f       	adc	r23, r19
    35a8:	84 1f       	adc	r24, r20
    35aa:	48 f4       	brcc	.+18     	; 0x35be <__addsf3x+0x98>
    35ac:	87 95       	ror	r24
    35ae:	77 95       	ror	r23
    35b0:	67 95       	ror	r22
    35b2:	b7 95       	ror	r27
    35b4:	f7 95       	ror	r31
    35b6:	9e 3f       	cpi	r25, 0xFE	; 254
    35b8:	08 f0       	brcs	.+2      	; 0x35bc <__addsf3x+0x96>
    35ba:	b3 cf       	rjmp	.-154    	; 0x3522 <__addsf3+0x1e>
    35bc:	93 95       	inc	r25
    35be:	88 0f       	add	r24, r24
    35c0:	08 f0       	brcs	.+2      	; 0x35c4 <__addsf3x+0x9e>
    35c2:	99 27       	eor	r25, r25
    35c4:	ee 0f       	add	r30, r30
    35c6:	97 95       	ror	r25
    35c8:	87 95       	ror	r24
    35ca:	08 95       	ret

000035cc <ceil>:
    35cc:	96 d1       	rcall	.+812    	; 0x38fa <__fp_trunc>
    35ce:	80 f0       	brcs	.+32     	; 0x35f0 <ceil+0x24>
    35d0:	9f 37       	cpi	r25, 0x7F	; 127
    35d2:	40 f4       	brcc	.+16     	; 0x35e4 <ceil+0x18>
    35d4:	91 11       	cpse	r25, r1
    35d6:	0e f4       	brtc	.+2      	; 0x35da <ceil+0xe>
    35d8:	a8 c1       	rjmp	.+848    	; 0x392a <__fp_szero>
    35da:	60 e0       	ldi	r22, 0x00	; 0
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	80 e8       	ldi	r24, 0x80	; 128
    35e0:	9f e3       	ldi	r25, 0x3F	; 63
    35e2:	08 95       	ret
    35e4:	26 f0       	brts	.+8      	; 0x35ee <ceil+0x22>
    35e6:	1b 16       	cp	r1, r27
    35e8:	61 1d       	adc	r22, r1
    35ea:	71 1d       	adc	r23, r1
    35ec:	81 1d       	adc	r24, r1
    35ee:	18 c1       	rjmp	.+560    	; 0x3820 <__fp_mintl>
    35f0:	32 c1       	rjmp	.+612    	; 0x3856 <__fp_mpack>

000035f2 <__cmpsf2>:
    35f2:	ec d0       	rcall	.+472    	; 0x37cc <__fp_cmp>
    35f4:	08 f4       	brcc	.+2      	; 0x35f8 <__cmpsf2+0x6>
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	08 95       	ret

000035fa <__divsf3>:
    35fa:	0c d0       	rcall	.+24     	; 0x3614 <__divsf3x>
    35fc:	4b c1       	rjmp	.+662    	; 0x3894 <__fp_round>
    35fe:	43 d1       	rcall	.+646    	; 0x3886 <__fp_pscB>
    3600:	40 f0       	brcs	.+16     	; 0x3612 <__divsf3+0x18>
    3602:	3a d1       	rcall	.+628    	; 0x3878 <__fp_pscA>
    3604:	30 f0       	brcs	.+12     	; 0x3612 <__divsf3+0x18>
    3606:	21 f4       	brne	.+8      	; 0x3610 <__divsf3+0x16>
    3608:	5f 3f       	cpi	r21, 0xFF	; 255
    360a:	19 f0       	breq	.+6      	; 0x3612 <__divsf3+0x18>
    360c:	03 c1       	rjmp	.+518    	; 0x3814 <__fp_inf>
    360e:	51 11       	cpse	r21, r1
    3610:	8c c1       	rjmp	.+792    	; 0x392a <__fp_szero>
    3612:	2f c1       	rjmp	.+606    	; 0x3872 <__fp_nan>

00003614 <__divsf3x>:
    3614:	50 d1       	rcall	.+672    	; 0x38b6 <__fp_split3>
    3616:	98 f3       	brcs	.-26     	; 0x35fe <__divsf3+0x4>

00003618 <__divsf3_pse>:
    3618:	99 23       	and	r25, r25
    361a:	c9 f3       	breq	.-14     	; 0x360e <__divsf3+0x14>
    361c:	55 23       	and	r21, r21
    361e:	b1 f3       	breq	.-20     	; 0x360c <__divsf3+0x12>
    3620:	95 1b       	sub	r25, r21
    3622:	55 0b       	sbc	r21, r21
    3624:	bb 27       	eor	r27, r27
    3626:	aa 27       	eor	r26, r26
    3628:	62 17       	cp	r22, r18
    362a:	73 07       	cpc	r23, r19
    362c:	84 07       	cpc	r24, r20
    362e:	38 f0       	brcs	.+14     	; 0x363e <__divsf3_pse+0x26>
    3630:	9f 5f       	subi	r25, 0xFF	; 255
    3632:	5f 4f       	sbci	r21, 0xFF	; 255
    3634:	22 0f       	add	r18, r18
    3636:	33 1f       	adc	r19, r19
    3638:	44 1f       	adc	r20, r20
    363a:	aa 1f       	adc	r26, r26
    363c:	a9 f3       	breq	.-22     	; 0x3628 <__divsf3_pse+0x10>
    363e:	33 d0       	rcall	.+102    	; 0x36a6 <__divsf3_pse+0x8e>
    3640:	0e 2e       	mov	r0, r30
    3642:	3a f0       	brmi	.+14     	; 0x3652 <__divsf3_pse+0x3a>
    3644:	e0 e8       	ldi	r30, 0x80	; 128
    3646:	30 d0       	rcall	.+96     	; 0x36a8 <__divsf3_pse+0x90>
    3648:	91 50       	subi	r25, 0x01	; 1
    364a:	50 40       	sbci	r21, 0x00	; 0
    364c:	e6 95       	lsr	r30
    364e:	00 1c       	adc	r0, r0
    3650:	ca f7       	brpl	.-14     	; 0x3644 <__divsf3_pse+0x2c>
    3652:	29 d0       	rcall	.+82     	; 0x36a6 <__divsf3_pse+0x8e>
    3654:	fe 2f       	mov	r31, r30
    3656:	27 d0       	rcall	.+78     	; 0x36a6 <__divsf3_pse+0x8e>
    3658:	66 0f       	add	r22, r22
    365a:	77 1f       	adc	r23, r23
    365c:	88 1f       	adc	r24, r24
    365e:	bb 1f       	adc	r27, r27
    3660:	26 17       	cp	r18, r22
    3662:	37 07       	cpc	r19, r23
    3664:	48 07       	cpc	r20, r24
    3666:	ab 07       	cpc	r26, r27
    3668:	b0 e8       	ldi	r27, 0x80	; 128
    366a:	09 f0       	breq	.+2      	; 0x366e <__divsf3_pse+0x56>
    366c:	bb 0b       	sbc	r27, r27
    366e:	80 2d       	mov	r24, r0
    3670:	bf 01       	movw	r22, r30
    3672:	ff 27       	eor	r31, r31
    3674:	93 58       	subi	r25, 0x83	; 131
    3676:	5f 4f       	sbci	r21, 0xFF	; 255
    3678:	2a f0       	brmi	.+10     	; 0x3684 <__divsf3_pse+0x6c>
    367a:	9e 3f       	cpi	r25, 0xFE	; 254
    367c:	51 05       	cpc	r21, r1
    367e:	68 f0       	brcs	.+26     	; 0x369a <__divsf3_pse+0x82>
    3680:	c9 c0       	rjmp	.+402    	; 0x3814 <__fp_inf>
    3682:	53 c1       	rjmp	.+678    	; 0x392a <__fp_szero>
    3684:	5f 3f       	cpi	r21, 0xFF	; 255
    3686:	ec f3       	brlt	.-6      	; 0x3682 <__divsf3_pse+0x6a>
    3688:	98 3e       	cpi	r25, 0xE8	; 232
    368a:	dc f3       	brlt	.-10     	; 0x3682 <__divsf3_pse+0x6a>
    368c:	86 95       	lsr	r24
    368e:	77 95       	ror	r23
    3690:	67 95       	ror	r22
    3692:	b7 95       	ror	r27
    3694:	f7 95       	ror	r31
    3696:	9f 5f       	subi	r25, 0xFF	; 255
    3698:	c9 f7       	brne	.-14     	; 0x368c <__divsf3_pse+0x74>
    369a:	88 0f       	add	r24, r24
    369c:	91 1d       	adc	r25, r1
    369e:	96 95       	lsr	r25
    36a0:	87 95       	ror	r24
    36a2:	97 f9       	bld	r25, 7
    36a4:	08 95       	ret
    36a6:	e1 e0       	ldi	r30, 0x01	; 1
    36a8:	66 0f       	add	r22, r22
    36aa:	77 1f       	adc	r23, r23
    36ac:	88 1f       	adc	r24, r24
    36ae:	bb 1f       	adc	r27, r27
    36b0:	62 17       	cp	r22, r18
    36b2:	73 07       	cpc	r23, r19
    36b4:	84 07       	cpc	r24, r20
    36b6:	ba 07       	cpc	r27, r26
    36b8:	20 f0       	brcs	.+8      	; 0x36c2 <__divsf3_pse+0xaa>
    36ba:	62 1b       	sub	r22, r18
    36bc:	73 0b       	sbc	r23, r19
    36be:	84 0b       	sbc	r24, r20
    36c0:	ba 0b       	sbc	r27, r26
    36c2:	ee 1f       	adc	r30, r30
    36c4:	88 f7       	brcc	.-30     	; 0x36a8 <__divsf3_pse+0x90>
    36c6:	e0 95       	com	r30
    36c8:	08 95       	ret

000036ca <__fixsfsi>:
    36ca:	04 d0       	rcall	.+8      	; 0x36d4 <__fixunssfsi>
    36cc:	68 94       	set
    36ce:	b1 11       	cpse	r27, r1
    36d0:	2c c1       	rjmp	.+600    	; 0x392a <__fp_szero>
    36d2:	08 95       	ret

000036d4 <__fixunssfsi>:
    36d4:	f8 d0       	rcall	.+496    	; 0x38c6 <__fp_splitA>
    36d6:	88 f0       	brcs	.+34     	; 0x36fa <__fixunssfsi+0x26>
    36d8:	9f 57       	subi	r25, 0x7F	; 127
    36da:	90 f0       	brcs	.+36     	; 0x3700 <__fixunssfsi+0x2c>
    36dc:	b9 2f       	mov	r27, r25
    36de:	99 27       	eor	r25, r25
    36e0:	b7 51       	subi	r27, 0x17	; 23
    36e2:	a0 f0       	brcs	.+40     	; 0x370c <__fixunssfsi+0x38>
    36e4:	d1 f0       	breq	.+52     	; 0x371a <__fixunssfsi+0x46>
    36e6:	66 0f       	add	r22, r22
    36e8:	77 1f       	adc	r23, r23
    36ea:	88 1f       	adc	r24, r24
    36ec:	99 1f       	adc	r25, r25
    36ee:	1a f0       	brmi	.+6      	; 0x36f6 <__fixunssfsi+0x22>
    36f0:	ba 95       	dec	r27
    36f2:	c9 f7       	brne	.-14     	; 0x36e6 <__fixunssfsi+0x12>
    36f4:	12 c0       	rjmp	.+36     	; 0x371a <__fixunssfsi+0x46>
    36f6:	b1 30       	cpi	r27, 0x01	; 1
    36f8:	81 f0       	breq	.+32     	; 0x371a <__fixunssfsi+0x46>
    36fa:	16 d1       	rcall	.+556    	; 0x3928 <__fp_zero>
    36fc:	b1 e0       	ldi	r27, 0x01	; 1
    36fe:	08 95       	ret
    3700:	13 c1       	rjmp	.+550    	; 0x3928 <__fp_zero>
    3702:	67 2f       	mov	r22, r23
    3704:	78 2f       	mov	r23, r24
    3706:	88 27       	eor	r24, r24
    3708:	b8 5f       	subi	r27, 0xF8	; 248
    370a:	39 f0       	breq	.+14     	; 0x371a <__fixunssfsi+0x46>
    370c:	b9 3f       	cpi	r27, 0xF9	; 249
    370e:	cc f3       	brlt	.-14     	; 0x3702 <__fixunssfsi+0x2e>
    3710:	86 95       	lsr	r24
    3712:	77 95       	ror	r23
    3714:	67 95       	ror	r22
    3716:	b3 95       	inc	r27
    3718:	d9 f7       	brne	.-10     	; 0x3710 <__fixunssfsi+0x3c>
    371a:	3e f4       	brtc	.+14     	; 0x372a <__fixunssfsi+0x56>
    371c:	90 95       	com	r25
    371e:	80 95       	com	r24
    3720:	70 95       	com	r23
    3722:	61 95       	neg	r22
    3724:	7f 4f       	sbci	r23, 0xFF	; 255
    3726:	8f 4f       	sbci	r24, 0xFF	; 255
    3728:	9f 4f       	sbci	r25, 0xFF	; 255
    372a:	08 95       	ret

0000372c <__floatunsisf>:
    372c:	e8 94       	clt
    372e:	09 c0       	rjmp	.+18     	; 0x3742 <__floatsisf+0x12>

00003730 <__floatsisf>:
    3730:	97 fb       	bst	r25, 7
    3732:	3e f4       	brtc	.+14     	; 0x3742 <__floatsisf+0x12>
    3734:	90 95       	com	r25
    3736:	80 95       	com	r24
    3738:	70 95       	com	r23
    373a:	61 95       	neg	r22
    373c:	7f 4f       	sbci	r23, 0xFF	; 255
    373e:	8f 4f       	sbci	r24, 0xFF	; 255
    3740:	9f 4f       	sbci	r25, 0xFF	; 255
    3742:	99 23       	and	r25, r25
    3744:	a9 f0       	breq	.+42     	; 0x3770 <__floatsisf+0x40>
    3746:	f9 2f       	mov	r31, r25
    3748:	96 e9       	ldi	r25, 0x96	; 150
    374a:	bb 27       	eor	r27, r27
    374c:	93 95       	inc	r25
    374e:	f6 95       	lsr	r31
    3750:	87 95       	ror	r24
    3752:	77 95       	ror	r23
    3754:	67 95       	ror	r22
    3756:	b7 95       	ror	r27
    3758:	f1 11       	cpse	r31, r1
    375a:	f8 cf       	rjmp	.-16     	; 0x374c <__floatsisf+0x1c>
    375c:	fa f4       	brpl	.+62     	; 0x379c <__floatsisf+0x6c>
    375e:	bb 0f       	add	r27, r27
    3760:	11 f4       	brne	.+4      	; 0x3766 <__floatsisf+0x36>
    3762:	60 ff       	sbrs	r22, 0
    3764:	1b c0       	rjmp	.+54     	; 0x379c <__floatsisf+0x6c>
    3766:	6f 5f       	subi	r22, 0xFF	; 255
    3768:	7f 4f       	sbci	r23, 0xFF	; 255
    376a:	8f 4f       	sbci	r24, 0xFF	; 255
    376c:	9f 4f       	sbci	r25, 0xFF	; 255
    376e:	16 c0       	rjmp	.+44     	; 0x379c <__floatsisf+0x6c>
    3770:	88 23       	and	r24, r24
    3772:	11 f0       	breq	.+4      	; 0x3778 <__floatsisf+0x48>
    3774:	96 e9       	ldi	r25, 0x96	; 150
    3776:	11 c0       	rjmp	.+34     	; 0x379a <__floatsisf+0x6a>
    3778:	77 23       	and	r23, r23
    377a:	21 f0       	breq	.+8      	; 0x3784 <__floatsisf+0x54>
    377c:	9e e8       	ldi	r25, 0x8E	; 142
    377e:	87 2f       	mov	r24, r23
    3780:	76 2f       	mov	r23, r22
    3782:	05 c0       	rjmp	.+10     	; 0x378e <__floatsisf+0x5e>
    3784:	66 23       	and	r22, r22
    3786:	71 f0       	breq	.+28     	; 0x37a4 <__floatsisf+0x74>
    3788:	96 e8       	ldi	r25, 0x86	; 134
    378a:	86 2f       	mov	r24, r22
    378c:	70 e0       	ldi	r23, 0x00	; 0
    378e:	60 e0       	ldi	r22, 0x00	; 0
    3790:	2a f0       	brmi	.+10     	; 0x379c <__floatsisf+0x6c>
    3792:	9a 95       	dec	r25
    3794:	66 0f       	add	r22, r22
    3796:	77 1f       	adc	r23, r23
    3798:	88 1f       	adc	r24, r24
    379a:	da f7       	brpl	.-10     	; 0x3792 <__floatsisf+0x62>
    379c:	88 0f       	add	r24, r24
    379e:	96 95       	lsr	r25
    37a0:	87 95       	ror	r24
    37a2:	97 f9       	bld	r25, 7
    37a4:	08 95       	ret

000037a6 <floor>:
    37a6:	a9 d0       	rcall	.+338    	; 0x38fa <__fp_trunc>
    37a8:	80 f0       	brcs	.+32     	; 0x37ca <floor+0x24>
    37aa:	9f 37       	cpi	r25, 0x7F	; 127
    37ac:	40 f4       	brcc	.+16     	; 0x37be <floor+0x18>
    37ae:	91 11       	cpse	r25, r1
    37b0:	0e f0       	brts	.+2      	; 0x37b4 <floor+0xe>
    37b2:	bb c0       	rjmp	.+374    	; 0x392a <__fp_szero>
    37b4:	60 e0       	ldi	r22, 0x00	; 0
    37b6:	70 e0       	ldi	r23, 0x00	; 0
    37b8:	80 e8       	ldi	r24, 0x80	; 128
    37ba:	9f eb       	ldi	r25, 0xBF	; 191
    37bc:	08 95       	ret
    37be:	26 f4       	brtc	.+8      	; 0x37c8 <floor+0x22>
    37c0:	1b 16       	cp	r1, r27
    37c2:	61 1d       	adc	r22, r1
    37c4:	71 1d       	adc	r23, r1
    37c6:	81 1d       	adc	r24, r1
    37c8:	2b c0       	rjmp	.+86     	; 0x3820 <__fp_mintl>
    37ca:	45 c0       	rjmp	.+138    	; 0x3856 <__fp_mpack>

000037cc <__fp_cmp>:
    37cc:	99 0f       	add	r25, r25
    37ce:	00 08       	sbc	r0, r0
    37d0:	55 0f       	add	r21, r21
    37d2:	aa 0b       	sbc	r26, r26
    37d4:	e0 e8       	ldi	r30, 0x80	; 128
    37d6:	fe ef       	ldi	r31, 0xFE	; 254
    37d8:	16 16       	cp	r1, r22
    37da:	17 06       	cpc	r1, r23
    37dc:	e8 07       	cpc	r30, r24
    37de:	f9 07       	cpc	r31, r25
    37e0:	c0 f0       	brcs	.+48     	; 0x3812 <__fp_cmp+0x46>
    37e2:	12 16       	cp	r1, r18
    37e4:	13 06       	cpc	r1, r19
    37e6:	e4 07       	cpc	r30, r20
    37e8:	f5 07       	cpc	r31, r21
    37ea:	98 f0       	brcs	.+38     	; 0x3812 <__fp_cmp+0x46>
    37ec:	62 1b       	sub	r22, r18
    37ee:	73 0b       	sbc	r23, r19
    37f0:	84 0b       	sbc	r24, r20
    37f2:	95 0b       	sbc	r25, r21
    37f4:	39 f4       	brne	.+14     	; 0x3804 <__fp_cmp+0x38>
    37f6:	0a 26       	eor	r0, r26
    37f8:	61 f0       	breq	.+24     	; 0x3812 <__fp_cmp+0x46>
    37fa:	23 2b       	or	r18, r19
    37fc:	24 2b       	or	r18, r20
    37fe:	25 2b       	or	r18, r21
    3800:	21 f4       	brne	.+8      	; 0x380a <__fp_cmp+0x3e>
    3802:	08 95       	ret
    3804:	0a 26       	eor	r0, r26
    3806:	09 f4       	brne	.+2      	; 0x380a <__fp_cmp+0x3e>
    3808:	a1 40       	sbci	r26, 0x01	; 1
    380a:	a6 95       	lsr	r26
    380c:	8f ef       	ldi	r24, 0xFF	; 255
    380e:	81 1d       	adc	r24, r1
    3810:	81 1d       	adc	r24, r1
    3812:	08 95       	ret

00003814 <__fp_inf>:
    3814:	97 f9       	bld	r25, 7
    3816:	9f 67       	ori	r25, 0x7F	; 127
    3818:	80 e8       	ldi	r24, 0x80	; 128
    381a:	70 e0       	ldi	r23, 0x00	; 0
    381c:	60 e0       	ldi	r22, 0x00	; 0
    381e:	08 95       	ret

00003820 <__fp_mintl>:
    3820:	88 23       	and	r24, r24
    3822:	71 f4       	brne	.+28     	; 0x3840 <__fp_mintl+0x20>
    3824:	77 23       	and	r23, r23
    3826:	21 f0       	breq	.+8      	; 0x3830 <__fp_mintl+0x10>
    3828:	98 50       	subi	r25, 0x08	; 8
    382a:	87 2b       	or	r24, r23
    382c:	76 2f       	mov	r23, r22
    382e:	07 c0       	rjmp	.+14     	; 0x383e <__fp_mintl+0x1e>
    3830:	66 23       	and	r22, r22
    3832:	11 f4       	brne	.+4      	; 0x3838 <__fp_mintl+0x18>
    3834:	99 27       	eor	r25, r25
    3836:	0d c0       	rjmp	.+26     	; 0x3852 <__fp_mintl+0x32>
    3838:	90 51       	subi	r25, 0x10	; 16
    383a:	86 2b       	or	r24, r22
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	60 e0       	ldi	r22, 0x00	; 0
    3840:	2a f0       	brmi	.+10     	; 0x384c <__fp_mintl+0x2c>
    3842:	9a 95       	dec	r25
    3844:	66 0f       	add	r22, r22
    3846:	77 1f       	adc	r23, r23
    3848:	88 1f       	adc	r24, r24
    384a:	da f7       	brpl	.-10     	; 0x3842 <__fp_mintl+0x22>
    384c:	88 0f       	add	r24, r24
    384e:	96 95       	lsr	r25
    3850:	87 95       	ror	r24
    3852:	97 f9       	bld	r25, 7
    3854:	08 95       	ret

00003856 <__fp_mpack>:
    3856:	9f 3f       	cpi	r25, 0xFF	; 255
    3858:	31 f0       	breq	.+12     	; 0x3866 <__fp_mpack_finite+0xc>

0000385a <__fp_mpack_finite>:
    385a:	91 50       	subi	r25, 0x01	; 1
    385c:	20 f4       	brcc	.+8      	; 0x3866 <__fp_mpack_finite+0xc>
    385e:	87 95       	ror	r24
    3860:	77 95       	ror	r23
    3862:	67 95       	ror	r22
    3864:	b7 95       	ror	r27
    3866:	88 0f       	add	r24, r24
    3868:	91 1d       	adc	r25, r1
    386a:	96 95       	lsr	r25
    386c:	87 95       	ror	r24
    386e:	97 f9       	bld	r25, 7
    3870:	08 95       	ret

00003872 <__fp_nan>:
    3872:	9f ef       	ldi	r25, 0xFF	; 255
    3874:	80 ec       	ldi	r24, 0xC0	; 192
    3876:	08 95       	ret

00003878 <__fp_pscA>:
    3878:	00 24       	eor	r0, r0
    387a:	0a 94       	dec	r0
    387c:	16 16       	cp	r1, r22
    387e:	17 06       	cpc	r1, r23
    3880:	18 06       	cpc	r1, r24
    3882:	09 06       	cpc	r0, r25
    3884:	08 95       	ret

00003886 <__fp_pscB>:
    3886:	00 24       	eor	r0, r0
    3888:	0a 94       	dec	r0
    388a:	12 16       	cp	r1, r18
    388c:	13 06       	cpc	r1, r19
    388e:	14 06       	cpc	r1, r20
    3890:	05 06       	cpc	r0, r21
    3892:	08 95       	ret

00003894 <__fp_round>:
    3894:	09 2e       	mov	r0, r25
    3896:	03 94       	inc	r0
    3898:	00 0c       	add	r0, r0
    389a:	11 f4       	brne	.+4      	; 0x38a0 <__fp_round+0xc>
    389c:	88 23       	and	r24, r24
    389e:	52 f0       	brmi	.+20     	; 0x38b4 <__fp_round+0x20>
    38a0:	bb 0f       	add	r27, r27
    38a2:	40 f4       	brcc	.+16     	; 0x38b4 <__fp_round+0x20>
    38a4:	bf 2b       	or	r27, r31
    38a6:	11 f4       	brne	.+4      	; 0x38ac <__fp_round+0x18>
    38a8:	60 ff       	sbrs	r22, 0
    38aa:	04 c0       	rjmp	.+8      	; 0x38b4 <__fp_round+0x20>
    38ac:	6f 5f       	subi	r22, 0xFF	; 255
    38ae:	7f 4f       	sbci	r23, 0xFF	; 255
    38b0:	8f 4f       	sbci	r24, 0xFF	; 255
    38b2:	9f 4f       	sbci	r25, 0xFF	; 255
    38b4:	08 95       	ret

000038b6 <__fp_split3>:
    38b6:	57 fd       	sbrc	r21, 7
    38b8:	90 58       	subi	r25, 0x80	; 128
    38ba:	44 0f       	add	r20, r20
    38bc:	55 1f       	adc	r21, r21
    38be:	59 f0       	breq	.+22     	; 0x38d6 <__fp_splitA+0x10>
    38c0:	5f 3f       	cpi	r21, 0xFF	; 255
    38c2:	71 f0       	breq	.+28     	; 0x38e0 <__fp_splitA+0x1a>
    38c4:	47 95       	ror	r20

000038c6 <__fp_splitA>:
    38c6:	88 0f       	add	r24, r24
    38c8:	97 fb       	bst	r25, 7
    38ca:	99 1f       	adc	r25, r25
    38cc:	61 f0       	breq	.+24     	; 0x38e6 <__fp_splitA+0x20>
    38ce:	9f 3f       	cpi	r25, 0xFF	; 255
    38d0:	79 f0       	breq	.+30     	; 0x38f0 <__fp_splitA+0x2a>
    38d2:	87 95       	ror	r24
    38d4:	08 95       	ret
    38d6:	12 16       	cp	r1, r18
    38d8:	13 06       	cpc	r1, r19
    38da:	14 06       	cpc	r1, r20
    38dc:	55 1f       	adc	r21, r21
    38de:	f2 cf       	rjmp	.-28     	; 0x38c4 <__fp_split3+0xe>
    38e0:	46 95       	lsr	r20
    38e2:	f1 df       	rcall	.-30     	; 0x38c6 <__fp_splitA>
    38e4:	08 c0       	rjmp	.+16     	; 0x38f6 <__fp_splitA+0x30>
    38e6:	16 16       	cp	r1, r22
    38e8:	17 06       	cpc	r1, r23
    38ea:	18 06       	cpc	r1, r24
    38ec:	99 1f       	adc	r25, r25
    38ee:	f1 cf       	rjmp	.-30     	; 0x38d2 <__fp_splitA+0xc>
    38f0:	86 95       	lsr	r24
    38f2:	71 05       	cpc	r23, r1
    38f4:	61 05       	cpc	r22, r1
    38f6:	08 94       	sec
    38f8:	08 95       	ret

000038fa <__fp_trunc>:
    38fa:	e5 df       	rcall	.-54     	; 0x38c6 <__fp_splitA>
    38fc:	a0 f0       	brcs	.+40     	; 0x3926 <__fp_trunc+0x2c>
    38fe:	be e7       	ldi	r27, 0x7E	; 126
    3900:	b9 17       	cp	r27, r25
    3902:	88 f4       	brcc	.+34     	; 0x3926 <__fp_trunc+0x2c>
    3904:	bb 27       	eor	r27, r27
    3906:	9f 38       	cpi	r25, 0x8F	; 143
    3908:	60 f4       	brcc	.+24     	; 0x3922 <__fp_trunc+0x28>
    390a:	16 16       	cp	r1, r22
    390c:	b1 1d       	adc	r27, r1
    390e:	67 2f       	mov	r22, r23
    3910:	78 2f       	mov	r23, r24
    3912:	88 27       	eor	r24, r24
    3914:	98 5f       	subi	r25, 0xF8	; 248
    3916:	f7 cf       	rjmp	.-18     	; 0x3906 <__fp_trunc+0xc>
    3918:	86 95       	lsr	r24
    391a:	77 95       	ror	r23
    391c:	67 95       	ror	r22
    391e:	b1 1d       	adc	r27, r1
    3920:	93 95       	inc	r25
    3922:	96 39       	cpi	r25, 0x96	; 150
    3924:	c8 f3       	brcs	.-14     	; 0x3918 <__fp_trunc+0x1e>
    3926:	08 95       	ret

00003928 <__fp_zero>:
    3928:	e8 94       	clt

0000392a <__fp_szero>:
    392a:	bb 27       	eor	r27, r27
    392c:	66 27       	eor	r22, r22
    392e:	77 27       	eor	r23, r23
    3930:	cb 01       	movw	r24, r22
    3932:	97 f9       	bld	r25, 7
    3934:	08 95       	ret

00003936 <__gesf2>:
    3936:	4a df       	rcall	.-364    	; 0x37cc <__fp_cmp>
    3938:	08 f4       	brcc	.+2      	; 0x393c <__gesf2+0x6>
    393a:	8f ef       	ldi	r24, 0xFF	; 255
    393c:	08 95       	ret
    393e:	0e f0       	brts	.+2      	; 0x3942 <__gesf2+0xc>
    3940:	8a cf       	rjmp	.-236    	; 0x3856 <__fp_mpack>
    3942:	97 cf       	rjmp	.-210    	; 0x3872 <__fp_nan>
    3944:	68 94       	set
    3946:	66 cf       	rjmp	.-308    	; 0x3814 <__fp_inf>

00003948 <log>:
    3948:	be df       	rcall	.-132    	; 0x38c6 <__fp_splitA>
    394a:	c8 f3       	brcs	.-14     	; 0x393e <__gesf2+0x8>
    394c:	99 23       	and	r25, r25
    394e:	d1 f3       	breq	.-12     	; 0x3944 <__gesf2+0xe>
    3950:	c6 f3       	brts	.-16     	; 0x3942 <__gesf2+0xc>
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	1f 93       	push	r17
    3958:	0f 93       	push	r16
    395a:	ff 92       	push	r15
    395c:	c9 2f       	mov	r28, r25
    395e:	dd 27       	eor	r29, r29
    3960:	88 23       	and	r24, r24
    3962:	2a f0       	brmi	.+10     	; 0x396e <log+0x26>
    3964:	21 97       	sbiw	r28, 0x01	; 1
    3966:	66 0f       	add	r22, r22
    3968:	77 1f       	adc	r23, r23
    396a:	88 1f       	adc	r24, r24
    396c:	da f7       	brpl	.-10     	; 0x3964 <log+0x1c>
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e8       	ldi	r20, 0x80	; 128
    3974:	5f eb       	ldi	r21, 0xBF	; 191
    3976:	9f e3       	ldi	r25, 0x3F	; 63
    3978:	88 39       	cpi	r24, 0x98	; 152
    397a:	20 f0       	brcs	.+8      	; 0x3984 <log+0x3c>
    397c:	80 3e       	cpi	r24, 0xE0	; 224
    397e:	30 f0       	brcs	.+12     	; 0x398c <log+0x44>
    3980:	21 96       	adiw	r28, 0x01	; 1
    3982:	8f 77       	andi	r24, 0x7F	; 127
    3984:	bf dd       	rcall	.-1154   	; 0x3504 <__addsf3>
    3986:	ec e8       	ldi	r30, 0x8C	; 140
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	03 c0       	rjmp	.+6      	; 0x3992 <log+0x4a>
    398c:	bb dd       	rcall	.-1162   	; 0x3504 <__addsf3>
    398e:	e9 eb       	ldi	r30, 0xB9	; 185
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	c6 d0       	rcall	.+396    	; 0x3b20 <__fp_powser>
    3994:	8b 01       	movw	r16, r22
    3996:	be 01       	movw	r22, r28
    3998:	ec 01       	movw	r28, r24
    399a:	fb 2e       	mov	r15, r27
    399c:	6f 57       	subi	r22, 0x7F	; 127
    399e:	71 09       	sbc	r23, r1
    39a0:	75 95       	asr	r23
    39a2:	77 1f       	adc	r23, r23
    39a4:	88 0b       	sbc	r24, r24
    39a6:	99 0b       	sbc	r25, r25
    39a8:	c3 de       	rcall	.-634    	; 0x3730 <__floatsisf>
    39aa:	28 e1       	ldi	r18, 0x18	; 24
    39ac:	32 e7       	ldi	r19, 0x72	; 114
    39ae:	41 e3       	ldi	r20, 0x31	; 49
    39b0:	5f e3       	ldi	r21, 0x3F	; 63
    39b2:	16 d0       	rcall	.+44     	; 0x39e0 <__mulsf3x>
    39b4:	af 2d       	mov	r26, r15
    39b6:	98 01       	movw	r18, r16
    39b8:	ae 01       	movw	r20, r28
    39ba:	ff 90       	pop	r15
    39bc:	0f 91       	pop	r16
    39be:	1f 91       	pop	r17
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	b0 dd       	rcall	.-1184   	; 0x3526 <__addsf3x>
    39c6:	66 cf       	rjmp	.-308    	; 0x3894 <__fp_round>

000039c8 <__mulsf3>:
    39c8:	0b d0       	rcall	.+22     	; 0x39e0 <__mulsf3x>
    39ca:	64 cf       	rjmp	.-312    	; 0x3894 <__fp_round>
    39cc:	55 df       	rcall	.-342    	; 0x3878 <__fp_pscA>
    39ce:	28 f0       	brcs	.+10     	; 0x39da <__mulsf3+0x12>
    39d0:	5a df       	rcall	.-332    	; 0x3886 <__fp_pscB>
    39d2:	18 f0       	brcs	.+6      	; 0x39da <__mulsf3+0x12>
    39d4:	95 23       	and	r25, r21
    39d6:	09 f0       	breq	.+2      	; 0x39da <__mulsf3+0x12>
    39d8:	1d cf       	rjmp	.-454    	; 0x3814 <__fp_inf>
    39da:	4b cf       	rjmp	.-362    	; 0x3872 <__fp_nan>
    39dc:	11 24       	eor	r1, r1
    39de:	a5 cf       	rjmp	.-182    	; 0x392a <__fp_szero>

000039e0 <__mulsf3x>:
    39e0:	6a df       	rcall	.-300    	; 0x38b6 <__fp_split3>
    39e2:	a0 f3       	brcs	.-24     	; 0x39cc <__mulsf3+0x4>

000039e4 <__mulsf3_pse>:
    39e4:	95 9f       	mul	r25, r21
    39e6:	d1 f3       	breq	.-12     	; 0x39dc <__mulsf3+0x14>
    39e8:	95 0f       	add	r25, r21
    39ea:	50 e0       	ldi	r21, 0x00	; 0
    39ec:	55 1f       	adc	r21, r21
    39ee:	62 9f       	mul	r22, r18
    39f0:	f0 01       	movw	r30, r0
    39f2:	72 9f       	mul	r23, r18
    39f4:	bb 27       	eor	r27, r27
    39f6:	f0 0d       	add	r31, r0
    39f8:	b1 1d       	adc	r27, r1
    39fa:	63 9f       	mul	r22, r19
    39fc:	aa 27       	eor	r26, r26
    39fe:	f0 0d       	add	r31, r0
    3a00:	b1 1d       	adc	r27, r1
    3a02:	aa 1f       	adc	r26, r26
    3a04:	64 9f       	mul	r22, r20
    3a06:	66 27       	eor	r22, r22
    3a08:	b0 0d       	add	r27, r0
    3a0a:	a1 1d       	adc	r26, r1
    3a0c:	66 1f       	adc	r22, r22
    3a0e:	82 9f       	mul	r24, r18
    3a10:	22 27       	eor	r18, r18
    3a12:	b0 0d       	add	r27, r0
    3a14:	a1 1d       	adc	r26, r1
    3a16:	62 1f       	adc	r22, r18
    3a18:	73 9f       	mul	r23, r19
    3a1a:	b0 0d       	add	r27, r0
    3a1c:	a1 1d       	adc	r26, r1
    3a1e:	62 1f       	adc	r22, r18
    3a20:	83 9f       	mul	r24, r19
    3a22:	a0 0d       	add	r26, r0
    3a24:	61 1d       	adc	r22, r1
    3a26:	22 1f       	adc	r18, r18
    3a28:	74 9f       	mul	r23, r20
    3a2a:	33 27       	eor	r19, r19
    3a2c:	a0 0d       	add	r26, r0
    3a2e:	61 1d       	adc	r22, r1
    3a30:	23 1f       	adc	r18, r19
    3a32:	84 9f       	mul	r24, r20
    3a34:	60 0d       	add	r22, r0
    3a36:	21 1d       	adc	r18, r1
    3a38:	82 2f       	mov	r24, r18
    3a3a:	76 2f       	mov	r23, r22
    3a3c:	6a 2f       	mov	r22, r26
    3a3e:	11 24       	eor	r1, r1
    3a40:	9f 57       	subi	r25, 0x7F	; 127
    3a42:	50 40       	sbci	r21, 0x00	; 0
    3a44:	8a f0       	brmi	.+34     	; 0x3a68 <__mulsf3_pse+0x84>
    3a46:	e1 f0       	breq	.+56     	; 0x3a80 <__mulsf3_pse+0x9c>
    3a48:	88 23       	and	r24, r24
    3a4a:	4a f0       	brmi	.+18     	; 0x3a5e <__mulsf3_pse+0x7a>
    3a4c:	ee 0f       	add	r30, r30
    3a4e:	ff 1f       	adc	r31, r31
    3a50:	bb 1f       	adc	r27, r27
    3a52:	66 1f       	adc	r22, r22
    3a54:	77 1f       	adc	r23, r23
    3a56:	88 1f       	adc	r24, r24
    3a58:	91 50       	subi	r25, 0x01	; 1
    3a5a:	50 40       	sbci	r21, 0x00	; 0
    3a5c:	a9 f7       	brne	.-22     	; 0x3a48 <__mulsf3_pse+0x64>
    3a5e:	9e 3f       	cpi	r25, 0xFE	; 254
    3a60:	51 05       	cpc	r21, r1
    3a62:	70 f0       	brcs	.+28     	; 0x3a80 <__mulsf3_pse+0x9c>
    3a64:	d7 ce       	rjmp	.-594    	; 0x3814 <__fp_inf>
    3a66:	61 cf       	rjmp	.-318    	; 0x392a <__fp_szero>
    3a68:	5f 3f       	cpi	r21, 0xFF	; 255
    3a6a:	ec f3       	brlt	.-6      	; 0x3a66 <__mulsf3_pse+0x82>
    3a6c:	98 3e       	cpi	r25, 0xE8	; 232
    3a6e:	dc f3       	brlt	.-10     	; 0x3a66 <__mulsf3_pse+0x82>
    3a70:	86 95       	lsr	r24
    3a72:	77 95       	ror	r23
    3a74:	67 95       	ror	r22
    3a76:	b7 95       	ror	r27
    3a78:	f7 95       	ror	r31
    3a7a:	e7 95       	ror	r30
    3a7c:	9f 5f       	subi	r25, 0xFF	; 255
    3a7e:	c1 f7       	brne	.-16     	; 0x3a70 <__mulsf3_pse+0x8c>
    3a80:	fe 2b       	or	r31, r30
    3a82:	88 0f       	add	r24, r24
    3a84:	91 1d       	adc	r25, r1
    3a86:	96 95       	lsr	r25
    3a88:	87 95       	ror	r24
    3a8a:	97 f9       	bld	r25, 7
    3a8c:	08 95       	ret
    3a8e:	11 f4       	brne	.+4      	; 0x3a94 <__mulsf3_pse+0xb0>
    3a90:	0e f4       	brtc	.+2      	; 0x3a94 <__mulsf3_pse+0xb0>
    3a92:	ef ce       	rjmp	.-546    	; 0x3872 <__fp_nan>
    3a94:	e0 ce       	rjmp	.-576    	; 0x3856 <__fp_mpack>

00003a96 <sqrt>:
    3a96:	17 df       	rcall	.-466    	; 0x38c6 <__fp_splitA>
    3a98:	d0 f3       	brcs	.-12     	; 0x3a8e <__mulsf3_pse+0xaa>
    3a9a:	99 23       	and	r25, r25
    3a9c:	d9 f3       	breq	.-10     	; 0x3a94 <__mulsf3_pse+0xb0>
    3a9e:	ce f3       	brts	.-14     	; 0x3a92 <__mulsf3_pse+0xae>
    3aa0:	9f 57       	subi	r25, 0x7F	; 127
    3aa2:	55 0b       	sbc	r21, r21
    3aa4:	87 ff       	sbrs	r24, 7
    3aa6:	35 d0       	rcall	.+106    	; 0x3b12 <__fp_norm2>
    3aa8:	00 24       	eor	r0, r0
    3aaa:	a0 e6       	ldi	r26, 0x60	; 96
    3aac:	40 ea       	ldi	r20, 0xA0	; 160
    3aae:	90 01       	movw	r18, r0
    3ab0:	80 58       	subi	r24, 0x80	; 128
    3ab2:	56 95       	lsr	r21
    3ab4:	97 95       	ror	r25
    3ab6:	28 f4       	brcc	.+10     	; 0x3ac2 <sqrt+0x2c>
    3ab8:	80 5c       	subi	r24, 0xC0	; 192
    3aba:	66 0f       	add	r22, r22
    3abc:	77 1f       	adc	r23, r23
    3abe:	88 1f       	adc	r24, r24
    3ac0:	20 f0       	brcs	.+8      	; 0x3aca <sqrt+0x34>
    3ac2:	26 17       	cp	r18, r22
    3ac4:	37 07       	cpc	r19, r23
    3ac6:	48 07       	cpc	r20, r24
    3ac8:	30 f4       	brcc	.+12     	; 0x3ad6 <sqrt+0x40>
    3aca:	62 1b       	sub	r22, r18
    3acc:	73 0b       	sbc	r23, r19
    3ace:	84 0b       	sbc	r24, r20
    3ad0:	20 29       	or	r18, r0
    3ad2:	31 29       	or	r19, r1
    3ad4:	4a 2b       	or	r20, r26
    3ad6:	a6 95       	lsr	r26
    3ad8:	17 94       	ror	r1
    3ada:	07 94       	ror	r0
    3adc:	20 25       	eor	r18, r0
    3ade:	31 25       	eor	r19, r1
    3ae0:	4a 27       	eor	r20, r26
    3ae2:	58 f7       	brcc	.-42     	; 0x3aba <sqrt+0x24>
    3ae4:	66 0f       	add	r22, r22
    3ae6:	77 1f       	adc	r23, r23
    3ae8:	88 1f       	adc	r24, r24
    3aea:	20 f0       	brcs	.+8      	; 0x3af4 <sqrt+0x5e>
    3aec:	26 17       	cp	r18, r22
    3aee:	37 07       	cpc	r19, r23
    3af0:	48 07       	cpc	r20, r24
    3af2:	30 f4       	brcc	.+12     	; 0x3b00 <sqrt+0x6a>
    3af4:	62 0b       	sbc	r22, r18
    3af6:	73 0b       	sbc	r23, r19
    3af8:	84 0b       	sbc	r24, r20
    3afa:	20 0d       	add	r18, r0
    3afc:	31 1d       	adc	r19, r1
    3afe:	41 1d       	adc	r20, r1
    3b00:	a0 95       	com	r26
    3b02:	81 f7       	brne	.-32     	; 0x3ae4 <sqrt+0x4e>
    3b04:	b9 01       	movw	r22, r18
    3b06:	84 2f       	mov	r24, r20
    3b08:	91 58       	subi	r25, 0x81	; 129
    3b0a:	88 0f       	add	r24, r24
    3b0c:	96 95       	lsr	r25
    3b0e:	87 95       	ror	r24
    3b10:	08 95       	ret

00003b12 <__fp_norm2>:
    3b12:	91 50       	subi	r25, 0x01	; 1
    3b14:	50 40       	sbci	r21, 0x00	; 0
    3b16:	66 0f       	add	r22, r22
    3b18:	77 1f       	adc	r23, r23
    3b1a:	88 1f       	adc	r24, r24
    3b1c:	d2 f7       	brpl	.-12     	; 0x3b12 <__fp_norm2>
    3b1e:	08 95       	ret

00003b20 <__fp_powser>:
    3b20:	df 93       	push	r29
    3b22:	cf 93       	push	r28
    3b24:	1f 93       	push	r17
    3b26:	0f 93       	push	r16
    3b28:	ff 92       	push	r15
    3b2a:	ef 92       	push	r14
    3b2c:	df 92       	push	r13
    3b2e:	7b 01       	movw	r14, r22
    3b30:	8c 01       	movw	r16, r24
    3b32:	68 94       	set
    3b34:	05 c0       	rjmp	.+10     	; 0x3b40 <__fp_powser+0x20>
    3b36:	da 2e       	mov	r13, r26
    3b38:	ef 01       	movw	r28, r30
    3b3a:	52 df       	rcall	.-348    	; 0x39e0 <__mulsf3x>
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e8 94       	clt
    3b40:	a5 91       	lpm	r26, Z+
    3b42:	25 91       	lpm	r18, Z+
    3b44:	35 91       	lpm	r19, Z+
    3b46:	45 91       	lpm	r20, Z+
    3b48:	55 91       	lpm	r21, Z+
    3b4a:	ae f3       	brts	.-22     	; 0x3b36 <__fp_powser+0x16>
    3b4c:	ef 01       	movw	r28, r30
    3b4e:	eb dc       	rcall	.-1578   	; 0x3526 <__addsf3x>
    3b50:	fe 01       	movw	r30, r28
    3b52:	97 01       	movw	r18, r14
    3b54:	a8 01       	movw	r20, r16
    3b56:	da 94       	dec	r13
    3b58:	79 f7       	brne	.-34     	; 0x3b38 <__fp_powser+0x18>
    3b5a:	df 90       	pop	r13
    3b5c:	ef 90       	pop	r14
    3b5e:	ff 90       	pop	r15
    3b60:	0f 91       	pop	r16
    3b62:	1f 91       	pop	r17
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <__mulsi3>:
    3b6a:	db 01       	movw	r26, r22
    3b6c:	8f 93       	push	r24
    3b6e:	9f 93       	push	r25
    3b70:	5c d0       	rcall	.+184    	; 0x3c2a <__muluhisi3>
    3b72:	bf 91       	pop	r27
    3b74:	af 91       	pop	r26
    3b76:	a2 9f       	mul	r26, r18
    3b78:	80 0d       	add	r24, r0
    3b7a:	91 1d       	adc	r25, r1
    3b7c:	a3 9f       	mul	r26, r19
    3b7e:	90 0d       	add	r25, r0
    3b80:	b2 9f       	mul	r27, r18
    3b82:	90 0d       	add	r25, r0
    3b84:	11 24       	eor	r1, r1
    3b86:	08 95       	ret

00003b88 <__divmodhi4>:
    3b88:	97 fb       	bst	r25, 7
    3b8a:	07 2e       	mov	r0, r23
    3b8c:	16 f4       	brtc	.+4      	; 0x3b92 <__divmodhi4+0xa>
    3b8e:	00 94       	com	r0
    3b90:	06 d0       	rcall	.+12     	; 0x3b9e <__divmodhi4_neg1>
    3b92:	77 fd       	sbrc	r23, 7
    3b94:	08 d0       	rcall	.+16     	; 0x3ba6 <__divmodhi4_neg2>
    3b96:	53 d0       	rcall	.+166    	; 0x3c3e <__udivmodhi4>
    3b98:	07 fc       	sbrc	r0, 7
    3b9a:	05 d0       	rcall	.+10     	; 0x3ba6 <__divmodhi4_neg2>
    3b9c:	3e f4       	brtc	.+14     	; 0x3bac <__divmodhi4_exit>

00003b9e <__divmodhi4_neg1>:
    3b9e:	90 95       	com	r25
    3ba0:	81 95       	neg	r24
    3ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba4:	08 95       	ret

00003ba6 <__divmodhi4_neg2>:
    3ba6:	70 95       	com	r23
    3ba8:	61 95       	neg	r22
    3baa:	7f 4f       	sbci	r23, 0xFF	; 255

00003bac <__divmodhi4_exit>:
    3bac:	08 95       	ret

00003bae <__udivmodsi4>:
    3bae:	a1 e2       	ldi	r26, 0x21	; 33
    3bb0:	1a 2e       	mov	r1, r26
    3bb2:	aa 1b       	sub	r26, r26
    3bb4:	bb 1b       	sub	r27, r27
    3bb6:	fd 01       	movw	r30, r26
    3bb8:	0d c0       	rjmp	.+26     	; 0x3bd4 <__udivmodsi4_ep>

00003bba <__udivmodsi4_loop>:
    3bba:	aa 1f       	adc	r26, r26
    3bbc:	bb 1f       	adc	r27, r27
    3bbe:	ee 1f       	adc	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	a2 17       	cp	r26, r18
    3bc4:	b3 07       	cpc	r27, r19
    3bc6:	e4 07       	cpc	r30, r20
    3bc8:	f5 07       	cpc	r31, r21
    3bca:	20 f0       	brcs	.+8      	; 0x3bd4 <__udivmodsi4_ep>
    3bcc:	a2 1b       	sub	r26, r18
    3bce:	b3 0b       	sbc	r27, r19
    3bd0:	e4 0b       	sbc	r30, r20
    3bd2:	f5 0b       	sbc	r31, r21

00003bd4 <__udivmodsi4_ep>:
    3bd4:	66 1f       	adc	r22, r22
    3bd6:	77 1f       	adc	r23, r23
    3bd8:	88 1f       	adc	r24, r24
    3bda:	99 1f       	adc	r25, r25
    3bdc:	1a 94       	dec	r1
    3bde:	69 f7       	brne	.-38     	; 0x3bba <__udivmodsi4_loop>
    3be0:	60 95       	com	r22
    3be2:	70 95       	com	r23
    3be4:	80 95       	com	r24
    3be6:	90 95       	com	r25
    3be8:	9b 01       	movw	r18, r22
    3bea:	ac 01       	movw	r20, r24
    3bec:	bd 01       	movw	r22, r26
    3bee:	cf 01       	movw	r24, r30
    3bf0:	08 95       	ret

00003bf2 <__divmodsi4>:
    3bf2:	05 2e       	mov	r0, r21
    3bf4:	97 fb       	bst	r25, 7
    3bf6:	16 f4       	brtc	.+4      	; 0x3bfc <__divmodsi4+0xa>
    3bf8:	00 94       	com	r0
    3bfa:	0f d0       	rcall	.+30     	; 0x3c1a <__negsi2>
    3bfc:	57 fd       	sbrc	r21, 7
    3bfe:	05 d0       	rcall	.+10     	; 0x3c0a <__divmodsi4_neg2>
    3c00:	d6 df       	rcall	.-84     	; 0x3bae <__udivmodsi4>
    3c02:	07 fc       	sbrc	r0, 7
    3c04:	02 d0       	rcall	.+4      	; 0x3c0a <__divmodsi4_neg2>
    3c06:	46 f4       	brtc	.+16     	; 0x3c18 <__divmodsi4_exit>
    3c08:	08 c0       	rjmp	.+16     	; 0x3c1a <__negsi2>

00003c0a <__divmodsi4_neg2>:
    3c0a:	50 95       	com	r21
    3c0c:	40 95       	com	r20
    3c0e:	30 95       	com	r19
    3c10:	21 95       	neg	r18
    3c12:	3f 4f       	sbci	r19, 0xFF	; 255
    3c14:	4f 4f       	sbci	r20, 0xFF	; 255
    3c16:	5f 4f       	sbci	r21, 0xFF	; 255

00003c18 <__divmodsi4_exit>:
    3c18:	08 95       	ret

00003c1a <__negsi2>:
    3c1a:	90 95       	com	r25
    3c1c:	80 95       	com	r24
    3c1e:	70 95       	com	r23
    3c20:	61 95       	neg	r22
    3c22:	7f 4f       	sbci	r23, 0xFF	; 255
    3c24:	8f 4f       	sbci	r24, 0xFF	; 255
    3c26:	9f 4f       	sbci	r25, 0xFF	; 255
    3c28:	08 95       	ret

00003c2a <__muluhisi3>:
    3c2a:	1d d0       	rcall	.+58     	; 0x3c66 <__umulhisi3>
    3c2c:	a5 9f       	mul	r26, r21
    3c2e:	90 0d       	add	r25, r0
    3c30:	b4 9f       	mul	r27, r20
    3c32:	90 0d       	add	r25, r0
    3c34:	a4 9f       	mul	r26, r20
    3c36:	80 0d       	add	r24, r0
    3c38:	91 1d       	adc	r25, r1
    3c3a:	11 24       	eor	r1, r1
    3c3c:	08 95       	ret

00003c3e <__udivmodhi4>:
    3c3e:	aa 1b       	sub	r26, r26
    3c40:	bb 1b       	sub	r27, r27
    3c42:	51 e1       	ldi	r21, 0x11	; 17
    3c44:	07 c0       	rjmp	.+14     	; 0x3c54 <__udivmodhi4_ep>

00003c46 <__udivmodhi4_loop>:
    3c46:	aa 1f       	adc	r26, r26
    3c48:	bb 1f       	adc	r27, r27
    3c4a:	a6 17       	cp	r26, r22
    3c4c:	b7 07       	cpc	r27, r23
    3c4e:	10 f0       	brcs	.+4      	; 0x3c54 <__udivmodhi4_ep>
    3c50:	a6 1b       	sub	r26, r22
    3c52:	b7 0b       	sbc	r27, r23

00003c54 <__udivmodhi4_ep>:
    3c54:	88 1f       	adc	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	5a 95       	dec	r21
    3c5a:	a9 f7       	brne	.-22     	; 0x3c46 <__udivmodhi4_loop>
    3c5c:	80 95       	com	r24
    3c5e:	90 95       	com	r25
    3c60:	bc 01       	movw	r22, r24
    3c62:	cd 01       	movw	r24, r26
    3c64:	08 95       	ret

00003c66 <__umulhisi3>:
    3c66:	a2 9f       	mul	r26, r18
    3c68:	b0 01       	movw	r22, r0
    3c6a:	b3 9f       	mul	r27, r19
    3c6c:	c0 01       	movw	r24, r0
    3c6e:	a3 9f       	mul	r26, r19
    3c70:	70 0d       	add	r23, r0
    3c72:	81 1d       	adc	r24, r1
    3c74:	11 24       	eor	r1, r1
    3c76:	91 1d       	adc	r25, r1
    3c78:	b2 9f       	mul	r27, r18
    3c7a:	70 0d       	add	r23, r0
    3c7c:	81 1d       	adc	r24, r1
    3c7e:	11 24       	eor	r1, r1
    3c80:	91 1d       	adc	r25, r1
    3c82:	08 95       	ret

00003c84 <eeprom_read_block>:
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22

00003c88 <eeprom_read_blraw>:
    3c88:	fc 01       	movw	r30, r24
    3c8a:	f9 99       	sbic	0x1f, 1	; 31
    3c8c:	fe cf       	rjmp	.-4      	; 0x3c8a <eeprom_read_blraw+0x2>
    3c8e:	06 c0       	rjmp	.+12     	; 0x3c9c <eeprom_read_blraw+0x14>
    3c90:	f2 bd       	out	0x22, r31	; 34
    3c92:	e1 bd       	out	0x21, r30	; 33
    3c94:	f8 9a       	sbi	0x1f, 0	; 31
    3c96:	31 96       	adiw	r30, 0x01	; 1
    3c98:	00 b4       	in	r0, 0x20	; 32
    3c9a:	0d 92       	st	X+, r0
    3c9c:	41 50       	subi	r20, 0x01	; 1
    3c9e:	50 40       	sbci	r21, 0x00	; 0
    3ca0:	b8 f7       	brcc	.-18     	; 0x3c90 <eeprom_read_blraw+0x8>
    3ca2:	08 95       	ret

00003ca4 <eeprom_update_block>:
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	a4 0f       	add	r26, r20
    3ca8:	b5 1f       	adc	r27, r21
    3caa:	41 50       	subi	r20, 0x01	; 1
    3cac:	50 40       	sbci	r21, 0x00	; 0
    3cae:	40 f0       	brcs	.+16     	; 0x3cc0 <eeprom_update_block+0x1c>
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	84 0f       	add	r24, r20
    3cb4:	95 1f       	adc	r25, r21
    3cb6:	2e 91       	ld	r18, -X
    3cb8:	05 d0       	rcall	.+10     	; 0x3cc4 <eeprom_update_r18>
    3cba:	41 50       	subi	r20, 0x01	; 1
    3cbc:	50 40       	sbci	r21, 0x00	; 0
    3cbe:	d8 f7       	brcc	.-10     	; 0x3cb6 <eeprom_update_block+0x12>
    3cc0:	08 95       	ret

00003cc2 <eeprom_update_byte>:
    3cc2:	26 2f       	mov	r18, r22

00003cc4 <eeprom_update_r18>:
    3cc4:	f9 99       	sbic	0x1f, 1	; 31
    3cc6:	fe cf       	rjmp	.-4      	; 0x3cc4 <eeprom_update_r18>
    3cc8:	92 bd       	out	0x22, r25	; 34
    3cca:	81 bd       	out	0x21, r24	; 33
    3ccc:	f8 9a       	sbi	0x1f, 0	; 31
    3cce:	01 97       	sbiw	r24, 0x01	; 1
    3cd0:	00 b4       	in	r0, 0x20	; 32
    3cd2:	02 16       	cp	r0, r18
    3cd4:	39 f0       	breq	.+14     	; 0x3ce4 <eeprom_update_r18+0x20>
    3cd6:	1f ba       	out	0x1f, r1	; 31
    3cd8:	20 bd       	out	0x20, r18	; 32
    3cda:	0f b6       	in	r0, 0x3f	; 63
    3cdc:	f8 94       	cli
    3cde:	fa 9a       	sbi	0x1f, 2	; 31
    3ce0:	f9 9a       	sbi	0x1f, 1	; 31
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	08 95       	ret

00003ce6 <_exit>:
    3ce6:	f8 94       	cli

00003ce8 <__stop_program>:
    3ce8:	ff cf       	rjmp	.-2      	; 0x3ce8 <__stop_program>
